SCRIPT  /home/bird/.local/share/nvim/lazy/vimtex/syntax/tex.vim
Sourced 1 time
Total time:   0.000045
 Self time:   0.000045

count  total (s)   self (s)
                            " VimTeX - LaTeX plugin for Vim
                            "
                            " Maintainer: Karl Yngve Lerv√•g
                            " Email:      karl.yngve@gmail.com
                            "
                            "
                            " This script is a fork of version 119 (dated 2020-06-29) of the syntax script
                            " "tex.vim" created and maintained by Charles E. Campbell [0].
                            "
                            " [0]: http://www.drchip.org/astronaut/vim/index.html#SYNTAX_TEX
                            
    1              0.000026 if !get(g:, 'vimtex_syntax_enabled', 1) | finish | endif
                            if exists('b:current_syntax') | finish | endif
                            if exists('s:is_loading') | finish | endif
                            let s:is_loading = 1
                            
                            " Syntax may be loaded without the main VimTeX functionality, thus we need to
                            " ensure that the options are loaded!
                            call vimtex#options#init()
                            
                            " Load core syntax and highlighting rules (does not depend on VimTeX state)
                            call vimtex#syntax#core#init_options()
                            call vimtex#syntax#core#init_rules()
                            call vimtex#syntax#core#init_highlights()
                            
                            " Initialize buffer local syntax state
                            unlet! b:vimtex_syntax_did_postinit
                            let b:vimtex_syntax = {}
                            call vimtex#syntax#nested#reset()
                            
                            " Load syntax rules that depend on VimTeX state
                            " * This includes e.g. package specific syntax
                            if exists('b:vimtex')
                              call vimtex#syntax#core#init_post()
                            endif
                            
                            " Use autocommands to ensure
                            " 1. that highlight groups are defined when colorschemes are changed or the
                            "    background is toggled, and
                            " 2. that the init_post function is executed when VimTeX state is loaded (if it
                            "    was not already done).
                            augroup vimtex_syntax
                              autocmd! * <buffer>
                              autocmd ColorScheme <buffer> call vimtex#syntax#core#init_highlights()
                              autocmd! User VimtexEventInitPost call vimtex#syntax#core#init_post()
                            augroup END
                            
                            unlet s:is_loading

SCRIPT  /usr/share/nvim/runtime/syntax/tex.vim
Sourced 1 time
Total time:   0.038045
 Self time:   0.015538

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	TeX
                            " Maintainer:	This runtime file is looking for a new maintainer.
                            " Former Maintainer: Charles E. Campbell
                            " Last Change:	Apr 22, 2022
                            "   2024 Feb 19 by Vim Project: announce adoption
                            "   2025 Jan 18 by Vim Project: add texEmphStyle to texMatchGroup, #16228
                            "   2025 Feb 08 by Vim Project: improve macro option, \providecommand, 
                            "                               \newcommand and \newenvironment #16543
                            " Version:	121
                            " Former URL:	http://www.drchip.org/astronaut/vim/index.html#SYNTAX_TEX
                            "
                            " Notes: {{{1
                            "
                            " 1. If you have a \begin{verbatim} that appears to overrun its boundaries,
                            "    use %stopzone.
                            "
                            " 2. Run-on equations ($..$ and $$..$$, particularly) can also be stopped
                            "    by suitable use of %stopzone.
                            "
                            " 3. If you have a slow computer, you may wish to modify
                            "
                            "	syn sync maxlines=200
                            "	syn sync minlines=50
                            "
                            "    to values that are more to your liking.
                            "
                            " 4. There is no match-syncing for $...$ and $$...$$; hence large
                            "    equation blocks constructed that way may exhibit syncing problems.
                            "    (there's no difference between begin/end patterns)
                            "
                            " 5. If you have the variable "g:tex_no_error" defined then none of the
                            "    lexical error-checking will be done.
                            "
                            "    ie. let g:tex_no_error=1
                            "
                            " 6. Please see  :help latex-syntax  for information on
                            "      syntax folding           :help tex-folding
                            "      spell checking           :help tex-nospell
                            "      commands and mathzones   :help tex-runon
                            "      new command highlighting :help tex-morecommands
                            "      error highlighting       :help tex-error
                            "      new math groups          :help tex-math
                            "      new styles               :help tex-style
                            "      using conceal mode       :help tex-conceal
                            
                            " Version Clears: {{{1
                            " quit when a syntax file was already loaded
    1              0.000007 if exists("b:current_syntax")
                              finish
    1              0.000001 endif
    1              0.000008 let s:keepcpo= &cpo
    1   0.000035   0.000021 set cpo&vim
    1              0.000005 scriptencoding utf-8
                            
                            " by default, enable all region-based highlighting
    1              0.000018 let s:tex_fast= "bcmMprsSvV"
    1              0.000004 if exists("g:tex_fast")
                             if type(g:tex_fast) != 1
                              " g:tex_fast exists and is not a string, so
                              " turn off all optional region-based highighting
                              let s:tex_fast= ""
                             else
                              let s:tex_fast= g:tex_fast
                             endif
    1              0.000001 endif
                            
                            " let user determine which classes of concealment will be supported
                            "   a=accents/ligatures d=delimiters m=math symbols  g=Greek  s=superscripts/subscripts
    1              0.000004 if !exists("g:tex_conceal")
    1              0.000003  let s:tex_conceal= 'abdmgsS'
                            else
                             let s:tex_conceal= g:tex_conceal
    1              0.000001 endif
    1              0.000004 if !exists("g:tex_superscripts")
    1              0.000004  let s:tex_superscripts= '[0-9a-zA-W.,:;+-<>/()=]'
                            else
                             let s:tex_superscripts= g:tex_superscripts
    1              0.000001 endif
    1              0.000003 if !exists("g:tex_subscripts")
    1              0.000003  let s:tex_subscripts= '[0-9aehijklmnoprstuvx,+-/().]'
                            else
                             let s:tex_subscripts= g:tex_subscripts
    1              0.000001 endif
                            
                            " Determine whether or not to use "*.sty" mode {{{1
                            " The user may override the normal determination by setting
                            "   g:tex_stylish to 1      (for    "*.sty" mode)
                            "    or to           0 else (normal "*.tex" mode)
                            " or on a buffer-by-buffer basis with b:tex_stylish
    1              0.000007 let s:extfname=expand("%:e")
    1              0.000004 if exists("g:tex_stylish")
                             let b:tex_stylish= g:tex_stylish
    1              0.000004 elseif !exists("b:tex_stylish")
    1              0.000008  if s:extfname == "sty" || s:extfname == "cls" || s:extfname == "clo" || s:extfname == "dtx" || s:extfname == "ltx"
                              let b:tex_stylish= 1
    1              0.000001  else
    1              0.000003   let b:tex_stylish= 0
    1              0.000001  endif
    1              0.000001 endif
                            
                            " handle folding {{{1
    1              0.000004 if !exists("g:tex_fold_enabled")
    1              0.000003  let s:tex_fold_enabled= 0
                            elseif g:tex_fold_enabled && !has("folding")
                             let s:tex_fold_enabled= 0
                             echomsg "Ignoring g:tex_fold_enabled=".g:tex_fold_enabled."; need to re-compile vim for +fold support"
                            else
                             let s:tex_fold_enabled= 1
    1              0.000002 endif
    1              0.000004 if s:tex_fold_enabled && &fdm == "manual"
                             setl fdm=syntax
    1              0.000001 endif
    1              0.000004 if s:tex_fold_enabled && has("folding")
                             com! -nargs=* TexFold <args> fold
    1              0.000002 else
    1              0.000015  com! -nargs=* TexFold <args>
    1              0.000002 endif
                            
                            " (La)TeX keywords: uses the characters 0-9,a-z,A-Z,192-255 only... {{{1
                            " but _ is the only one that causes problems.
                            " One may override this iskeyword setting by providing
                            " g:tex_isk
    1              0.000005 if exists("g:tex_isk")
                             if b:tex_stylish && g:tex_isk !~ '@'
                              let b:tex_isk= '@,'.g:tex_isk
                             else
                              let b:tex_isk= g:tex_isk
                             endif
    1              0.000008 elseif b:tex_stylish
                             let b:tex_isk="@,48-57,a-z,A-Z,192-255"
    1              0.000002 else
    1              0.000004  let b:tex_isk="48-57,a-z,A-Z,192-255"
    1              0.000001 endif
    1              0.000006 if (v:version == 704 && has("patch-7.4.1142")) || v:version > 704
    1              0.000012  exe "syn iskeyword ".b:tex_isk
                            else
                             exe "setl isk=".b:tex_isk
    1              0.000001 endif
    1              0.000004 if exists("g:tex_no_error") && g:tex_no_error
                             let s:tex_no_error= 1
    1              0.000001 else
    1              0.000012  let s:tex_no_error= 0
    1              0.000001 endif
    1              0.000004 if exists("g:tex_comment_nospell") && g:tex_comment_nospell
                             let s:tex_comment_nospell= 1
    1              0.000001 else
    1              0.000002  let s:tex_comment_nospell= 0
    1              0.000001 endif
    1              0.000003 if exists("g:tex_nospell") && g:tex_nospell
                             let s:tex_nospell = 1
    1              0.000001 else
    1              0.000002  let s:tex_nospell = 0
    1              0.000001 endif
    1              0.000003 if exists("g:tex_matchcheck")
                             let s:tex_matchcheck= g:tex_matchcheck
    1              0.000001 else
    1              0.000003  let s:tex_matchcheck= '[({[]'
    1              0.000001 endif
    1              0.000004 if exists("g:tex_excludematcher")
                             let s:tex_excludematcher= g:tex_excludematcher
    1              0.000001 else
    1              0.000002  let s:tex_excludematcher= 0
    1              0.000001 endif
                            
                            " Clusters: {{{1
                            " --------
    1              0.000028 syn cluster texCmdGroup			contains=texCmdBody,texComment,texDefParm,texDelimiter,texDocType,texInput,texLength,texLigature,texMathDelim,texMathOper,texNewCmd,texNewEnv,texRefZone,texSection,texBeginEnd,texBeginEndName,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,@texMathZones
    1              0.000002 if !s:tex_no_error
    1              0.000007  syn cluster texCmdGroup		add=texMathError
    1              0.000001 endif
    1              0.000007 syn cluster texEnvGroup			contains=texDefParm,texMatcher,texMathDelim,texSpecialChar,texStatement
    1              0.000029 syn cluster texFoldGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texInputFile,texLength,texLigature,texMatcher,texMathZoneV,texMathZoneW,texMathZoneX,texMathZoneY,texMathZoneZ,texNewCmd,texNewEnv,texOnlyMath,texOption,texParen,texRefZone,texSection,texBeginEnd,texSectionZone,texSpaceCode,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone,@texMathZones,texTitle,texAbstract,texBoldStyle,texItalStyle,texEmphStyle,texNoSpell
    1              0.000022 syn cluster texBoldGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texInputFile,texLength,texLigature,texMathZoneV,texMathZoneW,texMathZoneX,texMathZoneY,texMathZoneZ,texNewCmd,texNewEnv,texOnlyMath,texOption,texParen,texRefZone,texSection,texBeginEnd,texSectionZone,texSpaceCode,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone,@texMathZones,texTitle,texAbstract,texBoldStyle,texBoldItalStyle,texNoSpell
    1              0.000019 syn cluster texItalGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texInputFile,texLength,texLigature,texMathZoneV,texMathZoneW,texMathZoneX,texMathZoneY,texMathZoneZ,texNewCmd,texNewEnv,texOnlyMath,texOption,texParen,texRefZone,texSection,texBeginEnd,texSectionZone,texSpaceCode,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone,@texMathZones,texTitle,texAbstract,texItalStyle,texEmphStyle,texItalBoldStyle,texNoSpell
    1              0.000002 if !s:tex_excludematcher
    1              0.000008  syn cluster texBoldGroup add=texMatcher
    1              0.000007  syn cluster texItalGroup add=texMatcher
    1              0.000001 endif
    1              0.000002 if !s:tex_nospell
    1              0.000003  if !s:tex_no_error
    1              0.000021   syn cluster texMatchGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texError,texInput,texLength,texLigature,texMatcher,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texBoldStyle,texBoldItalStyle,texItalStyle,texItalBoldStyle,texEmphStyle,texZone,texInputFile,texOption,@Spell
    1              0.000022   syn cluster texMatchNMGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texError,texInput,texLength,texLigature,texMatcherNM,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texBoldStyle,texBoldItalStyle,texItalStyle,texItalBoldStyle,texZone,texInputFile,texOption,@Spell
    1              0.000020   syn cluster texStyleGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texError,texInput,texLength,texLigature,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texBoldStyle,texBoldItalStyle,texItalStyle,texItalBoldStyle,texZone,texInputFile,texOption,texStyleStatement,texStyleMatcher,@Spell
                             else
                              syn cluster texMatchGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texLength,texLigature,texMatcher,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texBoldStyle,texBoldItalStyle,texItalStyle,texItalBoldStyle,texEmphStyle,texZone,texInputFile,texOption,@Spell
                              syn cluster texMatchNMGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texLength,texLigature,texMatcherNM,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texBoldStyle,texBoldItalStyle,texItalStyle,texItalBoldStyle,texZone,texInputFile,texOption,@Spell
                              syn cluster texStyleGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texLength,texLigature,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texBoldStyle,texBoldItalStyle,texItalStyle,texItalBoldStyle,texZone,texInputFile,texOption,texStyleStatement,texStyleMatcher,@Spell
    1              0.000001  endif
                            else
                             if !s:tex_no_error
                              syn cluster texMatchGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texError,texInput,texLength,texLigature,texMatcher,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone,texInputFile,texOption
                              syn cluster texMatchNMGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texError,texInput,texLength,texLigature,texMatcherNM,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone,texInputFile,texOption
                              syn cluster texStyleGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texError,texInput,texLength,texLigature,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone,texInputFile,texOption,texStyleStatement,texStyleMatcher
                             else
                              syn cluster texMatchGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texLength,texLigature,texMatcher,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone,texInputFile,texOption
                              syn cluster texMatchNMGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texLength,texLigature,texMatcherNM,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone,texInputFile,texOption
                              syn cluster texStyleGroup		contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texLength,texLigature,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone,texInputFile,texOption,texStyleStatement,texStyleMatcher
                             endif
    1              0.000001 endif
    1              0.000015 syn cluster texPreambleMatchGroup	contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texLength,texLigature,texMatcherNM,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTitle,texTypeSize,texTypeStyle,texZone,texInputFile,texOption,texMathZoneZ
    1              0.000006 syn cluster texRefGroup			contains=texMatcher,texComment,texDelimiter
    1              0.000005 if !exists("g:tex_no_math")
    1              0.000016  syn cluster texPreambleMatchGroup	contains=texAccent,texBadMath,texComment,texDefCmd,texDelimiter,texDocType,texInput,texLength,texLigature,texMatcherNM,texNewCmd,texNewEnv,texOnlyMath,texParen,texRefZone,texSection,texSpecialChar,texStatement,texString,texTitle,texTypeSize,texTypeStyle,texZone,texInputFile,texOption,texMathZoneZ
    1              0.000005  syn cluster texMathZones		contains=texMathZoneV,texMathZoneW,texMathZoneX,texMathZoneY,texMathZoneZ
    1              0.000008  syn cluster texMatchGroup		add=@texMathZones
    1              0.000008  syn cluster texMathDelimGroup		contains=texMathDelimBad,texMathDelimKey,texMathDelimSet1,texMathDelimSet2
    1              0.000016  syn cluster texMathMatchGroup		contains=@texMathZones,texComment,texDefCmd,texDelimiter,texDocType,texInput,texLength,texLigature,texMathDelim,texMathMatcher,texMathOper,texNewCmd,texNewEnv,texRefZone,texSection,texSpecialChar,texStatement,texString,texTypeSize,texTypeStyle,texZone
    1              0.000011  syn cluster texMathZoneGroup		contains=texBadPar,texComment,texDelimiter,texLength,texMathDelim,texMathMatcher,texMathOper,texMathSymbol,texMathText,texRefZone,texSpecialChar,texStatement,texTypeSize,texTypeStyle
    1              0.000002  if !s:tex_no_error
    1              0.000006   syn cluster texMathMatchGroup		add=texMathError
    1              0.000004   syn cluster texMathZoneGroup		add=texMathError
    1              0.000001  endif
    1              0.000006  syn cluster texMathZoneGroup		add=@NoSpell
                             " following used in the \part \chapter \section \subsection \subsubsection
                             " \paragraph \subparagraph \author \title highlighting
    1              0.000007  syn cluster texDocGroup		contains=texPartZone,@texPartGroup
    1              0.000005  syn cluster texPartGroup		contains=texChapterZone,texSectionZone,texParaZone
    1              0.000005  syn cluster texChapterGroup		contains=texSectionZone,texParaZone
    1              0.000004  syn cluster texSectionGroup		contains=texSubSectionZone,texParaZone
    1              0.000005  syn cluster texSubSectionGroup		contains=texSubSubSectionZone,texParaZone
    1              0.000003  syn cluster texSubSubSectionGroup	contains=texParaZone
    1              0.000004  syn cluster texParaGroup		contains=texSubParaZone
    1              0.000008  if has("conceal") && &enc == 'utf-8'
    1              0.000007   syn cluster texMathZoneGroup		add=texGreek,texSuperscript,texSubscript,texMathSymbol
    1              0.000006   syn cluster texMathMatchGroup		add=texGreek,texSuperscript,texSubscript,texMathSymbol
    1              0.000001  endif
    1              0.000001 endif
                            
                            " Try to flag {}, [], and () mismatches: {{{1
    1              0.000012 if s:tex_fast =~# 'm'
    1              0.000002   if !s:tex_no_error
    1              0.000006    if s:tex_matchcheck =~ '{'
    1              0.000020     syn region texMatcher	matchgroup=texDelimiter start="{" skip="\\\\\|\\[{}]"	end="}"			transparent contains=@texMatchGroup,texError
    1              0.000014     syn region texMatcherNM	matchgroup=texDelimiter start="{" skip="\\\\\|\\[{}]"	end="}"			transparent contains=@texMatchNMGroup,texError
    1              0.000001    endif
    1              0.000006    if s:tex_matchcheck =~ '\['
    1              0.000012     syn region texMatcher	matchgroup=texDelimiter start="\["				end="]"			transparent contains=@texMatchGroup,texError,@NoSpell
    1              0.000009     syn region texMatcherNM	matchgroup=texDelimiter start="\["				end="]"			transparent contains=@texMatchNMGroup,texError,@NoSpell
    1              0.000001    endif
                              else
                               if s:tex_matchcheck =~ '{'
                                syn region texMatcher	matchgroup=texDelimiter start="{" skip="\\\\\|\\[{}]"	end="}"			transparent contains=@texMatchGroup
                                syn region texMatcherNM	matchgroup=texDelimiter start="{" skip="\\\\\|\\[{}]"	end="}"			transparent contains=@texMatchNMGroup
                               endif
                               if s:tex_matchcheck =~ '\['
                                syn region texMatcher	matchgroup=texDelimiter start="\["				end="]"			transparent contains=@texMatchGroup
                                syn region texMatcherNM	matchgroup=texDelimiter start="\["				end="]"			transparent contains=@texMatchNMGroup
                               endif
    1              0.000001   endif
    1              0.000004   if s:tex_matchcheck =~ '('
    1              0.000002    if !s:tex_nospell
    1              0.000010     syn region texParen		start="("	end=")"								transparent contains=@texMatchGroup,@Spell
                               else
                                syn region texParen		start="("	end=")"								transparent contains=@texMatchGroup
    1              0.000001    endif
    1              0.000001   endif
    1              0.000001 endif
    1              0.000002 if !s:tex_no_error
    1              0.000004  if s:tex_matchcheck =~ '('
    1              0.000006   syn match  texError		"[}\]]"
                             else
                              syn match  texError		"[}\])]"
    1              0.000001  endif
    1              0.000001 endif
    1              0.000004 if s:tex_fast =~# 'M'
    1              0.000004   if !exists("g:tex_no_math")
    1              0.000002    if !s:tex_no_error
    1              0.000004     syn match  texMathError	"}"	contained
    1              0.000001    endif
    1              0.000034    syn region texMathMatcher	matchgroup=texDelimiter	start="{"          skip="\%(\\\\\)*\\}"     end="}" end="%stopzone\>"	contained contains=@texMathMatchGroup
    1              0.000003   endif
    1              0.000001 endif
                            
                            " TeX/LaTeX keywords: {{{1
                            " Instead of trying to be All Knowing, I just match \..alphameric..
                            " Note that *.tex files may not have "@" in their \commands
    1              0.000005 if exists("g:tex_tex") || b:tex_stylish
                              syn match texStatement	"\\[a-zA-Z@]\+"
    1              0.000001 else
    1              0.000006   syn match texStatement	"\\\a\+"
    1              0.000002   if !s:tex_no_error
    1              0.000006    syn match texError		"\\\a*@[a-zA-Z@]*"
    1              0.000001   endif
    1              0.000002 endif
                            
                            " TeX/LaTeX delimiters: {{{1
    1              0.000005 syn match texDelimiter		"&"
    1              0.000005 syn match texDelimiter		"\\\\"
                            
                            " Tex/Latex Options: {{{1
    1              0.000008 syn match texOption		"[^\\]\zs#[1-9]\|^#[1-9]"
                            
                            " texAccent (tnx to Karim Belabas) avoids annoying highlighting for accents: {{{1
    1              0.000002 if b:tex_stylish
                              syn match texAccent		"\\[bcdvuH][^a-zA-Z@]"me=e-1
                              syn match texLigature		"\\\([ijolL]\|ae\|oe\|ss\|AA\|AE\|OE\)[^a-zA-Z@]"me=e-1
    1              0.000001 else
    1              0.000006   syn match texAccent		"\\[bcdvuH]\A"me=e-1
    1              0.000008   syn match texLigature		"\\\([ijolL]\|ae\|oe\|ss\|AA\|AE\|OE\)\A"me=e-1
    1              0.000001 endif
    1              0.000006 syn match texAccent		"\\[bcdvuH]$"
    1              0.000006 syn match texAccent		+\\[=^.\~"`']+
    1              0.000007 syn match texAccent		+\\['=t'.c^ud"vb~Hr]{\a}+
    1              0.000007 syn match texLigature		"\\\([ijolL]\|ae\|oe\|ss\|AA\|AE\|OE\)$"
                            
                            
                            " \begin{}/\end{} section markers: {{{1
    1              0.000009 syn match  texBeginEnd		"\\begin\>\|\\end\>" nextgroup=texBeginEndName
    1              0.000006 if s:tex_fast =~# 'm'
    1              0.000010   syn region texBeginEndName		matchgroup=texDelimiter	start="{"		end="}"	contained	nextgroup=texBeginEndModifier	contains=texComment
    1              0.000010   syn region texBeginEndModifier	matchgroup=texDelimiter	start="\["		end="]"	contained	contains=texComment,@texMathZones,@NoSpell
    1              0.000001 endif
                            
                            " \documentclass, \documentstyle, \usepackage: {{{1
    1              0.000012 syn match  texDocType		"\\documentclass\>\|\\documentstyle\>\|\\usepackage\>"	nextgroup=texBeginEndName,texDocTypeArgs
    1              0.000005 if s:tex_fast =~# 'm'
    1              0.000011   syn region texDocTypeArgs	matchgroup=texDelimiter start="\[" end="]"			contained	nextgroup=texBeginEndName	contains=texComment,@NoSpell
    1              0.000001 endif
                            
                            " Preamble syntax-based folding support: {{{1
    1              0.000004 if s:tex_fold_enabled && has("folding")
                             syn region texPreamble	transparent fold	start='\zs\\documentclass\>' end='\ze\\begin{document}'	contains=texStyle,@texPreambleMatchGroup
    1              0.000001 endif
                            
                            " TeX input: {{{1
    1              0.000012 syn match texInput		"\\input\s\+[a-zA-Z/.0-9_^]\+"hs=s+7				contains=texStatement
    1              0.000016 syn match texInputFile		"\\include\(graphics\|list\)\=\(\[.\{-}\]\)\=\s*{.\{-}}"	contains=texStatement,texInputCurlies,texInputFileOpt
    1              0.000013 syn match texInputFile		"\\\(epsfig\|input\|usepackage\)\s*\(\[.*\]\)\={.\{-}}"		contains=texStatement,texInputCurlies,texInputFileOpt
    1              0.000005 syn match texInputCurlies	"[{}]"								contained
    1              0.000006 if s:tex_fast =~# 'm'
    1              0.000008  syn region texInputFileOpt	matchgroup=texDelimiter start="\[" end="\]"			contained	contains=texComment
    1              0.000001 endif
                            
                            " Type Styles (LaTeX 2.09): {{{1
    1              0.000005 syn match texTypeStyle		"\\rm\>"
    1              0.000005 syn match texTypeStyle		"\\em\>"
    1              0.000004 syn match texTypeStyle		"\\bf\>"
    1              0.000004 syn match texTypeStyle		"\\it\>"
    1              0.000004 syn match texTypeStyle		"\\sl\>"
    1              0.000004 syn match texTypeStyle		"\\sf\>"
    1              0.000004 syn match texTypeStyle		"\\sc\>"
    1              0.000004 syn match texTypeStyle		"\\tt\>"
                            
                            " Type Styles: attributes, commands, families, etc (LaTeX2E): {{{1
    1              0.000005 if s:tex_conceal !~# 'b'
                             syn match texTypeStyle		"\\textbf\>"
                             syn match texTypeStyle		"\\textit\>"
                             syn match texTypeStyle		"\\emph\>"
    1              0.000001 endif
    1              0.000004 syn match texTypeStyle		"\\textmd\>"
    1              0.000005 syn match texTypeStyle		"\\textrm\>"
                            
    1              0.000004 syn match texTypeStyle		"\\mathbf\>"
    1              0.000005 syn match texTypeStyle		"\\mathcal\>"
    1              0.000004 syn match texTypeStyle		"\\mathit\>"
    1              0.000005 syn match texTypeStyle		"\\mathnormal\>"
    1              0.000004 syn match texTypeStyle		"\\mathrm\>"
    1              0.000004 syn match texTypeStyle		"\\mathsf\>"
    1              0.000004 syn match texTypeStyle		"\\mathtt\>"
                            
    1              0.000005 syn match texTypeStyle		"\\rmfamily\>"
    1              0.000005 syn match texTypeStyle		"\\sffamily\>"
    1              0.000005 syn match texTypeStyle		"\\ttfamily\>"
                            
    1              0.000005 syn match texTypeStyle		"\\itshape\>"
    1              0.000005 syn match texTypeStyle		"\\scshape\>"
    1              0.000005 syn match texTypeStyle		"\\slshape\>"
    1              0.000008 syn match texTypeStyle		"\\upshape\>"
                            
    1              0.000005 syn match texTypeStyle		"\\bfseries\>"
    1              0.000005 syn match texTypeStyle		"\\mdseries\>"
                            
                            " Some type sizes: {{{1
    1              0.000004 syn match texTypeSize		"\\tiny\>"
    1              0.000005 syn match texTypeSize		"\\scriptsize\>"
    1              0.000006 syn match texTypeSize		"\\footnotesize\>"
    1              0.000005 syn match texTypeSize		"\\small\>"
    1              0.000005 syn match texTypeSize		"\\normalsize\>"
    1              0.000004 syn match texTypeSize		"\\large\>"
    1              0.000005 syn match texTypeSize		"\\Large\>"
    1              0.000005 syn match texTypeSize		"\\LARGE\>"
    1              0.000005 syn match texTypeSize		"\\huge\>"
    1              0.000005 syn match texTypeSize		"\\Huge\>"
                            
                            " Spacecodes (TeX'isms): {{{1
                            " \mathcode`\^^@="2201  \delcode`\(="028300  \sfcode`\)=0 \uccode`X=`X  \lccode`x=`x
    1              0.000014 syn match texSpaceCode		"\\\(math\|cat\|del\|lc\|sf\|uc\)code`"me=e-1 nextgroup=texSpaceCodeChar
    1              0.000010 syn match texSpaceCodeChar    "`\\\=.\(\^.\)\==\(\d\|\"\x\{1,6}\|`.\)"	contained
                            
                            " Sections, subsections, etc: {{{1
    1              0.000017 if s:tex_fast =~# 'p'
    1              0.000002  if !s:tex_nospell
    1              0.000032   TexFold syn region texDocZone			matchgroup=texSection start='\\begin\s*{\s*document\s*}' end='\\end\s*{\s*document\s*}'											contains=@texFoldGroup,@texDocGroup,@Spell
    1              0.000023   TexFold syn region texPartZone		matchgroup=texSection start='\\part\>'			 end='\ze\s*\\\%(part\>\|end\s*{\s*document\s*}\)'								contains=@texFoldGroup,@texPartGroup,@Spell
    1              0.000025   TexFold syn region texChapterZone		matchgroup=texSection start='\\chapter\>'		 end='\ze\s*\\\%(chapter\>\|part\>\|end\s*{\s*document\s*}\)'							contains=@texFoldGroup,@texChapterGroup,@Spell
    1              0.000025   TexFold syn region texSectionZone		matchgroup=texSection start='\\section\>'		 end='\ze\s*\\\%(section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'					contains=@texFoldGroup,@texSectionGroup,@Spell
    1              0.000025   TexFold syn region texSubSectionZone		matchgroup=texSection start='\\subsection\>'		 end='\ze\s*\\\%(\%(sub\)\=section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'				contains=@texFoldGroup,@texSubSectionGroup,@Spell
    1              0.000030   TexFold syn region texSubSubSectionZone	matchgroup=texSection start='\\subsubsection\>'		 end='\ze\s*\\\%(\%(sub\)\{,2}section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'				contains=@texFoldGroup,@texSubSubSectionGroup,@Spell
    1              0.000029   TexFold syn region texParaZone		matchgroup=texSection start='\\paragraph\>'		 end='\ze\s*\\\%(paragraph\>\|\%(sub\)*section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'			contains=@texFoldGroup,@texParaGroup,@Spell
    1              0.000023   TexFold syn region texSubParaZone		matchgroup=texSection start='\\subparagraph\>'		 end='\ze\s*\\\%(\%(sub\)\=paragraph\>\|\%(sub\)*section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'	contains=@texFoldGroup,@Spell
    1              0.000020   TexFold syn region texTitle			matchgroup=texSection start='\\\%(author\|title\)\>\s*{' end='}'													contains=@texFoldGroup,@Spell
    1              0.000018   TexFold syn region texAbstract		matchgroup=texSection start='\\begin\s*{\s*abstract\s*}' end='\\end\s*{\s*abstract\s*}'											contains=@texFoldGroup,@Spell
                             else
                              TexFold syn region texDocZone			matchgroup=texSection start='\\begin\s*{\s*document\s*}' end='\\end\s*{\s*document\s*}'											contains=@texFoldGroup,@texDocGroup
                              TexFold syn region texPartZone		matchgroup=texSection start='\\part\>'			 end='\ze\s*\\\%(part\>\|end\s*{\s*document\s*}\)'								contains=@texFoldGroup,@texPartGroup
                              TexFold syn region texChapterZone		matchgroup=texSection start='\\chapter\>'		 end='\ze\s*\\\%(chapter\>\|part\>\|end\s*{\s*document\s*}\)'							contains=@texFoldGroup,@texChapterGroup
                              TexFold syn region texSectionZone		matchgroup=texSection start='\\section\>'		 end='\ze\s*\\\%(section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'					contains=@texFoldGroup,@texSectionGroup
                              TexFold syn region texSubSectionZone		matchgroup=texSection start='\\subsection\>'		 end='\ze\s*\\\%(\%(sub\)\=section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'				contains=@texFoldGroup,@texSubSectionGroup
                              TexFold syn region texSubSubSectionZone	matchgroup=texSection start='\\subsubsection\>'		 end='\ze\s*\\\%(\%(sub\)\{,2}section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'				contains=@texFoldGroup,@texSubSubSectionGroup
                              TexFold syn region texParaZone		matchgroup=texSection start='\\paragraph\>'		 end='\ze\s*\\\%(paragraph\>\|\%(sub\)*section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'			contains=@texFoldGroup,@texParaGroup
                              TexFold syn region texSubParaZone		matchgroup=texSection start='\\subparagraph\>'		 end='\ze\s*\\\%(\%(sub\)\=paragraph\>\|\%(sub\)*section\>\|chapter\>\|part\>\|end\s*{\s*document\s*}\)'	contains=@texFoldGroup
                              TexFold syn region texTitle			matchgroup=texSection start='\\\%(author\|title\)\>\s*{' end='}'													contains=@texFoldGroup
                              TexFold syn region texAbstract		matchgroup=texSection start='\\begin\s*{\s*abstract\s*}' end='\\end\s*{\s*abstract\s*}'											contains=@texFoldGroup
    1              0.000001   endif
    1              0.000001 endif
                            
                            " particular support for bold and italic {{{1
    1              0.000006 if s:tex_fast =~# 'b'
    1              0.000030   if s:tex_conceal =~# 'b'
    1              0.000007    if !exists("g:tex_nospell") || !g:tex_nospell
    1              0.000015     syn region texBoldStyle	matchgroup=texTypeStyle start="\\textbf\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texBoldGroup,@Spell
    1              0.000015     syn region texBoldItalStyle	matchgroup=texTypeStyle start="\\textit\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texItalGroup,@Spell
    1              0.000014     syn region texItalStyle	matchgroup=texTypeStyle start="\\textit\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texItalGroup,@Spell
    1              0.000012     syn region texItalBoldStyle	matchgroup=texTypeStyle start="\\textbf\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texBoldGroup,@Spell
    1              0.000223     syn region texEmphStyle	matchgroup=texTypeStyle start="\\emph\s*{"   matchgroup=texTypeStyle  end="}" concealends contains=@texItalGroup,@Spell
    1              0.000043     syn region texEmphStyle	matchgroup=texTypeStyle start="\\texts[cfl]\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texBoldGroup,@Spell
    1              0.000014     syn region texEmphStyle	matchgroup=texTypeStyle start="\\textup\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texBoldGroup,@Spell
    1              0.000011     syn region texEmphStyle	matchgroup=texTypeStyle start="\\texttt\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texBoldGroup,@Spell
                               else
                                syn region texBoldStyle	matchgroup=texTypeStyle start="\\textbf\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texBoldGroup
                                syn region texBoldItalStyle	matchgroup=texTypeStyle start="\\textit\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texItalGroup
                                syn region texItalStyle	matchgroup=texTypeStyle start="\\textit\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texItalGroup
                                syn region texItalBoldStyle	matchgroup=texTypeStyle start="\\textbf\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texBoldGroup
                                syn region texEmphStyle	matchgroup=texTypeStyle start="\\emph\s*{"   matchgroup=texTypeStyle  end="}" concealends contains=@texItalGroup
                                syn region texEmphStyle	matchgroup=texTypeStyle start="\\texts[cfl]\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texEmphGroup
                                syn region texEmphStyle	matchgroup=texTypeStyle start="\\textup\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texEmphGroup
                                syn region texEmphStyle	matchgroup=texTypeStyle start="\\texttt\s*{" matchgroup=texTypeStyle  end="}" concealends contains=@texEmphGroup
    1              0.000001    endif
    1              0.000001   endif
    1              0.000001 endif
                            
                            " Bad Math (mismatched): {{{1
    1              0.000010 if !exists("g:tex_no_math") && !s:tex_no_error
    1              0.000015  syn match texBadMath		"\\end\s*{\s*\(array\|[bBpvV]matrix\|split\|smallmatrix\)\s*}"
    1              0.000013  syn match texBadMath		"\\end\s*{\s*\(displaymath\|equation\|eqnarray\|math\)\*\=\s*}"
    1              0.000007  syn match texBadMath		"\\[\])]"
    1              0.000008  syn match texBadPar	contained  "\%(\\par\>\|^\s*\n.\)"
    1              0.000001 endif
                            
                            " Math Zones: {{{1
    1              0.000004 if !exists("g:tex_no_math")
                             " TexNewMathZone: function creates a mathzone with the given suffix and mathzone name. {{{2
                             "                 Starred forms are created if starform is true.  Starred
                             "                 forms have syntax group and synchronization groups with a
                             "                 "S" appended.  Handles: cluster, syntax, sync, and highlighting.
    1              0.000008  fun! TexNewMathZone(sfx,mathzone,starform)
                               let grpname  = "texMathZone".a:sfx
                               let syncname = "texSyncMathZone".a:sfx
                               if s:tex_fold_enabled
                                let foldcmd= " fold"
                               else
                                let foldcmd= ""
                               endif
                               exe "syn cluster texMathZones add=".grpname
                               if s:tex_fast =~# 'M'
                                exe 'syn region '.grpname.' start='."'".'\\begin\s*{\s*'.a:mathzone.'\s*}'."'".' end='."'".'\\end\s*{\s*'.a:mathzone.'\s*}'."'".' keepend contains=@texMathZoneGroup'.foldcmd
                                exe 'syn sync match '.syncname.' grouphere '.grpname.' "\\begin\s*{\s*'.a:mathzone.'\*\s*}"'
                                exe 'syn sync match '.syncname.' grouphere '.grpname.' "\\begin\s*{\s*'.a:mathzone.'\*\s*}"'
                               endif
                               exe 'hi def link '.grpname.' texMath'
                               if a:starform
                                let grpname  = "texMathZone".a:sfx.'S'
                                let syncname = "texSyncMathZone".a:sfx.'S'
                                exe "syn cluster texMathZones add=".grpname
                                if s:tex_fast =~# 'M'
                                 exe 'syn region '.grpname.' start='."'".'\\begin\s*{\s*'.a:mathzone.'\*\s*}'."'".' end='."'".'\\end\s*{\s*'.a:mathzone.'\*\s*}'."'".' keepend contains=@texMathZoneGroup'.foldcmd
                                 exe 'syn sync match '.syncname.' grouphere '.grpname.' "\\begin\s*{\s*'.a:mathzone.'\*\s*}"'
                                 exe 'syn sync match '.syncname.' grouphere '.grpname.' "\\begin\s*{\s*'.a:mathzone.'\*\s*}"'
                                endif
                                exe 'hi def link '.grpname.' texMath'
                               endif
                             endfun
                            
                             " Standard Math Zones: {{{2
    1   0.000233   0.000024  call TexNewMathZone("A","displaymath",1)
    1   0.000180   0.000013  call TexNewMathZone("B","eqnarray",1)
    1   0.000174   0.000010  call TexNewMathZone("C","equation",1)
    1   0.000238   0.000021  call TexNewMathZone("D","math",1)
                            
                             " Inline Math Zones: {{{2
    1              0.000005  if s:tex_fast =~# 'M'
    1              0.000013   if has("conceal") && &enc == 'utf-8' && s:tex_conceal =~# 'd'
    1              0.000022    syn region texMathZoneV	matchgroup=texDelimiter start="\\("			matchgroup=texDelimiter	end="\\)\|%stopzone\>"			keepend concealends contains=@texMathZoneGroup
    1              0.000020    syn region texMathZoneW	matchgroup=texDelimiter start="\\\["			matchgroup=texDelimiter	end="\\]\|%stopzone\>"			keepend concealends contains=@texMathZoneGroup
    1              0.000027    syn region texMathZoneX	matchgroup=texDelimiter start="\$" skip="\\\\\|\\\$"	matchgroup=texDelimiter	end="\$"	end="%stopzone\>"		concealends contains=@texMathZoneGroup
    1              0.000021    syn region texMathZoneY	matchgroup=texDelimiter start="\$\$" 			matchgroup=texDelimiter	end="\$\$"	end="%stopzone\>"	keepend concealends contains=@texMathZoneGroup
                              else
                               syn region texMathZoneV	matchgroup=texDelimiter start="\\("			matchgroup=texDelimiter	end="\\)\|%stopzone\>"			keepend contains=@texMathZoneGroup
                               syn region texMathZoneW	matchgroup=texDelimiter start="\\\["			matchgroup=texDelimiter	end="\\]\|%stopzone\>"			keepend contains=@texMathZoneGroup
                               syn region texMathZoneX	matchgroup=texDelimiter start="\$" skip="\%(\\\\\)*\\\$"	matchgroup=texDelimiter	end="\$"	end="%stopzone\>"		contains=@texMathZoneGroup
                               syn region texMathZoneY	matchgroup=texDelimiter start="\$\$" 			matchgroup=texDelimiter	end="\$\$"	end="%stopzone\>"	keepend	contains=@texMathZoneGroup
    1              0.000001   endif
    1              0.000020   syn region texMathZoneZ	matchgroup=texStatement start="\\ensuremath\s*{"	matchgroup=texStatement	end="}"		end="%stopzone\>"	contains=@texMathZoneGroup
    1              0.000001  endif
                            
    1              0.000006  syn match texMathOper		"[_^=]" contained
                            
                             " Text Inside Math Zones: {{{2
    1              0.000006  if s:tex_fast =~# 'M'
    1              0.000007   if !exists("g:tex_nospell") || !g:tex_nospell
    1              0.000018    syn region texMathText matchgroup=texStatement start='\\\(\(inter\)\=text\|mbox\)\s*{'	end='}'	contains=@texFoldGroup,@Spell
                              else
                               syn region texMathText matchgroup=texStatement start='\\\(\(inter\)\=text\|mbox\)\s*{'	end='}'	contains=@texFoldGroup
    1              0.000001   endif
    1              0.000001  endif
                            
                             " \left..something.. and \right..something.. support: {{{2
    1              0.000005  syn match   texMathDelimBad	contained		"\S"
    1              0.000009  if has("conceal") && &enc == 'utf-8' && s:tex_conceal =~# 'm'
    1              0.000005   syn match   texMathDelim	contained		"\\left\["
    1              0.000010   syn match   texMathDelim	contained		"\\left\\{"	skipwhite nextgroup=texMathDelimSet1,texMathDelimSet2,texMathDelimBad contains=texMathSymbol cchar={
    1              0.000009   syn match   texMathDelim	contained		"\\right\\}"	skipwhite nextgroup=texMathDelimSet1,texMathDelimSet2,texMathDelimBad contains=texMathSymbol cchar=}
    1              0.000057   let s:texMathDelimList=[
                                 \ ['<'            , '<'] ,
                                 \ ['>'            , '>'] ,
                                 \ ['('            , '('] ,
                                 \ [')'            , ')'] ,
                                 \ ['\['           , '['] ,
                                 \ [']'            , ']'] ,
                                 \ ['\\{'          , '{'] ,
                                 \ ['\\}'          , '}'] ,
                                 \ ['|'            , '|'] ,
                                 \ ['\\|'          , '‚Äñ'] ,
                                 \ ['\\backslash'  , '\'] ,
                                 \ ['\\downarrow'  , '‚Üì'] ,
                                 \ ['\\Downarrow'  , '‚áì'] ,
                                 \ ['\\lbrace'     , '['] ,
                                 \ ['\\lceil'      , '‚åà'] ,
                                 \ ['\\lfloor'     , '‚åä'] ,
                                 \ ['\\lgroup'     , '‚åä'] ,
                                 \ ['\\lmoustache' , '‚éõ'] ,
                                 \ ['\\rbrace'     , ']'] ,
                                 \ ['\\rceil'      , '‚åâ'] ,
                                 \ ['\\rfloor'     , '‚åã'] ,
                                 \ ['\\rgroup'     , '‚åã'] ,
                                 \ ['\\rmoustache' , '‚éû'] ,
                                 \ ['\\uparrow'    , '‚Üë'] ,
                                 \ ['\\Uparrow'    , '‚Üë'] ,
                                 \ ['\\updownarrow', '‚Üï'] ,
                                 \ ['\\Updownarrow', '‚áï']]
    1              0.000008   if &ambw == "double" || exists("g:tex_usedblwidth")
                                let s:texMathDelimList= s:texMathDelimList + [
                                 \ ['\\langle'     , '„Äà'] ,
                                 \ ['\\rangle'     , '„Äâ']]
    1              0.000001   else
    1              0.000013     let s:texMathDelimList= s:texMathDelimList + [
                                 \ ['\\langle'     , '<'] ,
                                 \ ['\\rangle'     , '>']]
    1              0.000002   endif
    1              0.000013   syn match texMathDelim	'\\[bB]igg\=[lr]' contained nextgroup=texMathDelimBad
   30              0.000102   for texmath in s:texMathDelimList
   29              0.000349    exe "syn match texMathDelim	'\\\\[bB]igg\\=[lr]\\=".texmath[0]."'	contained conceal cchar=".texmath[1]
   30              0.000027   endfor
                            
                             else
                              syn match   texMathDelim	contained		"\\\(left\|right\)\>"	skipwhite nextgroup=texMathDelimSet1,texMathDelimSet2,texMathDelimBad
                              syn match   texMathDelim	contained		"\\[bB]igg\=[lr]\=\>"	skipwhite nextgroup=texMathDelimSet1,texMathDelimSet2,texMathDelimBad
                              syn match   texMathDelimSet2	contained	"\\"		nextgroup=texMathDelimKey,texMathDelimBad
                              syn match   texMathDelimSet1	contained	"[<>()[\]|/.]\|\\[{}|]"
                              syn keyword texMathDelimKey	contained	backslash       lceil           lVert           rgroup          uparrow
                              syn keyword texMathDelimKey	contained	downarrow       lfloor          rangle          rmoustache      Uparrow
                              syn keyword texMathDelimKey	contained	Downarrow       lgroup          rbrace          rvert           updownarrow
                              syn keyword texMathDelimKey	contained	langle          lmoustache      rceil           rVert           Updownarrow
                              syn keyword texMathDelimKey	contained	lbrace          lvert           rfloor
    1              0.000001  endif
    1              0.000014  syn match   texMathDelim	contained		"\\\(left\|right\)arrow\>\|\<\([aA]rrow\|brace\)\=vert\>"
    1              0.000009  syn match   texMathDelim	contained		"\\lefteqn\>"
    1              0.000001 endif
                            
                            " Special TeX characters  ( \$ \& \% \# \{ \} \_ \S \P ) : {{{1
    1              0.000010 syn match texSpecialChar	"\\[$&%#{}_]"
    1              0.000003 if b:tex_stylish
                              syn match texSpecialChar	"\\[SP@][^a-zA-Z@]"me=e-1
    1              0.000001 else
    1              0.000008   syn match texSpecialChar	"\\[SP@]\A"me=e-1
    1              0.000001 endif
    1              0.000008 syn match texSpecialChar	"\\\\"
    1              0.000005 if !exists("g:tex_no_math")
    1              0.000008  syn match texOnlyMath		"[_^]"
    1              0.000001 endif
    1              0.000012 syn match texSpecialChar	"\^\^[0-9a-f]\{2}\|\^\^\S"
    1              0.000007 if s:tex_conceal !~# 'S'
                             syn match texSpecialChar	'\\glq\>'	contained conceal cchar=‚Äö
                             syn match texSpecialChar	'\\grq\>'	contained conceal cchar=‚Äò
                             syn match texSpecialChar	'\\glqq\>'	contained conceal cchar=‚Äû
                             syn match texSpecialChar	'\\grqq\>'	contained conceal cchar=‚Äú
                             syn match texSpecialChar	'\\hyp\>'	contained conceal cchar=-
    1              0.000001 endif
                            
                            " Comments: {{{1
                            "    Normal TeX LaTeX     :   %....
                            "    Documented TeX Format:  ^^A...	-and-	leading %s (only)
    1              0.000002 if !s:tex_comment_nospell
    1              0.000009  syn cluster texCommentGroup	contains=texTodo,@Spell
                            else
                             syn cluster texCommentGroup	contains=texTodo,@NoSpell
    1              0.000001 endif
    1              0.000002 syn case ignore
    1              0.000007 syn keyword texTodo		contained		combak	fixme	todo	xxx
    1              0.000001 syn case match
    1              0.000003 if s:extfname == "dtx"
                             syn match texComment		"\^\^A.*$"	contains=@texCommentGroup
                             syn match texComment		"^%\+"		contains=@texCommentGroup
    1              0.000001 else
    1              0.000002  if s:tex_fold_enabled
                              " allows syntax-folding of 2 or more contiguous comment lines
                              " single-line comments are not folded
                              syn match  texComment	"%.*$"				contains=@texCommentGroup
                              if s:tex_fast =~# 'c'
                               TexFold syn region texComment						start="^\zs\s*%.*\_s*%"	skip="^\s*%"	end='^\ze\s*[^%]'	contains=@texCommentGroup
                               TexFold syn region texNoSpell	contained	matchgroup=texComment	start="%\s*nospell\s*{"	end="%\s*nospell\s*}"			contains=@texFoldGroup,@NoSpell
                              endif
    1              0.000001  else
    1              0.000011   syn match texComment		"%.*$"			contains=@texCommentGroup
    1              0.000005   if s:tex_fast =~# 'c'
    1              0.000016    syn region texNoSpell		contained	matchgroup=texComment start="%\s*nospell\s*{"	end="%\s*nospell\s*}"	contains=@texFoldGroup,@NoSpell
    1              0.000001   endif
    1              0.000001  endif
    1              0.000001 endif
                            
                            " %begin-include ... %end-include acts like a texDocZone for \include'd files.  Permits spell checking, for example, in such files.
    1              0.000002 if !s:tex_nospell
    1              0.000025  TexFold syn region texDocZone			matchgroup=texSection start='^\s*%begin-include\>'	 end='^\s*%end-include\>'											contains=@texFoldGroup,@texDocGroup,@Spell
                            else
                             TexFold syn region texDocZone			matchgroup=texSection start='^\s*%begin-include\>'	 end='^\s*%end-include\>'											contains=@texFoldGroup,@texDocGroup
    1              0.000001 endif
                            
                            " Separate lines used for verb` and verb# so that the end conditions {{{1
                            " will appropriately terminate.
                            " If g:tex_verbspell exists, then verbatim texZones will permit spellchecking there.
    1              0.000004 if s:tex_fast =~# 'v'
    1              0.000006   if exists("g:tex_verbspell") && g:tex_verbspell
                               syn region texZone		start="\\begin{[vV]erbatim}"		end="\\end{[vV]erbatim}\|%stopzone\>"	contains=@Spell
                               " listings package:
                               if b:tex_stylish
                                syn region texZone		start="\\verb\*\=\z([^\ta-zA-Z@]\)"	end="\z1\|%stopzone\>"			contains=@Spell
                               else
                                syn region texZone		start="\\verb\*\=\z([^\ta-zA-Z]\)"	end="\z1\|%stopzone\>"			contains=@Spell
                               endif
    1              0.000001   else
    1              0.000015    syn region texZone		start="\\begin{[vV]erbatim}"		end="\\end{[vV]erbatim}\|%stopzone\>"
    1              0.000003    if b:tex_stylish
                                 syn region texZone		start="\\verb\*\=\z([^\ta-zA-Z@]\)"	end="\z1\|%stopzone\>"
    1              0.000001    else
    1              0.000012      syn region texZone		start="\\verb\*\=\z([^\ta-zA-Z]\)"	end="\z1\|%stopzone\>"
    1              0.000001    endif
    1              0.000001   endif
    1              0.000001 endif
                            
                            " Tex Reference Zones: {{{1
    1              0.000004 if s:tex_fast =~# 'r'
    1              0.000015   syn region texZone		matchgroup=texStatement start="@samp{"			end="}\|%stopzone\>"	contains=@texRefGroup
    1              0.000014   syn region texRefZone		matchgroup=texStatement start="\\nocite{"		end="}\|%stopzone\>"	contains=@texRefGroup
    1              0.000018   syn region texRefZone		matchgroup=texStatement start="\\bibliography{"		end="}\|%stopzone\>"	contains=@texRefGroup
    1              0.000014   syn region texRefZone		matchgroup=texStatement start="\\label{"		end="}\|%stopzone\>"	contains=@texRefGroup
    1              0.000014   syn region texRefZone		matchgroup=texStatement start="\\\(page\|eq\)ref{"	end="}\|%stopzone\>"	contains=@texRefGroup
    1              0.000013   syn region texRefZone		matchgroup=texStatement start="\\v\=ref{"		end="}\|%stopzone\>"	contains=@texRefGroup
    1              0.000012   syn region texRefOption	contained	matchgroup=texDelimiter start='\[' end=']'		contains=@texRefGroup,texRefZone	nextgroup=texRefOption,texCite
    1              0.000010   syn region texCite		contained	matchgroup=texDelimiter start='{' end='}'		contains=@texRefGroup,texRefZone,texCite
    1              0.000001 endif
    1              0.000012 syn match  texRefZone		'\\cite\%([tp]\*\=\)\=\>' nextgroup=texRefOption,texCite
                            
                            " Handle (re)newcommand, providecommand, (re)newenvironment : {{{1
                            " EXAMPLE:
                            "
                            " The followings are valid (ignoring error due to redefinition):
                            "
                            " \newcommand{\foo}{body}
                            " \newcommand{\foo}[1]{#1}
                            " \newcommand{\foo}[1][def]{#1}
                            "
                            " The followings are ill-formed:
                            "
                            " \newcommand{\foo}{#1}		! Illegal parameter number in definition of \foo.
                            " \newcommand{\foo}[x]{‚Ä¶}	! Missing number, treated as zero.
                            " \newcommand{\foo}[10]{‚Ä¶}	! You already have nine parameters.
    1              0.000015 syn match  texNewCmd				"\\\%(\%(re\)\=new\|provide\)command\>\*\?"	nextgroup=texCmdName skipwhite skipnl
    1              0.000006 if s:tex_fast =~# 'V'
    1              0.000010   syn region texCmdName contained matchgroup=texDelimiter start="{"rs=s+1  end="}"		nextgroup=texCmdArgs,texCmdBody skipwhite skipnl
    1              0.000010   syn region texCmdArgs contained matchgroup=texDelimiter start="\["rs=s+1 end="]"		nextgroup=texCmdDefaultPar,texCmdBody skipwhite skipnl
    1              0.000008   syn region texCmdDefaultPar contained matchgroup=texDelimiter start="\["rs=s+1 end="]"	nextgroup=texCmdBody skipwhite skipnl
    1              0.000013   syn region texCmdBody contained matchgroup=texDelimiter start="{"rs=s+1 skip="\\\\\|\\[{}]"	matchgroup=texDelimiter end="}" contains=@texCmdGroup
    1              0.000001 endif
                            " EXAMPLE:
                            "
                            " The followings are valid (ignoring error due to redefinition):
                            "
                            " \newenvironment{baz}{beg}{end}
                            " \newenvironment{baz}[1]{beg #1}{end}
                            " \newenvironment{baz}[1][default]{beg #1}{end}
                            "
                            " The followings are invalid:
                            "
                            " \newenvironment{baz}{#1}{‚Ä¶}		! Illegal parameter number in definition of \baz.
                            " \newenvironment{baz}[x]{‚Ä¶}{‚Ä¶}		! Missing number, treated as zero.
                            " \newenvironment{baz}[10]{‚Ä¶}{‚Ä¶}	! You already have nine parameters.
                            " \newenvironment{baz}[1]{‚Ä¶}{#1}	! Illegal parameter number in definition of \endbaz.
    1              0.000015 syn match  texNewEnv				"\\\%(re\)\=newenvironment\>\*\?"		nextgroup=texEnvName skipwhite skipnl
    1              0.000005 if s:tex_fast =~# 'V'
    1              0.000009   syn region texEnvName contained matchgroup=texDelimiter start="{"rs=s+1  end="}"		nextgroup=texEnvArgs,texEnvBgn skipwhite skipnl
    1              0.000009   syn region texEnvArgs contained matchgroup=texDelimiter start="\["rs=s+1 end="]"		nextgroup=texEnvDefaultPar,texEnvBgn skipwhite skipnl
    1              0.000007   syn region texEnvDefaultPar contained matchgroup=texDelimiter start="\["rs=s+1 end="]"	nextgroup=texEnvBgn skipwhite skipnl
    1              0.000009   syn region texEnvBgn  contained matchgroup=texDelimiter start="{"rs=s+1  end="}"		nextgroup=texEnvEnd skipwhite skipnl contains=@texEnvGroup
    1              0.000009   syn region texEnvEnd  contained matchgroup=texDelimiter start="{"rs=s+1  end="}"		skipwhite skipnl contains=@texEnvGroup
    1              0.000001 endif
                            
                            " Definitions/Commands: {{{1
    1              0.000014 syn match texDefCmd				"\\def\>"				nextgroup=texDefName skipwhite skipnl
    1              0.000002 if b:tex_stylish
                              syn match texDefName contained		"\\[a-zA-Z@]\+"				nextgroup=texDefParms,texCmdBody skipwhite skipnl
                              syn match texDefName contained		"\\[^a-zA-Z@]"				nextgroup=texDefParms,texCmdBody skipwhite skipnl
    1              0.000001 else
    1              0.000005   syn match texDefName contained		"\\\a\+"				nextgroup=texDefParms,texCmdBody skipwhite skipnl
    1              0.000005   syn match texDefName contained		"\\\A"					nextgroup=texDefParms,texCmdBody skipwhite skipnl
    1              0.000001 endif
    1              0.000007 syn match texDefParms  contained		"#[^{]*"	contains=texDefParm	nextgroup=texCmdBody skipwhite skipnl
    1              0.000005 syn match  texDefParm  contained		"#[1-9]"
                            
                            " TeX Lengths: {{{1
    1              0.000021 syn match  texLength		"\<\d\+\([.,]\d\+\)\=\s*\(true\)\=\s*\(bp\|cc\|cm\|dd\|em\|ex\|in\|mm\|pc\|pt\|sp\)\>"
                            
                            " TeX String Delimiters: {{{1
    1              0.000010 syn match texString		"\(``\|''\|,,\)"
                            
                            " makeatletter -- makeatother sections
    1              0.000003 if !s:tex_no_error
    1              0.000006  if s:tex_fast =~# 'S'
    1              0.000012   syn region texStyle			matchgroup=texStatement start='\\makeatletter' end='\\makeatother'	contains=@texStyleGroup contained
    1              0.000002  endif
    1              0.000006  syn match  texStyleStatement		"\\[a-zA-Z@]\+"	contained
    1              0.000008  if s:tex_fast =~# 'S'
    1              0.000013   syn region texStyleMatcher		matchgroup=texDelimiter start="{" skip="\\\\\|\\[{}]"	end="}"		contains=@texStyleGroup,texError	contained
    1              0.000008   syn region texStyleMatcher		matchgroup=texDelimiter start="\["				end="]"		contains=@texStyleGroup,texError	contained
    1              0.000001  endif
    1              0.000001 endif
                            
                            " Conceal mode support (supports set cole=2) {{{1
    1              0.000008 if has("conceal") && &enc == 'utf-8'
                            
                             " Math Symbols {{{2
                             " (many of these symbols were contributed by Bj√∂rn Winckler)
    1              0.000004  if s:tex_conceal =~# 'm'
    1              0.000321   let s:texMathList=[
                                \ ['|'		, '‚Äñ'],
                                \ ['aleph'		, '‚Ñµ'],
                                \ ['amalg'		, '‚àê'],
                                \ ['angle'		, '‚à†'],
                                \ ['approx'		, '‚âà'],
                                \ ['ast'		, '‚àó'],
                                \ ['asymp'		, '‚âç'],
                                \ ['backslash'	, '‚àñ'],
                                \ ['bigcap'		, '‚à©'],
                                \ ['bigcirc'	, '‚óã'],
                                \ ['bigcup'		, '‚à™'],
                                \ ['bigodot'	, '‚äô'],
                                \ ['bigoplus'	, '‚äï'],
                                \ ['bigotimes'	, '‚äó'],
                                \ ['bigsqcup'	, '‚äî'],
                                \ ['bigtriangledown', '‚àá'],
                                \ ['bigtriangleup'	, '‚àÜ'],
                                \ ['bigvee'		, '‚ãÅ'],
                                \ ['bigwedge'	, '‚ãÄ'],
                                \ ['bot'		, '‚ä•'],
                                \ ['bowtie'	        , '‚ãà'],
                                \ ['bullet'	        , '‚Ä¢'],
                                \ ['cap'		, '‚à©'],
                                \ ['cdot'		, '¬∑'],
                                \ ['cdots'		, '‚ãØ'],
                                \ ['circ'		, '‚àò'],
                                \ ['clubsuit'	, '‚ô£'],
                                \ ['cong'		, '‚âÖ'],
                                \ ['coprod'		, '‚àê'],
                                \ ['copyright'	, '¬©'],
                                \ ['cup'		, '‚à™'],
                                \ ['dagger'	        , '‚Ä†'],
                                \ ['dashv'		, '‚ä£'],
                                \ ['ddagger'	, '‚Ä°'],
                                \ ['ddots'	        , '‚ã±'],
                                \ ['diamond'	, '‚ãÑ'],
                                \ ['diamondsuit'	, '‚ô¢'],
                                \ ['div'		, '√∑'],
                                \ ['doteq'		, '‚âê'],
                                \ ['dots'		, '‚Ä¶'],
                                \ ['downarrow'	, '‚Üì'],
                                \ ['Downarrow'	, '‚áì'],
                                \ ['ell'		, '‚Ñì'],
                                \ ['emptyset'	, '‚àÖ'],
                                \ ['equiv'		, '‚â°'],
                                \ ['exists'		, '‚àÉ'],
                                \ ['flat'		, '‚ô≠'],
                                \ ['forall'		, '‚àÄ'],
                                \ ['frown'		, '‚Åî'],
                                \ ['ge'		, '‚â•'],
                                \ ['geq'		, '‚â•'],
                                \ ['gets'		, '‚Üê'],
                                \ ['gg'		, '‚ü´'],
                                \ ['hbar'		, '‚Ñè'],
                                \ ['heartsuit'	, '‚ô°'],
                                \ ['hookleftarrow'	, '‚Ü©'],
                                \ ['hookrightarrow'	, '‚Ü™'],
                                \ ['iff'            , '‚áî'],
                                \ ['Im'		, '‚Ñë'],
                                \ ['imath'		, '…©'],
                                \ ['in'		, '‚àà'],
                                \ ['infty'		, '‚àû'],
                                \ ['int'		, '‚à´'],
                                \ ['jmath'		, 'ùö•'],
                                \ ['land'		, '‚àß'],
                                \ ['lceil'		, '‚åà'],
                                \ ['ldots'		, '‚Ä¶'],
                                \ ['le'		, '‚â§'],
                                \ ['left|'		, '|'],
                                \ ['left\\|'	, '‚Äñ'],
                                \ ['left('		, '('],
                                \ ['left\['		, '['],
                                \ ['left\\{'	, '{'],
                                \ ['leftarrow'	, '‚Üê'],
                                \ ['Leftarrow'	, '‚áê'],
                                \ ['leftharpoondown', '‚ÜΩ'],
                                \ ['leftharpoonup'	, '‚Üº'],
                                \ ['leftrightarrow'	, '‚Üî'],
                                \ ['Leftrightarrow'	, '‚áî'],
                                \ ['leq'		, '‚â§'],
                                \ ['leq'		, '‚â§'],
                                \ ['lfloor'		, '‚åä'],
                                \ ['ll'		, '‚â™'],
                                \ ['lmoustache'     , '‚ï≠'],
                                \ ['lor'		, '‚à®'],
                                \ ['mapsto'		, '‚Ü¶'],
                                \ ['mid'		, '‚à£'],
                                \ ['models'		, '‚ïû'],
                                \ ['mp'		, '‚àì'],
                                \ ['nabla'		, '‚àá'],
                                \ ['natural'	, '‚ôÆ'],
                                \ ['ne'		, '‚â†'],
                                \ ['nearrow'	, '‚Üó'],
                                \ ['neg'		, '¬¨'],
                                \ ['neq'		, '‚â†'],
                                \ ['ni'		, '‚àã'],
                                \ ['notin'		, '‚àâ'],
                                \ ['nwarrow'	, '‚Üñ'],
                                \ ['odot'		, '‚äô'],
                                \ ['oint'		, '‚àÆ'],
                                \ ['ominus'		, '‚äñ'],
                                \ ['oplus'		, '‚äï'],
                                \ ['oslash'		, '‚äò'],
                                \ ['otimes'		, '‚äó'],
                                \ ['owns'		, '‚àã'],
                                \ ['P'	        , '¬∂'],
                                \ ['parallel'	, '‚ïë'],
                                \ ['partial'	, '‚àÇ'],
                                \ ['perp'		, '‚ä•'],
                                \ ['pm'		, '¬±'],
                                \ ['prec'		, '‚â∫'],
                                \ ['preceq'		, '‚™Ø'],
                                \ ['prime'		, '‚Ä≤'],
                                \ ['prod'		, '‚àè'],
                                \ ['propto'		, '‚àù'],
                                \ ['rceil'		, '‚åâ'],
                                \ ['Re'		, '‚Ñú'],
                                \ ['quad'		, '‚ÄÄ'],
                                \ ['qquad'		, '‚ÄÅ'],
                                \ ['rfloor'		, '‚åã'],
                                \ ['right|'		, '|'],
                                \ ['right\\|'	, '‚Äñ'],
                                \ ['right)'		, ')'],
                                \ ['right]'		, ']'],
                                \ ['right\\}'	, '}'],
                                \ ['rightarrow'	, '‚Üí'],
                                \ ['Rightarrow'	, '‚áí'],
                                \ ['rightleftharpoons', '‚áå'],
                                \ ['rmoustache'     , '‚ïÆ'],
                                \ ['S'	        , '¬ß'],
                                \ ['searrow'	, '‚Üò'],
                                \ ['setminus'	, '‚àñ'],
                                \ ['sharp'		, '‚ôØ'],
                                \ ['sim'		, '‚àº'],
                                \ ['simeq'		, '‚ãç'],
                                \ ['smile'		, '‚Äø'],
                                \ ['spadesuit'	, '‚ô†'],
                                \ ['sqcap'		, '‚äì'],
                                \ ['sqcup'		, '‚äî'],
                                \ ['sqsubset'	, '‚äè'],
                                \ ['sqsubseteq'	, '‚äë'],
                                \ ['sqsupset'	, '‚äê'],
                                \ ['sqsupseteq'	, '‚äí'],
                                \ ['star'		, '‚ú´'],
                                \ ['subset'		, '‚äÇ'],
                                \ ['subseteq'	, '‚äÜ'],
                                \ ['succ'		, '‚âª'],
                                \ ['succeq'		, '‚™∞'],
                                \ ['sum'		, '‚àë'],
                                \ ['supset'		, '‚äÉ'],
                                \ ['supseteq'	, '‚äá'],
                                \ ['surd'		, '‚àö'],
                                \ ['swarrow'	, '‚Üô'],
                                \ ['times'		, '√ó'],
                                \ ['to'		, '‚Üí'],
                                \ ['top'		, '‚ä§'],
                                \ ['triangle'	, '‚àÜ'],
                                \ ['triangleleft'	, '‚ä≤'],
                                \ ['triangleright'	, '‚ä≥'],
                                \ ['uparrow'	, '‚Üë'],
                                \ ['Uparrow'	, '‚áë'],
                                \ ['updownarrow'	, '‚Üï'],
                                \ ['Updownarrow'	, '‚áï'],
                                \ ['vdash'		, '‚ä¢'],
                                \ ['vdots'		, '‚ãÆ'],
                                \ ['vee'		, '‚à®'],
                                \ ['wedge'		, '‚àß'],
                                \ ['wp'		, '‚Ñò'],
                                \ ['wr'		, '‚âÄ']]
    1              0.000011   if &ambw == "double" || exists("g:tex_usedblwidth")
                                let s:texMathList= s:texMathList + [
                                \ ['right\\rangle'	, '„Äâ'],
                                \ ['left\\langle'	, '„Äà']]
    1              0.000002   else
    1              0.000032     let s:texMathList= s:texMathList + [
                                \ ['right\\rangle'	, '>'],
                                \ ['left\\langle'	, '<']]
    1              0.000002   endif
  172              0.000670   for texmath in s:texMathList
  171              0.001602    if texmath[0] =~# '\w$'
  160              0.002555     exe "syn match texMathSymbol '\\\\".texmath[0]."\\>' contained conceal cchar=".texmath[1]
   11              0.000014    else
   11              0.000199     exe "syn match texMathSymbol '\\\\".texmath[0]."' contained conceal cchar=".texmath[1]
  171              0.000152    endif
  172              0.000244   endfor
                            
    1              0.000013   if &ambw == "double"
                               syn match texMathSymbol '\\gg\>'			contained conceal cchar=‚â´
                               syn match texMathSymbol '\\ll\>'			contained conceal cchar=‚â™
    1              0.000003   else
    1              0.000007    syn match texMathSymbol '\\gg\>'			contained conceal cchar=‚ü´
    1              0.000007    syn match texMathSymbol '\\ll\>'			contained conceal cchar=‚ü™
    1              0.000003   endif
                            
    1              0.000008   syn match texMathSymbol '\\hat{a}' contained conceal cchar=√¢
    1              0.000009   syn match texMathSymbol '\\hat{A}' contained conceal cchar=√Ç
    1              0.000008   syn match texMathSymbol '\\hat{c}' contained conceal cchar=ƒâ
    1              0.000010   syn match texMathSymbol '\\hat{C}' contained conceal cchar=ƒà
    1              0.000008   syn match texMathSymbol '\\hat{e}' contained conceal cchar=√™
    1              0.000008   syn match texMathSymbol '\\hat{E}' contained conceal cchar=√ä
    1              0.000008   syn match texMathSymbol '\\hat{g}' contained conceal cchar=ƒù
    1              0.000008   syn match texMathSymbol '\\hat{G}' contained conceal cchar=ƒú
    1              0.000008   syn match texMathSymbol '\\hat{i}' contained conceal cchar=√Æ
    1              0.000008   syn match texMathSymbol '\\hat{I}' contained conceal cchar=√é
    1              0.000008   syn match texMathSymbol '\\hat{o}' contained conceal cchar=√¥
    1              0.000010   syn match texMathSymbol '\\hat{O}' contained conceal cchar=√î
    1              0.000009   syn match texMathSymbol '\\hat{s}' contained conceal cchar=≈ù
    1              0.000042   syn match texMathSymbol '\\hat{S}' contained conceal cchar=≈ú
    1              0.000044   syn match texMathSymbol '\\hat{u}' contained conceal cchar=√ª
    1              0.000012   syn match texMathSymbol '\\hat{U}' contained conceal cchar=√õ
    1              0.000006   syn match texMathSymbol '\\hat{w}' contained conceal cchar=≈µ
    1              0.000005   syn match texMathSymbol '\\hat{W}' contained conceal cchar=≈¥
    1              0.000029   syn match texMathSymbol '\\hat{y}' contained conceal cchar=≈∑
    1              0.000005   syn match texMathSymbol '\\hat{Y}' contained conceal cchar=≈∂
                            "  syn match texMathSymbol '\\bar{a}' contained conceal cchar=aÃÖ
                            
    1              0.000004   syn match texMathSymbol '\\dot{B}' contained conceal cchar=·∏Ç
    1              0.000004   syn match texMathSymbol '\\dot{b}' contained conceal cchar=·∏É
    1              0.000010   syn match texMathSymbol '\\dot{D}' contained conceal cchar=·∏ä
    1              0.000007   syn match texMathSymbol '\\dot{d}' contained conceal cchar=·∏ã
    1              0.000008   syn match texMathSymbol '\\dot{F}' contained conceal cchar=·∏û
    1              0.000010   syn match texMathSymbol '\\dot{f}' contained conceal cchar=·∏ü
    1              0.000008   syn match texMathSymbol '\\dot{H}' contained conceal cchar=·∏¢
    1              0.000007   syn match texMathSymbol '\\dot{h}' contained conceal cchar=·∏£
    1              0.000007   syn match texMathSymbol '\\dot{M}' contained conceal cchar=·πÄ
    1              0.000034   syn match texMathSymbol '\\dot{m}' contained conceal cchar=·πÅ
    1              0.000010   syn match texMathSymbol '\\dot{N}' contained conceal cchar=·πÑ
    1              0.000013   syn match texMathSymbol '\\dot{n}' contained conceal cchar=·πÖ
    1              0.000009   syn match texMathSymbol '\\dot{P}' contained conceal cchar=·πñ
    1              0.000010   syn match texMathSymbol '\\dot{p}' contained conceal cchar=·πó
    1              0.000007   syn match texMathSymbol '\\dot{R}' contained conceal cchar=·πò
    1              0.000008   syn match texMathSymbol '\\dot{r}' contained conceal cchar=·πô
    1              0.000008   syn match texMathSymbol '\\dot{S}' contained conceal cchar=·π†
    1              0.000367   syn match texMathSymbol '\\dot{s}' contained conceal cchar=·π°
    1              0.000028   syn match texMathSymbol '\\dot{T}' contained conceal cchar=·π™
    1              0.000007   syn match texMathSymbol '\\dot{t}' contained conceal cchar=·π´
    1              0.000005   syn match texMathSymbol '\\dot{W}' contained conceal cchar=·∫Ü
    1              0.000005   syn match texMathSymbol '\\dot{w}' contained conceal cchar=·∫á
    1              0.000006   syn match texMathSymbol '\\dot{X}' contained conceal cchar=·∫ä
    1              0.000006   syn match texMathSymbol '\\dot{x}' contained conceal cchar=·∫ã
    1              0.000006   syn match texMathSymbol '\\dot{Y}' contained conceal cchar=·∫é
    1              0.000007   syn match texMathSymbol '\\dot{y}' contained conceal cchar=·∫è
    1              0.000006   syn match texMathSymbol '\\dot{Z}' contained conceal cchar=≈ª
    1              0.000042   syn match texMathSymbol '\\dot{z}' contained conceal cchar=≈º
                            
    1              0.000007   syn match texMathSymbol '\\dot{C}' contained conceal cchar=ƒä
    1              0.000006   syn match texMathSymbol '\\dot{c}' contained conceal cchar=ƒã
    1              0.000007   syn match texMathSymbol '\\dot{E}' contained conceal cchar=ƒñ
    1              0.000006   syn match texMathSymbol '\\dot{e}' contained conceal cchar=ƒó
    1              0.000007   syn match texMathSymbol '\\dot{G}' contained conceal cchar=ƒ†
    1              0.000007   syn match texMathSymbol '\\dot{g}' contained conceal cchar=ƒ°
    1              0.000007   syn match texMathSymbol '\\dot{I}' contained conceal cchar=ƒ∞
                            
    1              0.000006   syn match texMathSymbol '\\dot{A}' contained conceal cchar=»¶
    1              0.000006   syn match texMathSymbol '\\dot{a}' contained conceal cchar=»ß
    1              0.000008   syn match texMathSymbol '\\dot{O}' contained conceal cchar=»Æ
    1              0.000005   syn match texMathSymbol '\\dot{o}' contained conceal cchar=»Ø
    1              0.000003  endif
                            
                             " Greek {{{2
    1              0.000055  if s:tex_conceal =~# 'g'
    1              0.000030   fun! s:Greek(group,pat,cchar)
                                exe 'syn match '.a:group." '".a:pat."' contained conceal cchar=".a:cchar
                              endfun
    1   0.000054   0.000031   call s:Greek('texGreek','\\alpha\>'		,'Œ±')
    1   0.000028   0.000016   call s:Greek('texGreek','\\beta\>'		,'Œ≤')
    1   0.000022   0.000011   call s:Greek('texGreek','\\gamma\>'		,'Œ≥')
    1   0.000024   0.000011   call s:Greek('texGreek','\\delta\>'		,'Œ¥')
    1   0.000034   0.000017   call s:Greek('texGreek','\\epsilon\>'		,'œµ')
    1   0.000031   0.000014   call s:Greek('texGreek','\\varepsilon\>'	,'Œµ')
    1   0.000028   0.000014   call s:Greek('texGreek','\\zeta\>'		,'Œ∂')
    1   0.000055   0.000031   call s:Greek('texGreek','\\eta\>'		,'Œ∑')
    1   0.000031   0.000017   call s:Greek('texGreek','\\theta\>'		,'Œ∏')
    1   0.000035   0.000016   call s:Greek('texGreek','\\vartheta\>'	,'œë')
    1   0.000023   0.000012   call s:Greek('texGreek','\\iota\>'            ,'Œπ')
    1   0.000022   0.000011   call s:Greek('texGreek','\\kappa\>'		,'Œ∫')
    1   0.000038   0.000026   call s:Greek('texGreek','\\lambda\>'		,'Œª')
    1   0.000021   0.000010   call s:Greek('texGreek','\\mu\>'		,'Œº')
    1   0.000021   0.000011   call s:Greek('texGreek','\\nu\>'		,'ŒΩ')
    1   0.000021   0.000010   call s:Greek('texGreek','\\xi\>'		,'Œæ')
    1   0.000019   0.000010   call s:Greek('texGreek','\\pi\>'		,'œÄ')
    1   0.000020   0.000010   call s:Greek('texGreek','\\varpi\>'		,'œñ')
    1   0.000023   0.000012   call s:Greek('texGreek','\\rho\>'		,'œÅ')
    1   0.000021   0.000010   call s:Greek('texGreek','\\varrho\>'		,'œ±')
    1   0.000021   0.000010   call s:Greek('texGreek','\\sigma\>'		,'œÉ')
    1   0.000022   0.000011   call s:Greek('texGreek','\\varsigma\>'	,'œÇ')
    1   0.000021   0.000011   call s:Greek('texGreek','\\tau\>'		,'œÑ')
    1   0.000021   0.000011   call s:Greek('texGreek','\\upsilon\>'		,'œÖ')
    1   0.000020   0.000010   call s:Greek('texGreek','\\phi\>'		,'œï')
    1   0.000021   0.000011   call s:Greek('texGreek','\\varphi\>'		,'œÜ')
    1   0.000020   0.000010   call s:Greek('texGreek','\\chi\>'		,'œá')
    1   0.000028   0.000018   call s:Greek('texGreek','\\psi\>'		,'œà')
    1   0.000020   0.000010   call s:Greek('texGreek','\\omega\>'		,'œâ')
    1   0.000020   0.000010   call s:Greek('texGreek','\\Gamma\>'		,'Œì')
    1   0.000020   0.000010   call s:Greek('texGreek','\\Delta\>'		,'Œî')
    1   0.000021   0.000010   call s:Greek('texGreek','\\Theta\>'		,'Œò')
    1   0.000022   0.000011   call s:Greek('texGreek','\\Lambda\>'		,'Œõ')
    1   0.000020   0.000009   call s:Greek('texGreek','\\Xi\>'              ,'Œû')
    1   0.000022   0.000011   call s:Greek('texGreek','\\Pi\>'		,'Œ†')
    1   0.000021   0.000009   call s:Greek('texGreek','\\Sigma\>'		,'Œ£')
    1   0.000021   0.000010   call s:Greek('texGreek','\\Upsilon\>'		,'Œ•')
    1   0.000020   0.000010   call s:Greek('texGreek','\\Phi\>'		,'Œ¶')
    1   0.000019   0.000010   call s:Greek('texGreek','\\Chi\>'		,'Œß')
    1   0.000019   0.000009   call s:Greek('texGreek','\\Psi\>'		,'Œ®')
    1   0.000021   0.000009   call s:Greek('texGreek','\\Omega\>'		,'Œ©')
    1              0.000007   delfun s:Greek
    1              0.000002  endif
                            
                             " Superscripts/Subscripts {{{2
    1              0.000008  if s:tex_conceal =~# 's'
    1              0.000005   if s:tex_fast =~# 's'
    1              0.000031    syn region texSuperscript	matchgroup=texDelimiter start='\^{'	skip="\\\\\|\\[{}]" end='}'	contained concealends contains=texSpecialChar,texSuperscripts,texStatement,texSubscript,texSuperscript,texMathMatcher
    1              0.000018    syn region texSubscript	matchgroup=texDelimiter start='_{'		skip="\\\\\|\\[{}]" end='}'	contained concealends contains=texSpecialChar,texSubscripts,texStatement,texSubscript,texSuperscript,texMathMatcher
    1              0.000001   endif
                              " s:SuperSub:
    1              0.000007   fun! s:SuperSub(group,leader,pat,cchar)
                                if a:pat =~# '^\\' || (a:leader == '\^' && a:pat =~# s:tex_superscripts) || (a:leader == '_' && a:pat =~# s:tex_subscripts)
                            "     call Decho("SuperSub: group<".a:group."> leader<".a:leader."> pat<".a:pat."> cchar<".a:cchar.">")
                                 exe 'syn match '.a:group." '".a:leader.a:pat."' contained conceal cchar=".a:cchar
                                 exe 'syn match '.a:group."s '".a:pat        ."' contained conceal cchar=".a:cchar.' nextgroup='.a:group.'s'
                                endif
                              endfun
    1   0.000071   0.000015   call s:SuperSub('texSuperscript','\^','0','‚Å∞')
    1   0.000125   0.000014   call s:SuperSub('texSuperscript','\^','1','¬π')
    1   0.000056   0.000015   call s:SuperSub('texSuperscript','\^','2','¬≤')
    1   0.000049   0.000012   call s:SuperSub('texSuperscript','\^','3','¬≥')
    1   0.000047   0.000013   call s:SuperSub('texSuperscript','\^','4','‚Å¥')
    1   0.000046   0.000011   call s:SuperSub('texSuperscript','\^','5','‚Åµ')
    1   0.000044   0.000010   call s:SuperSub('texSuperscript','\^','6','‚Å∂')
    1   0.000046   0.000010   call s:SuperSub('texSuperscript','\^','7','‚Å∑')
    1   0.000045   0.000011   call s:SuperSub('texSuperscript','\^','8','‚Å∏')
    1   0.000043   0.000011   call s:SuperSub('texSuperscript','\^','9','‚Åπ')
    1   0.000044   0.000011   call s:SuperSub('texSuperscript','\^','a','·µÉ')
    1   0.000048   0.000014   call s:SuperSub('texSuperscript','\^','b','·µá')
    1   0.000045   0.000010   call s:SuperSub('texSuperscript','\^','c','·∂ú')
    1   0.000044   0.000010   call s:SuperSub('texSuperscript','\^','d','·µà')
    1   0.000044   0.000011   call s:SuperSub('texSuperscript','\^','e','·µâ')
    1   0.000044   0.000010   call s:SuperSub('texSuperscript','\^','f','·∂†')
    1   0.000048   0.000010   call s:SuperSub('texSuperscript','\^','g','·µç')
    1   0.000045   0.000011   call s:SuperSub('texSuperscript','\^','h',' ∞')
    1   0.000046   0.000011   call s:SuperSub('texSuperscript','\^','i','‚Å±')
    1   0.000046   0.000011   call s:SuperSub('texSuperscript','\^','j',' ≤')
    1   0.000045   0.000010   call s:SuperSub('texSuperscript','\^','k','·µè')
    1   0.000070   0.000035   call s:SuperSub('texSuperscript','\^','l','À°')
    1   0.000134   0.000052   call s:SuperSub('texSuperscript','\^','m','·µê')
    1   0.000052   0.000015   call s:SuperSub('texSuperscript','\^','n','‚Åø')
    1   0.000046   0.000010   call s:SuperSub('texSuperscript','\^','o','·µí')
    1   0.000044   0.000011   call s:SuperSub('texSuperscript','\^','p','·µñ')
    1   0.000044   0.000010   call s:SuperSub('texSuperscript','\^','r',' ≥')
    1   0.000045   0.000010   call s:SuperSub('texSuperscript','\^','s','À¢')
    1   0.000049   0.000016   call s:SuperSub('texSuperscript','\^','t','·µó')
    1   0.000046   0.000011   call s:SuperSub('texSuperscript','\^','u','·µò')
    1   0.000046   0.000010   call s:SuperSub('texSuperscript','\^','v','·µõ')
    1   0.000044   0.000010   call s:SuperSub('texSuperscript','\^','w',' ∑')
    1   0.000052   0.000013   call s:SuperSub('texSuperscript','\^','x','À£')
    1   0.000050   0.000012   call s:SuperSub('texSuperscript','\^','y',' ∏')
    1   0.000049   0.000012   call s:SuperSub('texSuperscript','\^','z','·∂ª')
    1   0.000049   0.000012   call s:SuperSub('texSuperscript','\^','A','·¥¨')
    1   0.000044   0.000010   call s:SuperSub('texSuperscript','\^','B','·¥Æ')
    1   0.000048   0.000011   call s:SuperSub('texSuperscript','\^','D','·¥∞')
    1   0.000046   0.000012   call s:SuperSub('texSuperscript','\^','E','·¥±')
    1   0.000048   0.000012   call s:SuperSub('texSuperscript','\^','G','·¥≥')
    1   0.000119   0.000014   call s:SuperSub('texSuperscript','\^','H','·¥¥')
    1   0.000070   0.000019   call s:SuperSub('texSuperscript','\^','I','·¥µ')
    1   0.000053   0.000014   call s:SuperSub('texSuperscript','\^','J','·¥∂')
    1   0.000048   0.000011   call s:SuperSub('texSuperscript','\^','K','·¥∑')
    1   0.000045   0.000011   call s:SuperSub('texSuperscript','\^','L','·¥∏')
    1   0.000054   0.000014   call s:SuperSub('texSuperscript','\^','M','·¥π')
    1   0.000047   0.000012   call s:SuperSub('texSuperscript','\^','N','·¥∫')
    1   0.000059   0.000022   call s:SuperSub('texSuperscript','\^','O','·¥º')
    1   0.000049   0.000012   call s:SuperSub('texSuperscript','\^','P','·¥æ')
    1   0.000046   0.000011   call s:SuperSub('texSuperscript','\^','R','·¥ø')
    1   0.000052   0.000013   call s:SuperSub('texSuperscript','\^','T','·µÄ')
    1   0.000050   0.000013   call s:SuperSub('texSuperscript','\^','U','·µÅ')
    1   0.000048   0.000014   call s:SuperSub('texSuperscript','\^','V','‚±Ω')
    1   0.000050   0.000012   call s:SuperSub('texSuperscript','\^','W','·µÇ')
    1   0.000049   0.000011   call s:SuperSub('texSuperscript','\^',',','Ô∏ê')
    1   0.000062   0.000011   call s:SuperSub('texSuperscript','\^',':','Ô∏ì')
    1   0.000067   0.000013   call s:SuperSub('texSuperscript','\^',';','Ô∏î')
    1   0.000132   0.000022   call s:SuperSub('texSuperscript','\^','+','‚Å∫')
    1   0.000056   0.000016   call s:SuperSub('texSuperscript','\^','-','‚Åª')
    1   0.000079   0.000019   call s:SuperSub('texSuperscript','\^','<','ÀÇ')
    1   0.000074   0.000010   call s:SuperSub('texSuperscript','\^','>','ÀÉ')
    1   0.000045   0.000010   call s:SuperSub('texSuperscript','\^','/','Àä')
    1   0.000049   0.000015   call s:SuperSub('texSuperscript','\^','(','‚ÅΩ')
    1   0.000047   0.000011   call s:SuperSub('texSuperscript','\^',')','‚Åæ')
    1   0.000045   0.000012   call s:SuperSub('texSuperscript','\^','\.','Àô')
    1   0.000046   0.000011   call s:SuperSub('texSuperscript','\^','=','À≠')
    1   0.000052   0.000011   call s:SuperSub('texSubscript','_','0','‚ÇÄ')
    1   0.000049   0.000011   call s:SuperSub('texSubscript','_','1','‚ÇÅ')
    1   0.000050   0.000011   call s:SuperSub('texSubscript','_','2','‚ÇÇ')
    1   0.000049   0.000011   call s:SuperSub('texSubscript','_','3','‚ÇÉ')
    1   0.000046   0.000010   call s:SuperSub('texSubscript','_','4','‚ÇÑ')
    1   0.000049   0.000010   call s:SuperSub('texSubscript','_','5','‚ÇÖ')
    1   0.000047   0.000010   call s:SuperSub('texSubscript','_','6','‚ÇÜ')
    1   0.000046   0.000010   call s:SuperSub('texSubscript','_','7','‚Çá')
    1   0.000046   0.000010   call s:SuperSub('texSubscript','_','8','‚Çà')
    1   0.000045   0.000010   call s:SuperSub('texSubscript','_','9','‚Çâ')
    1   0.000189   0.000012   call s:SuperSub('texSubscript','_','a','‚Çê')
    1   0.000093   0.000052   call s:SuperSub('texSubscript','_','e','‚Çë')
    1   0.000048   0.000012   call s:SuperSub('texSubscript','_','h','‚Çï')
    1   0.000053   0.000016   call s:SuperSub('texSubscript','_','i','·µ¢')
    1   0.000048   0.000011   call s:SuperSub('texSubscript','_','j','‚±º')
    1   0.000048   0.000011   call s:SuperSub('texSubscript','_','k','‚Çñ')
    1   0.000048   0.000011   call s:SuperSub('texSubscript','_','l','‚Çó')
    1   0.000047   0.000011   call s:SuperSub('texSubscript','_','m','‚Çò')
    1   0.000046   0.000011   call s:SuperSub('texSubscript','_','n','‚Çô')
    1   0.000045   0.000011   call s:SuperSub('texSubscript','_','o','‚Çí')
    1   0.000046   0.000011   call s:SuperSub('texSubscript','_','p','‚Çö')
    1   0.000047   0.000010   call s:SuperSub('texSubscript','_','r','·µ£')
    1   0.000046   0.000010   call s:SuperSub('texSubscript','_','s','‚Çõ')
    1   0.000046   0.000010   call s:SuperSub('texSubscript','_','t','‚Çú')
    1   0.000046   0.000010   call s:SuperSub('texSubscript','_','u','·µ§')
    1   0.000047   0.000011   call s:SuperSub('texSubscript','_','v','·µ•')
    1   0.000046   0.000010   call s:SuperSub('texSubscript','_','x','‚Çì')
    1   0.000106   0.000011   call s:SuperSub('texSubscript','_',',','Ô∏ê')
    1   0.000050   0.000013   call s:SuperSub('texSubscript','_','+','‚Çä')
    1   0.000048   0.000011   call s:SuperSub('texSubscript','_','-','‚Çã')
    1   0.000052   0.000014   call s:SuperSub('texSubscript','_','/','Àè')
    1   0.000047   0.000010   call s:SuperSub('texSubscript','_','(','‚Çç')
    1   0.000046   0.000011   call s:SuperSub('texSubscript','_',')','‚Çé')
    1   0.000043   0.000010   call s:SuperSub('texSubscript','_','\.','‚Ä∏')
    1   0.000046   0.000011   call s:SuperSub('texSubscript','_','r','·µ£')
    1   0.000047   0.000010   call s:SuperSub('texSubscript','_','v','·µ•')
    1   0.000047   0.000011   call s:SuperSub('texSubscript','_','x','‚Çì')
    1   0.000048   0.000011   call s:SuperSub('texSubscript','_','\\beta\>' ,'·µ¶')
    1   0.000045   0.000011   call s:SuperSub('texSubscript','_','\\delta\>','·µ®')
    1   0.000042   0.000011   call s:SuperSub('texSubscript','_','\\phi\>'  ,'·µ©')
    1   0.000044   0.000011   call s:SuperSub('texSubscript','_','\\gamma\>','·µß')
    1   0.000044   0.000011   call s:SuperSub('texSubscript','_','\\chi\>'  ,'·µ™')
                            
    1              0.000007   delfun s:SuperSub
    1              0.000001  endif
                            
                             " Accented characters and Ligatures: {{{2
    1              0.000007  if s:tex_conceal =~# 'a'
    1              0.000003   if b:tex_stylish
                               syn match texAccent		"\\[bcdvuH][^a-zA-Z@]"me=e-1
                               syn match texLigature	"\\\([ijolL]\|ae\|oe\|ss\|AA\|AE\|OE\)[^a-zA-Z@]"me=e-1
                               syn match texLigature	'--'
                               syn match texLigature	'---'
    1              0.000002   else
    1              0.000005    fun! s:Accents(chr,...)
                                 let i= 1
                                 for accent in ["`","\\'","^",'"','\~','\.','=',"c","H","k","r","u","v"]
                                  if i > a:0
                                   break
                                  endif
                                  if strlen(a:{i}) == 0 || a:{i} == ' ' || a:{i} == '?'
                                   let i= i + 1
                                   continue
                                  endif
                                  if accent =~# '\a'
                                   exe "syn match texAccent '".'\\'.accent.'\(\s*{'.a:chr.'}\|\s\+'.a:chr.'\)'."' conceal cchar=".a:{i}
                                  else
                                   exe "syn match texAccent '".'\\'.accent.'\s*\({'.a:chr.'}\|'.a:chr.'\)'."' conceal cchar=".a:{i}
                                  endif
                                  let i= i + 1
                                 endfor
                               endfun
                               "                  \`  \'  \^  \"  \~  \.  \=  \c  \H  \k  \r  \u  \v
    1   0.000784   0.000027    call s:Accents('a','√†','√°','√¢','√§','√£','»ß','ƒÅ',' ',' ','ƒÖ','√•','ƒÉ','«é')
    1   0.000892   0.000040    call s:Accents('A','√Ä','√Å','√Ç','√Ñ','√É','»¶','ƒÄ',' ',' ','ƒÑ','√Ö','ƒÇ','«ç')
    1   0.000410   0.000027    call s:Accents('c',' ','ƒá','ƒâ',' ',' ','ƒã',' ','√ß',' ',' ',' ',' ','ƒç')
    1   0.000415   0.000021    call s:Accents('C',' ','ƒÜ','ƒà',' ',' ','ƒä',' ','√á',' ',' ',' ',' ','ƒå')
    1   0.000261   0.000020    call s:Accents('d',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','ƒè')
    1   0.000256   0.000019    call s:Accents('D',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','ƒé')
    1   0.000617   0.000020    call s:Accents('e','√®','√©','√™','√´','·∫Ω','ƒó','ƒì','»©',' ','ƒô',' ','ƒï','ƒõ')
    1   0.000968   0.000023    call s:Accents('E','√à','√â','√ä','√ã','·∫º','ƒñ','ƒí','»®',' ','ƒò',' ','ƒî','ƒö')
    1   0.000499   0.000029    call s:Accents('g',' ','«µ','ƒù',' ',' ','ƒ°',' ','ƒ£',' ',' ',' ','ƒü','«ß')
    1   0.000506   0.000021    call s:Accents('G',' ','«¥','ƒú',' ',' ','ƒ†',' ','ƒ¢',' ',' ',' ','ƒû','«¶')
    1   0.000392   0.000022    call s:Accents('h',' ',' ','ƒ•',' ',' ',' ',' ',' ',' ',' ',' ',' ','»ü')
    1   0.000327   0.000027    call s:Accents('H',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','»û')
    1   0.000567   0.000021    call s:Accents('i','√¨','√≠','√Æ','√Ø','ƒ©','ƒØ','ƒ´',' ',' ','ƒØ',' ','ƒ≠','«ê')
    1   0.000755   0.000032    call s:Accents('I','√å','√ç','√é','√è','ƒ®','ƒ∞','ƒ™',' ',' ','ƒÆ',' ','ƒ¨','«è')
    1   0.000438   0.000066    call s:Accents('J',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','«∞')
    1   0.000564   0.000041    call s:Accents('k',' ',' ',' ',' ',' ',' ',' ','ƒ∑',' ',' ',' ',' ','«©')
    1   0.000653   0.000042    call s:Accents('K',' ',' ',' ',' ',' ',' ',' ','ƒ∂',' ',' ',' ',' ','«®')
    1   0.000563   0.000058    call s:Accents('l',' ','ƒ∫','ƒæ',' ',' ',' ',' ','ƒº',' ',' ',' ',' ','ƒæ')
    1   0.000417   0.000026    call s:Accents('L',' ','ƒπ','ƒΩ',' ',' ',' ',' ','ƒª',' ',' ',' ',' ','ƒΩ')
    1   0.000353   0.000022    call s:Accents('n',' ','≈Ñ',' ',' ','√±',' ',' ','≈Ü',' ',' ',' ',' ','≈à')
    1   0.000377   0.000019    call s:Accents('N',' ','≈É',' ',' ','√ë',' ',' ','≈Ö',' ',' ',' ',' ','≈á')
    1   0.000617   0.000023    call s:Accents('o','√≤','√≥','√¥','√∂','√µ','»Ø','≈ç',' ','≈ë','«´',' ','≈è','«í')
    1   0.000574   0.000024    call s:Accents('O','√í','√ì','√î','√ñ','√ï','»Æ','≈å',' ','≈ê','«™',' ','≈é','«ë')
    1   0.000326   0.000019    call s:Accents('r',' ','≈ï',' ',' ',' ',' ',' ','≈ó',' ',' ',' ',' ','≈ô')
    1   0.000352   0.000022    call s:Accents('R',' ','≈î',' ',' ',' ',' ',' ','≈ñ',' ',' ',' ',' ','≈ò')
    1   0.000383   0.000017    call s:Accents('s',' ','≈õ','≈ù',' ',' ',' ',' ','≈ü',' ','»ø',' ',' ','≈°')
    1   0.000407   0.000025    call s:Accents('S',' ','≈ö','≈ú',' ',' ',' ',' ','≈û',' ',' ',' ',' ','≈†')
    1   0.000296   0.000021    call s:Accents('t',' ',' ',' ',' ',' ',' ',' ','≈£',' ',' ',' ',' ','≈•')
    1   0.000318   0.000026    call s:Accents('T',' ',' ',' ',' ',' ',' ',' ','≈¢',' ',' ',' ',' ','≈§')
    1   0.000562   0.000019    call s:Accents('u','√π','√∫','√ª','√º','≈©',' ','≈´',' ','≈±','≈≥','≈Ø','≈≠','«î')
    1   0.000609   0.000019    call s:Accents('U','√ô','√ö','√õ','√ú','≈®',' ','≈™',' ','≈∞','≈≤','≈Æ','≈¨','«ì')
    1   0.000235   0.000018    call s:Accents('w',' ',' ','≈µ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ')
    1   0.000229   0.000016    call s:Accents('W',' ',' ','≈¥',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ')
    1   0.000350   0.000016    call s:Accents('y','·ª≥','√Ω','≈∑','√ø','·ªπ',' ',' ',' ',' ',' ',' ',' ',' ')
    1   0.000351   0.000020    call s:Accents('Y','·ª≤','√ù','≈∂','≈∏','·ª∏',' ',' ',' ',' ',' ',' ',' ',' ')
    1   0.000288   0.000017    call s:Accents('z',' ','≈∫',' ',' ',' ','≈º',' ',' ',' ',' ',' ',' ','≈æ')
    1   0.000323   0.000017    call s:Accents('Z',' ','≈π',' ',' ',' ','≈ª',' ',' ',' ',' ',' ',' ','≈Ω')
    1   0.000481   0.000020    call s:Accents('\\i','√¨','√≠','√Æ','√Ø','ƒ©','ƒØ',' ',' ',' ',' ',' ','ƒ≠',' ')
                               "                    \`  \'  \^  \"  \~  \.  \=  \c  \H  \k  \r  \u  \v
    1              0.000007    delfun s:Accents
    1              0.000012    syn match texAccent		'\\aa\>'	conceal cchar=√•
    1              0.000008    syn match texAccent		'\\AA\>'	conceal cchar=√Ö
    1              0.000008    syn match texAccent		'\\o\>'		conceal cchar=√∏
    1              0.000008    syn match texAccent		'\\O\>'		conceal cchar=√ò
    1              0.000008    syn match texLigature	'\\AE\>'	conceal cchar=√Ü
    1              0.000008    syn match texLigature	'\\ae\>'	conceal cchar=√¶
    1              0.000008    syn match texLigature	'\\oe\>'	conceal cchar=≈ì
    1              0.000007    syn match texLigature	'\\OE\>'	conceal cchar=≈í
    1              0.000008    syn match texLigature	'\\ss\>'	conceal cchar=√ü
    1              0.000008    syn match texLigature	'--'		conceal cchar=‚Äì
    1              0.000008    syn match texLigature	'---'		conceal cchar=‚Äî
    1              0.000001   endif
    1              0.000001  endif
    1              0.000001 endif
                            
                            " ---------------------------------------------------------------------
                            " LaTeX synchronization: {{{1
    1              0.000003 syn sync maxlines=200
    1              0.000002 syn sync minlines=50
                            
    1              0.000011 syn  sync match texSyncStop			groupthere NONE		"%stopzone\>"
                            
                            " Synchronization: {{{1
                            " The $..$ and $$..$$ make for impossible sync patterns
                            " (one can't tell if a "$$" starts or stops a math zone by itself)
                            " The following grouptheres coupled with minlines above
                            " help improve the odds of good syncing.
    1              0.000006 if !exists("g:tex_no_math")
    1              0.000019  syn sync match texSyncMathZoneA		groupthere NONE		"\\end{abstract}"
    1              0.000011  syn sync match texSyncMathZoneA		groupthere NONE		"\\end{center}"
    1              0.000015  syn sync match texSyncMathZoneA		groupthere NONE		"\\end{description}"
    1              0.000010  syn sync match texSyncMathZoneA		groupthere NONE		"\\end{enumerate}"
    1              0.000009  syn sync match texSyncMathZoneA		groupthere NONE		"\\end{itemize}"
    1              0.000009  syn sync match texSyncMathZoneA		groupthere NONE		"\\end{table}"
    1              0.000009  syn sync match texSyncMathZoneA		groupthere NONE		"\\end{tabular}"
    1              0.000010  syn sync match texSyncMathZoneA		groupthere NONE		"\\\(sub\)*section\>"
    1              0.000001 endif
                            
                            " ---------------------------------------------------------------------
                            " Highlighting: {{{1
                            
                            " Define the default highlighting. {{{1
    1              0.000005 if !exists("skip_tex_syntax_inits")
                            
                              " TeX highlighting groups which should share similar highlighting
    1              0.000004   if !exists("g:tex_no_error")
    1              0.000003    if !exists("g:tex_no_math")
    1              0.000006     hi def link texBadMath		texError
    1              0.000003     hi def link texBadPar		texBadMath
    1              0.000002     hi def link texMathDelimBad		texError
    1              0.000002     hi def link texMathError		texError
    1              0.000003     if !b:tex_stylish
    1              0.000003       hi def link texOnlyMath		texError
    1              0.000001     endif
    1              0.000001    endif
    1              0.000002    hi def link texError			Error
    1              0.000001   endif
                            
    1              0.000008   hi texBoldStyle		gui=bold	cterm=bold
    1              0.000003   hi texItalStyle		gui=italic	cterm=italic
    1              0.000005   hi texBoldItalStyle		gui=bold,italic cterm=bold,italic
    1              0.000003   hi texItalBoldStyle		gui=bold,italic cterm=bold,italic
    1              0.000002   hi def link texEmphStyle	texItalStyle
    1              0.000003   hi def link texCite		texRefZone
    1              0.000002   hi def link texDefCmd		texDef
    1              0.000002   hi def link texDefName	texDef
    1              0.000002   hi def link texDocType	texCmdName
    1              0.000002   hi def link texDocTypeArgs	texCmdArgs
    1              0.000002   hi def link texInputFileOpt	texCmdArgs
    1              0.000003   hi def link texInputCurlies	texDelimiter
    1              0.000002   hi def link texLigature	texSpecialChar
    1              0.000003   if !exists("g:tex_no_math")
    1              0.000003    hi def link texMathDelimSet1	texMathDelim
    1              0.000003    hi def link texMathDelimSet2	texMathDelim
    1              0.000002    hi def link texMathDelimKey	texMathDelim
    1              0.000003    hi def link texMathMatcher	texMath
    1              0.000002    hi def link texAccent	texStatement
    1              0.000002    hi def link texGreek		texStatement
    1              0.000002    hi def link texSuperscript	texStatement
    1              0.000002    hi def link texSubscript	texStatement
    1              0.000002    hi def link texSuperscripts 	texSuperscript
    1              0.000002    hi def link texSubscripts 	texSubscript
    1              0.000002    hi def link texMathSymbol	texStatement
    1              0.000002    hi def link texMathZoneV	texMath
    1              0.000002    hi def link texMathZoneW	texMath
    1              0.000002    hi def link texMathZoneX	texMath
    1              0.000002    hi def link texMathZoneY	texMath
    1              0.000002    hi def link texMathZoneV	texMath
    1              0.000002    hi def link texMathZoneZ	texMath
    1              0.000001   endif
    1              0.000002   hi def link texBeginEnd	texCmdName
    1              0.000002   hi def link texBeginEndName	texSection
    1              0.000002   hi def link texSpaceCode	texStatement
    1              0.000002   hi def link texStyleStatement	texStatement
    1              0.000002   hi def link texTypeSize	texType
    1              0.000002   hi def link texTypeStyle	texType
                            
                               " Basic TeX highlighting groups
    1              0.000002   hi def link texCmdArgs	Number
    1              0.000002   hi def link texCmdName	Statement
    1              0.000003   hi def link texComment	Comment
    1              0.000002   hi def link texDef		Statement
    1              0.000002   hi def link texDefParm	Special
    1              0.000002   hi def link texDelimiter	Delimiter
    1              0.000002   hi def link texEnvArgs	Number
    1              0.000002   hi def link texInput		Special
    1              0.000002   hi def link texInputFile	Special
    1              0.000002   hi def link texLength		Number
    1              0.000002   hi def link texMath		Special
    1              0.000002   hi def link texMathDelim	Statement
    1              0.000002   hi def link texMathOper	Operator
    1              0.000002   hi def link texNewCmd		Statement
    1              0.000002   hi def link texNewEnv		Statement
    1              0.000001   hi def link texOption		Number
    1              0.000002   hi def link texRefZone	Special
    1              0.000002   hi def link texSection	PreCondit
    1              0.000002   hi def link texSpaceCodeChar	Special
    1              0.000002   hi def link texSpecialChar	SpecialChar
    1              0.000002   hi def link texStatement	Statement
    1              0.000002   hi def link texString		String
    1              0.000002   hi def link texTodo		Todo
    1              0.000002   hi def link texType		Type
    1              0.000002   hi def link texZone		PreCondit
                            
    1              0.000001 endif
                            
                            " Cleanup: {{{1
    1              0.000007 delc TexFold
    1              0.000005 unlet s:extfname
    1              0.000004 let   b:current_syntax = "tex"
    1   0.000051   0.000021 let &cpo               = s:keepcpo
    1              0.000003 unlet s:keepcpo
                            " vim: ts=8 fdm=marker

SCRIPT  /home/bird/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.lua
Sourced 1 time
Total time:   0.002907
 Self time:   0.002907

count  total (s)   self (s)
                            vim.filetype.add({
                            	extension = { snippets = "snippets" },
                            })
                            
                            local function silent_map(mode, lhs, rhs, desc)
                            	vim.keymap.set(mode, lhs, rhs, { silent = true, desc = desc or "" })
                            end
                            
                            silent_map("i", "<Plug>luasnip-expand-or-jump", function()
                            	require("luasnip").expand_or_jump()
                            end, "LuaSnip: Expand or jump in the current snippet")
                            silent_map("i", "<Plug>luasnip-expand-snippet", function()
                            	require("luasnip").expand()
                            end, "LuaSnip: Expand the current snippet")
                            silent_map("i", "<Plug>luasnip-next-choice", function()
                            	require("luasnip").change_choice(1)
                            end, "LuaSnip: Change to the next choice from the choiceNode")
                            silent_map("i", "<Plug>luasnip-prev-choice", function()
                            	require("luasnip").change_choice(-1)
                            end, "LuaSnip: Change to the previous choice from the choiceNode")
                            silent_map("i", "<Plug>luasnip-jump-next", function()
                            	require("luasnip").jump(1)
                            end, "LuaSnip: Jump to the next node")
                            silent_map("i", "<Plug>luasnip-jump-prev", function()
                            	require("luasnip").jump(-1)
                            end, "LuaSnip: Jump to the previous node")
                            
                            silent_map("n", "<Plug>luasnip-delete-check", function()
                            	require("luasnip").unlink_current_if_deleted()
                            end, "LuaSnip: Removes current snippet from jumplist")
                            silent_map("!", "<Plug>luasnip-delete-check", function()
                            	require("luasnip").unlink_current_if_deleted()
                            end, "LuaSnip: Removes current snippet from jumplist")
                            
                            silent_map("", "<Plug>luasnip-expand-repeat", function()
                            	require("luasnip").expand_repeat()
                            end, "LuaSnip: Repeat last node expansion")
                            silent_map("!", "<Plug>luasnip-expand-repeat", function()
                            	require("luasnip").expand_repeat()
                            end, "LuaSnip: Repeat last node expansion")
                            
                            silent_map("s", "<Plug>luasnip-expand-or-jump", function()
                            	require("luasnip").expand_or_jump()
                            end, "LuaSnip: Expand or jump in the current snippet")
                            silent_map("s", "<Plug>luasnip-expand-snippet", function()
                            	require("luasnip").expand()
                            end, "LuaSnip: Expand the current snippet")
                            silent_map("s", "<Plug>luasnip-next-choice", function()
                            	require("luasnip").change_choice(1)
                            end, "LuaSnip: Change to the next choice from the choiceNode")
                            silent_map("s", "<Plug>luasnip-prev-choice", function()
                            	require("luasnip").change_choice(-1)
                            end, "LuaSnip: Change to the previous choice from the choiceNode")
                            silent_map("s", "<Plug>luasnip-jump-next", function()
                            	require("luasnip").jump(1)
                            end, "LuaSnip: Jump to the next node")
                            silent_map("s", "<Plug>luasnip-jump-prev", function()
                            	require("luasnip").jump(-1)
                            end, "LuaSnip: Jump to the previous node")
                            
                            vim.api.nvim_create_user_command("LuaSnipUnlinkCurrent", function()
                            	require("luasnip").unlink_current()
                            end, { force = true })
                            
                            --stylua: ignore
                            vim.api.nvim_create_user_command("LuaSnipListAvailable", function()
                            	(require("luasnip.util.vimversion").ge(0,9,0) and vim.print or vim.pretty_print)(require("luasnip").available())
                            end, { force = true })
                            
                            require("luasnip.config")._setup()
                            
                            -- register these during startup so lazy_load will also load filetypes whose
                            -- events fired only before lazy_load is actually called.
                            -- (BufWinEnter -> lazy_load() wouldn't load any files without these).
                            vim.api.nvim_create_augroup("_luasnip_lazy_load", {})
                            vim.api.nvim_create_autocmd({ "BufWinEnter", "FileType" }, {
                            	callback = function(event)
                            		require("luasnip.loaders").load_lazy_loaded(tonumber(event.buf))
                            	end,
                            	group = "_luasnip_lazy_load",
                            })

SCRIPT  /home/bird/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.vim
Sourced 1 time
Total time:   0.000131
 Self time:   0.000131

count  total (s)   self (s)
    1              0.000047 function! luasnip#expandable()
                            	return luaeval('require("luasnip").expandable()')
                            endfunction
                            
    1              0.000004 function! luasnip#expand_or_jumpable()
                            	return luaeval('require("luasnip").expand_or_jumpable()')
                            endfunction
                            
    1              0.000003 function! luasnip#expand_or_locally_jumpable()
                            	return luaeval('require("luasnip").expand_or_locally_jumpable()')
                            endfunction
                            
    1              0.000006 function! luasnip#locally_jumpable(direction)
                            	return luaeval('require("luasnip").locally_jumpable(_A)', a:direction)
                            endfunction
                            
    1              0.000004 function! luasnip#jumpable(direction)
                            	return luaeval('require("luasnip").jumpable(_A)', a:direction)
                            endfunction
                            
    1              0.000003 function! luasnip#choice_active()
                            	return luaeval('require("luasnip").choice_active()')
                            endfunction

SCRIPT  /home/bird/.local/share/nvim/lazy/cmp_luasnip/after/plugin/cmp_luasnip.lua
Sourced 1 time
Total time:   0.012179
 Self time:   0.012170

count  total (s)   self (s)
                            require("cmp").register_source("luasnip", require("cmp_luasnip").new())
                            
                            local cmp_luasnip = vim.api.nvim_create_augroup("cmp_luasnip", {})
                            
                            vim.api.nvim_create_autocmd("User", {
                              pattern = "LuasnipCleanup",
                              callback = function ()
                                require("cmp_luasnip").clear_cache()
                              end,
                              group = cmp_luasnip
                            })
                            
                            vim.api.nvim_create_autocmd("User", {
                              pattern = "LuasnipSnippetsAdded",
                              callback = function ()
                                require("cmp_luasnip").refresh()
                              end,
                              group = cmp_luasnip
                            })

SCRIPT  /home/bird/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua
Sourced 1 time
Total time:   0.002694
 Self time:   0.002624

count  total (s)   self (s)
                            require('cmp').register_source('path', require('cmp_path').new())

SCRIPT  /home/bird/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua
Sourced 1 time
Total time:   0.001871
 Self time:   0.001700

count  total (s)   self (s)
    1              0.000061 if vim.g.loaded_cmp then
                              return
                            end
                            vim.g.loaded_cmp = true
                            
                            if not vim.api.nvim_create_autocmd then
                              return print('[nvim-cmp] Your nvim does not has `nvim_create_autocmd` function. Please update to latest nvim.')
                            end
                            
                            local api = require('cmp.utils.api')
                            local types = require('cmp.types')
                            local highlight = require('cmp.utils.highlight')
                            local autocmd = require('cmp.utils.autocmd')
                            
                            vim.api.nvim_set_hl(0, 'CmpItemAbbr', { link = 'CmpItemAbbrDefault', default = true })
                            vim.api.nvim_set_hl(0, 'CmpItemAbbrDeprecated', { link = 'CmpItemAbbrDeprecatedDefault', default = true })
                            vim.api.nvim_set_hl(0, 'CmpItemAbbrMatch', { link = 'CmpItemAbbrMatchDefault', default = true })
                            vim.api.nvim_set_hl(0, 'CmpItemAbbrMatchFuzzy', { link = 'CmpItemAbbrMatchFuzzyDefault', default = true })
                            vim.api.nvim_set_hl(0, 'CmpItemKind', { link = 'CmpItemKindDefault', default = true })
                            vim.api.nvim_set_hl(0, 'CmpItemMenu', { link = 'CmpItemMenuDefault', default = true })
                            for kind in pairs(types.lsp.CompletionItemKind) do
                              if type(kind) == 'string' then
                                local name = ('CmpItemKind%s'):format(kind)
                                vim.api.nvim_set_hl(0, name, { link = ('%sDefault'):format(name), default = true })
                              end
                            end
                            
                            autocmd.subscribe({ 'ColorScheme', 'UIEnter' }, function()
                              highlight.inherit('CmpItemAbbrDefault', 'Pmenu', { bg = 'NONE', default = false })
                              highlight.inherit('CmpItemAbbrDeprecatedDefault', 'Comment', { bg = 'NONE', default = false })
                              highlight.inherit('CmpItemAbbrMatchDefault', 'Pmenu', { bg = 'NONE', default = false })
                              highlight.inherit('CmpItemAbbrMatchFuzzyDefault', 'Pmenu', { bg = 'NONE', default = false })
                              highlight.inherit('CmpItemKindDefault', 'Special', { bg = 'NONE', default = false })
                              highlight.inherit('CmpItemMenuDefault', 'Pmenu', { bg = 'NONE', default = false })
                              for name in pairs(types.lsp.CompletionItemKind) do
                                if type(name) == 'string' then
                                  vim.api.nvim_set_hl(0, ('CmpItemKind%sDefault'):format(name), { link = 'CmpItemKind', default = false })
                                end
                              end
                            end)
                            autocmd.emit('ColorScheme')
                            
                            if vim.on_key then
                              local control_c_termcode = vim.api.nvim_replace_termcodes('<C-c>', true, true, true)
                              vim.on_key(function(keys)
                                if keys == control_c_termcode then
                                  vim.schedule(function()
                                    if not api.is_suitable_mode() then
                                      autocmd.emit('InsertLeave')
                                    end
                                  end)
                                end
                              end, vim.api.nvim_create_namespace('cmp.plugin'))
                            end
                            
                            
                            vim.api.nvim_create_user_command('CmpStatus', function()
                              require('cmp').status()
                            end, { desc = 'Check status of cmp sources' })
                            
                            vim.cmd([[doautocmd <nomodeline> User CmpReady]])

SCRIPT  /usr/share/nvim/runtime/syntax/lsp_markdown.vim
Sourced 1 time
Total time:   0.076908
 Self time:   0.004790

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Markdown-like LSP docstrings
                            " Maintainer:   https://github.com/neovim/neovim
                            " URL:          http://neovim.io
                            " Remark:       Uses markdown syntax file
                            
                            " Source the default Nvim markdown syntax, not other random ones.
    1   0.072380   0.000262 execute 'source' expand('<sfile>:p:h') .. '/markdown.vim'
                            
    1              0.000007 syn cluster mkdNonListItem add=mkdEscape,mkdNbsp
                            
                            " Don't highlight invalid markdown syntax in LSP docstrings.
    1              0.000002 syn clear markdownError
                            
    1              0.000001 syn clear markdownEscape
    1              0.000024 syntax region markdownEscape matchgroup=markdownEscape start=/\\\ze[\\\x60*{}\[\]()#+\-,.!_>~|"$%&'\/:;<=?@^ ]/ end=/./ containedin=ALL keepend oneline concealends
                            
                            " Conceal backticks (which delimit code fragments).
                            " We ignore g:markdown_syntax_conceal here.
    1              0.000014 syn region markdownCode matchgroup=markdownCodeDelimiter start="`" end="`" keepend contains=markdownLineStart concealends
    1              0.000014 syn region markdownCode matchgroup=markdownCodeDelimiter start="`` \=" end=" \=``" keepend contains=markdownLineStart concealends
    1              0.000013 syn region markdownCode matchgroup=markdownCodeDelimiter start="^\s*````*.*$" end="^\s*````*\ze\s*$" keepend concealends
                            
                            " Highlight code fragments.
    1              0.000002 hi def link markdownCode Special
                            
                            " Conceal HTML entities.
    1              0.000009 syntax match mkdNbsp /&nbsp;/ conceal cchar= 
    1              0.000008 syntax match mkdLt /&lt;/  conceal cchar=<
    1              0.000007 syntax match mkdGt /&gt;/  conceal cchar=>
    1              0.000008 syntax match mkdAmp /&amp;/  conceal cchar=&
    1              0.000009 syntax match mkdQuot /&quot;/  conceal cchar="
                            
    1              0.000005 hi def link mkdEscape Special

SCRIPT  /usr/share/nvim/runtime/syntax/markdown.vim
Sourced 1 time
Total time:   0.072095
 Self time:   0.006235

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Markdown
                            " Maintainer:   Tim Pope <https://github.com/tpope/vim-markdown>
                            " Filenames:    *.markdown
                            " Last Change:  2022 Oct 13
                            
    1              0.000040 if exists("b:current_syntax")
                              finish
    1              0.000002 endif
                            
    1              0.000005 if !exists('main_syntax')
    1              0.000023   let main_syntax = 'markdown'
    1              0.000001 endif
                            
    1              0.000011 if has('folding')
    1              0.000014   let s:foldmethod = &l:foldmethod
    1              0.000004   let s:foldtext = &l:foldtext
    1              0.000001 endif
    1              0.000005 let s:iskeyword = &l:iskeyword
                            
    1   0.063881   0.000972 runtime! syntax/html.vim
    1              0.000014 unlet! b:current_syntax
                            
    1              0.000017 if !exists('g:markdown_fenced_languages')
    1              0.000013   let g:markdown_fenced_languages = []
    1              0.000003 endif
    1              0.000009 let s:done_include = {}
    1              0.000030 for s:type in map(copy(g:markdown_fenced_languages),'matchstr(v:val,"[^=]*$")')
                              if has_key(s:done_include, matchstr(s:type,'[^.]*'))
                                continue
                              endif
                              if s:type =~ '\.'
                                let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\.\zs.*')
                              endif
                              syn case match
                              exe 'syn include @markdownHighlight_'.tr(s:type,'.','_').' syntax/'.matchstr(s:type,'[^.]*').'.vim'
                              unlet! b:current_syntax
                              let s:done_include[matchstr(s:type,'[^.]*')] = 1
    1              0.000003 endfor
    1              0.000002 unlet! s:type
    1              0.000005 unlet! s:done_include
                            
    1              0.000005 syn spell toplevel
    1              0.000013 if exists('s:foldmethod') && s:foldmethod !=# &l:foldmethod
                              let &l:foldmethod = s:foldmethod
                              unlet s:foldmethod
    1              0.000001 endif
    1              0.000006 if exists('s:foldtext') && s:foldtext !=# &l:foldtext
                              let &l:foldtext = s:foldtext
                              unlet s:foldtext
    1              0.000001 endif
    1              0.000004 if s:iskeyword !=# &l:iskeyword
                              let &l:iskeyword = s:iskeyword
    1              0.000001 endif
    1              0.000002 unlet s:iskeyword
                            
    1              0.000005 if !exists('g:markdown_minlines')
    1              0.000004   let g:markdown_minlines = 50
    1              0.000001 endif
    1              0.000016 execute 'syn sync minlines=' . g:markdown_minlines
    1              0.000002 syn sync linebreaks=1
    1              0.000002 syn case ignore
                            
    1              0.000031 syn match markdownValid '[<>]\c[a-z/$!]\@!' transparent contains=NONE
    1              0.000012 syn match markdownValid '&\%(#\=\w*;\)\@!' transparent contains=NONE
                            
    1              0.000014 syn match markdownLineStart "^[<@]\@!" nextgroup=@markdownBlock,htmlSpecialChar
                            
    1              0.000011 syn cluster markdownBlock contains=markdownH1,markdownH2,markdownH3,markdownH4,markdownH5,markdownH6,markdownBlockquote,markdownListMarker,markdownOrderedListMarker,markdownCodeBlock,markdownRule
    1              0.000012 syn cluster markdownInline contains=markdownLineBreak,markdownLinkText,markdownItalic,markdownBold,markdownCode,markdownEscape,@htmlTop,markdownError,markdownValid
                            
    1              0.000011 syn match markdownH1 "^.\+\n=\+$" contained contains=@markdownInline,markdownHeadingRule,markdownAutomaticLink
    1              0.000008 syn match markdownH2 "^.\+\n-\+$" contained contains=@markdownInline,markdownHeadingRule,markdownAutomaticLink
                            
    1              0.000005 syn match markdownHeadingRule "^[=-]\+$" contained
                            
    1              0.000021 syn region markdownH1 matchgroup=markdownH1Delimiter start=" \{,3}#\s"      end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000144 syn region markdownH2 matchgroup=markdownH2Delimiter start=" \{,3}##\s"     end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000016 syn region markdownH3 matchgroup=markdownH3Delimiter start=" \{,3}###\s"    end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000011 syn region markdownH4 matchgroup=markdownH4Delimiter start=" \{,3}####\s"   end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000010 syn region markdownH5 matchgroup=markdownH5Delimiter start=" \{,3}#####\s"  end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000012 syn region markdownH6 matchgroup=markdownH6Delimiter start=" \{,3}######\s" end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
                            
    1              0.000008 syn match markdownBlockquote ">\%(\s\|$\)" contained nextgroup=@markdownBlock
                            
    1              0.000020 syn region markdownCodeBlock start="^\n\( \{4,}\|\t\)" end="^\ze \{,3}\S.*$" keepend
                            
                            " TODO: real nesting
    1              0.000014 syn match markdownListMarker "\%(\t\| \{0,4\}\)[-*+]\%(\s\+\S\)\@=" contained
    1              0.000011 syn match markdownOrderedListMarker "\%(\t\| \{0,4}\)\<\d\+\.\%(\s\+\S\)\@=" contained
                            
    1              0.000008 syn match markdownRule "\* *\* *\*[ *]*$" contained
    1              0.000007 syn match markdownRule "- *- *-[ -]*$" contained
                            
    1              0.000009 syn match markdownLineBreak " \{2,\}$"
                            
    1              0.000036 syn region markdownIdDeclaration matchgroup=markdownLinkDelimiter start="^ \{0,3\}!\=\[" end="\]:" oneline keepend nextgroup=markdownUrl skipwhite
    1              0.000013 syn match markdownUrl "\S\+" nextgroup=markdownUrlTitle skipwhite contained
    1              0.000012 syn region markdownUrl matchgroup=markdownUrlDelimiter start="<" end=">" oneline keepend nextgroup=markdownUrlTitle skipwhite contained
    1              0.000009 syn region markdownUrlTitle matchgroup=markdownUrlTitleDelimiter start=+"+ end=+"+ keepend contained
    1              0.000008 syn region markdownUrlTitle matchgroup=markdownUrlTitleDelimiter start=+'+ end=+'+ keepend contained
    1              0.000008 syn region markdownUrlTitle matchgroup=markdownUrlTitleDelimiter start=+(+ end=+)+ keepend contained
                            
    1              0.000034 syn region markdownLinkText matchgroup=markdownLinkTextDelimiter start="!\=\[\%(\_[^][]*\%(\[\_[^][]*\]\_[^][]*\)*]\%( \=[[(]\)\)\@=" end="\]\%( \=[[(]\)\@=" nextgroup=markdownLink,markdownId skipwhite contains=@markdownInline,markdownLineStart
    1              0.000115 syn region markdownLink matchgroup=markdownLinkDelimiter start="(" end=")" contains=markdownUrl keepend contained
    1              0.000016 syn region markdownId matchgroup=markdownIdDelimiter start="\[" end="\]" keepend contained
    1              0.000041 syn region markdownAutomaticLink matchgroup=markdownUrlDelimiter start="<\%(\w\+:\|[[:alnum:]_+-]\+@\)\@=" end=">" keepend oneline
                            
    1              0.000022 let s:concealends = ''
    1              0.000029 if has('conceal') && get(g:, 'markdown_syntax_conceal', 1) == 1
    1              0.000006   let s:concealends = ' concealends'
    1              0.000004 endif
    1              0.000043 exe 'syn region markdownItalic matchgroup=markdownItalicDelimiter start="\*\S\@=" end="\S\@<=\*\|^$" skip="\\\*" contains=markdownLineStart,@Spell' . s:concealends
    1              0.000028 exe 'syn region markdownItalic matchgroup=markdownItalicDelimiter start="\w\@<!_\S\@=" end="\S\@<=_\w\@!\|^$" skip="\\_" contains=markdownLineStart,@Spell' . s:concealends
    1              0.000031 exe 'syn region markdownBold matchgroup=markdownBoldDelimiter start="\*\*\S\@=" end="\S\@<=\*\*\|^$" skip="\\\*" contains=markdownLineStart,markdownItalic,@Spell' . s:concealends
    1              0.000033 exe 'syn region markdownBold matchgroup=markdownBoldDelimiter start="\w\@<!__\S\@=" end="\S\@<=__\w\@!\|^$" skip="\\_" contains=markdownLineStart,markdownItalic,@Spell' . s:concealends
    1              0.000035 exe 'syn region markdownBoldItalic matchgroup=markdownBoldItalicDelimiter start="\*\*\*\S\@=" end="\S\@<=\*\*\*\|^$" skip="\\\*" contains=markdownLineStart,@Spell' . s:concealends
    1              0.000036 exe 'syn region markdownBoldItalic matchgroup=markdownBoldItalicDelimiter start="\w\@<!___\S\@=" end="\S\@<=___\w\@!\|^$" skip="\\_" contains=markdownLineStart,@Spell' . s:concealends
    1              0.000026 exe 'syn region markdownStrike matchgroup=markdownStrikeDelimiter start="\~\~\S\@=" end="\S\@<=\~\~\|^$" contains=markdownLineStart,@Spell' . s:concealends
                            
    1              0.000013 syn region markdownCode matchgroup=markdownCodeDelimiter start="`" end="`" keepend contains=markdownLineStart
    1              0.000018 syn region markdownCode matchgroup=markdownCodeDelimiter start="`` \=" end=" \=``" keepend contains=markdownLineStart
    1              0.000022 syn region markdownCodeBlock matchgroup=markdownCodeDelimiter start="^\s*\z(`\{3,\}\).*$" end="^\s*\z1\ze\s*$" keepend
    1              0.000017 syn region markdownCodeBlock matchgroup=markdownCodeDelimiter start="^\s*\z(\~\{3,\}\).*$" end="^\s*\z1\ze\s*$" keepend
                            
    1              0.000014 syn match markdownFootnote "\[^[^\]]\+\]"
    1              0.000014 syn match markdownFootnoteDefinition "^\[^[^\]]\+\]:"
                            
    1              0.000008 let s:done_include = {}
    1              0.000008 for s:type in g:markdown_fenced_languages
                              if has_key(s:done_include, matchstr(s:type,'[^.]*'))
                                continue
                              endif
                              exe 'syn region markdownHighlight_'.substitute(matchstr(s:type,'[^=]*$'),'\..*','','').' matchgroup=markdownCodeDelimiter start="^\s*\z(`\{3,\}\)\s*\%({.\{-}\.\)\='.matchstr(s:type,'[^=]*').'}\=\S\@!.*$" end="^\s*\z1\ze\s*$" keepend contains=@markdownHighlight_'.tr(matchstr(s:type,'[^=]*$'),'.','_') . s:concealends
                              exe 'syn region markdownHighlight_'.substitute(matchstr(s:type,'[^=]*$'),'\..*','','').' matchgroup=markdownCodeDelimiter start="^\s*\z(\~\{3,\}\)\s*\%({.\{-}\.\)\='.matchstr(s:type,'[^=]*').'}\=\S\@!.*$" end="^\s*\z1\ze\s*$" keepend contains=@markdownHighlight_'.tr(matchstr(s:type,'[^=]*$'),'.','_') . s:concealends
                              let s:done_include[matchstr(s:type,'[^.]*')] = 1
    1              0.000003 endfor
    1              0.000005 unlet! s:type
    1              0.000005 unlet! s:done_include
                            
    1              0.000013 if get(b:, 'markdown_yaml_head', get(g:, 'markdown_yaml_head', main_syntax ==# 'markdown'))
    1   0.003703   0.000752   syn include @markdownYamlTop syntax/yaml.vim
    1              0.000010   unlet! b:current_syntax
    1              0.000037   syn region markdownYamlHead start="\%^---$" end="^\%(---\|\.\.\.\)\s*$" keepend contains=@markdownYamlTop,@Spell
    1              0.000002 endif
                            
    1              0.000012 syn match markdownEscape "\\[][\\`*_{}()<>#+.!-]"
    1              0.000010 syn match markdownError "\w\@<=_\w\@="
                            
    1              0.000010 hi def link markdownH1                    htmlH1
    1              0.000003 hi def link markdownH2                    htmlH2
    1              0.000003 hi def link markdownH3                    htmlH3
    1              0.000002 hi def link markdownH4                    htmlH4
    1              0.000002 hi def link markdownH5                    htmlH5
    1              0.000002 hi def link markdownH6                    htmlH6
    1              0.000003 hi def link markdownHeadingRule           markdownRule
    1              0.000005 hi def link markdownH1Delimiter           markdownHeadingDelimiter
    1              0.000002 hi def link markdownH2Delimiter           markdownHeadingDelimiter
    1              0.000002 hi def link markdownH3Delimiter           markdownHeadingDelimiter
    1              0.000002 hi def link markdownH4Delimiter           markdownHeadingDelimiter
    1              0.000002 hi def link markdownH5Delimiter           markdownHeadingDelimiter
    1              0.000003 hi def link markdownH6Delimiter           markdownHeadingDelimiter
    1              0.000002 hi def link markdownHeadingDelimiter      Delimiter
    1              0.000006 hi def link markdownOrderedListMarker     markdownListMarker
    1              0.000003 hi def link markdownListMarker            htmlTagName
    1              0.000002 hi def link markdownBlockquote            Comment
    1              0.000002 hi def link markdownRule                  PreProc
                            
    1              0.000002 hi def link markdownFootnote              Typedef
    1              0.000002 hi def link markdownFootnoteDefinition    Typedef
                            
    1              0.000003 hi def link markdownLinkText              htmlLink
    1              0.000003 hi def link markdownIdDeclaration         Typedef
    1              0.000003 hi def link markdownId                    Type
    1              0.000003 hi def link markdownAutomaticLink         markdownUrl
    1              0.000003 hi def link markdownUrl                   Float
    1              0.000002 hi def link markdownUrlTitle              String
    1              0.000003 hi def link markdownIdDelimiter           markdownLinkDelimiter
    1              0.000002 hi def link markdownUrlDelimiter          htmlTag
    1              0.000002 hi def link markdownUrlTitleDelimiter     Delimiter
                            
    1              0.000002 hi def link markdownItalic                htmlItalic
    1              0.000002 hi def link markdownItalicDelimiter       markdownItalic
    1              0.000002 hi def link markdownBold                  htmlBold
    1              0.000002 hi def link markdownBoldDelimiter         markdownBold
    1              0.000003 hi def link markdownBoldItalic            htmlBoldItalic
    1              0.000002 hi def link markdownBoldItalicDelimiter   markdownBoldItalic
    1              0.000003 hi def link markdownStrike                htmlStrike
    1              0.000002 hi def link markdownStrikeDelimiter       markdownStrike
    1              0.000002 hi def link markdownCodeDelimiter         Delimiter
                            
    1              0.000002 hi def link markdownEscape                Special
    1              0.000002 hi def link markdownError                 Error
                            
    1              0.000006 let b:current_syntax = "markdown"
    1              0.000006 if main_syntax ==# 'markdown'
    1              0.000007   unlet main_syntax
    1              0.000001 endif
                            
                            " vim:set sw=2:

SCRIPT  /usr/share/nvim/runtime/syntax/html.vim
Sourced 1 time
Total time:   0.062893
 Self time:   0.013277

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:		HTML
                            " Maintainer:		Doug Kearns <dougkearns@gmail.com>
                            " Previous Maintainers: Jorge Maldonado Ventura <jorgesumle@freakspot.net>
                            "			Claudio Fleiner <claudio@fleiner.com>
                            " Last Change:		2023 Nov 28
                            " 2024 Jul 30 by Vim Project: increase syn-sync-minlines to 250
                            
                            " See :help html.vim for some comments and a description of the options
                            
                            " quit when a syntax file was already loaded
    1              0.000016 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'html'
    1              0.000001 endif
                            
    1              0.000009 let s:cpo_save = &cpo
    1   0.000088   0.000061 set cpo&vim
                            
    1              0.000009 syntax spell toplevel
                            
    1   0.005370   0.000442 syn include @htmlXml syntax/xml.vim
    1              0.000002 unlet b:current_syntax
                            
    1              0.000002 syn case ignore
                            
                            " mark illegal characters
    1              0.000006 syn match htmlError "[<>&]"
                            
                            " tags
    1              0.000013 syn region  htmlString	 contained start=+"+ end=+"+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
    1              0.000009 syn region  htmlString	 contained start=+'+ end=+'+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
    1              0.000010 syn match   htmlValue	 contained "=[\t ]*[^'" \t>][^ \t>]*"hs=s+1   contains=javaScriptExpression,@htmlPreproc
    1              0.000010 syn region  htmlEndTag		   start=+</+	   end=+>+ contains=htmlTagN,htmlTagError
    1              0.000016 syn region  htmlTag		   start=+<[^/]+   end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
    1              0.000013 syn match   htmlTagN	 contained +<\s*[-a-zA-Z0-9]\++hs=s+1 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
    1              0.000010 syn match   htmlTagN	 contained +</\s*[-a-zA-Z0-9]\++hs=s+2 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
    1              0.000004 syn match   htmlTagError contained "[^>]<"ms=s+1
                            
                            " tag names
    1              0.000007 syn keyword htmlTagName contained address applet area a base basefont
    1              0.000006 syn keyword htmlTagName contained big blockquote br caption center
    1              0.000008 syn keyword htmlTagName contained cite code dd dfn dir div dl dt font
    1              0.000004 syn keyword htmlTagName contained form hr html img
    1              0.000005 syn keyword htmlTagName contained input isindex kbd li link map menu
    1              0.000005 syn keyword htmlTagName contained meta ol option param pre p samp span
    1              0.000006 syn keyword htmlTagName contained select small strike sub sup
    1              0.000006 syn keyword htmlTagName contained table td textarea th tr tt ul var xmp
    1              0.000013 syn match   htmlTagName contained "\<\%(b\|i\|u\|h[1-6]\|em\|strong\|head\|body\|title\)\>"
                            
                            " new html 4.0 tags
    1              0.000005 syn keyword htmlTagName contained abbr acronym bdo button col colgroup
    1              0.000005 syn keyword htmlTagName contained del fieldset iframe ins label legend
    1              0.000005 syn keyword htmlTagName contained object optgroup q s tbody tfoot thead
                            
                            " new html 5 tags
    1              0.000005 syn keyword htmlTagName contained article aside audio bdi canvas data
    1              0.000005 syn keyword htmlTagName contained datalist details dialog embed figcaption
    1              0.000004 syn keyword htmlTagName contained figure footer header hgroup keygen main
    1              0.000004 syn keyword htmlTagName contained mark menuitem meter nav output picture
    1              0.000005 syn keyword htmlTagName contained progress rb rp rt rtc ruby search section
    1              0.000005 syn keyword htmlTagName contained slot source summary template time track
    1              0.000002 syn keyword htmlTagName contained video wbr
                            
                            " svg and math tags
    1              0.000003 syn keyword htmlMathTagName contained math
    1              0.000004 syn keyword htmlSvgTagName  contained svg
                            
    1              0.000015 syn region  htmlMath start="<math>" end="</math>" contains=@htmlXml transparent keepend
    1              0.000011 syn region  htmlSvg  start="<svg>"  end="</svg>"  contains=@htmlXml transparent keepend
                            
    1              0.000005 syn cluster xmlTagHook	add=htmlMathTagName,htmlSvgTagName
                            
                            " legal arg names
    1              0.000002 syn keyword htmlArg contained action
    1              0.000005 syn keyword htmlArg contained align alink alt archive background bgcolor
    1              0.000004 syn keyword htmlArg contained border bordercolor cellpadding
    1              0.000006 syn keyword htmlArg contained cellspacing checked class clear code codebase color
    1              0.000005 syn keyword htmlArg contained cols colspan content coords enctype face
    1              0.000003 syn keyword htmlArg contained gutter height hspace id
    1              0.000003 syn keyword htmlArg contained link lowsrc marginheight
    1              0.000004 syn keyword htmlArg contained marginwidth maxlength method name prompt
    1              0.000005 syn keyword htmlArg contained rel rev rows rowspan scrolling selected shape
    1              0.000005 syn keyword htmlArg contained size src start target text type url
    1              0.000025 syn keyword htmlArg contained usemap ismap valign value vlink vspace width wrap
    1              0.000009 syn match   htmlArg contained "\<\%(http-equiv\|href\|title\)="me=e-1
                            
    1              0.000002 syn keyword htmlArg contained role
                            
                            " ARIA attributes {{{1
    1              0.000003 let s:aria =<< trim END
                              activedescendant
                              atomic
                              autocomplete
                              braillelabel
                              brailleroledescription
                              busy
                              checked
                              colcount
                              colindex
                              colindextext
                              colspan
                              controls
                              current
                              describedby
                              description
                              details
                              disabled
                              errormessage
                              expanded
                              flowto
                              haspopup
                              hidden
                              invalid
                              keyshortcuts
                              label
                              labelledby
                              level
                              live
                              modal
                              multiline
                              multiselectable
                              orientation
                              owns
                              placeholder
                              posinset
                              pressed
                              readonly
                              relevant
                              required
                              roledescription
                              rowcount
                              rowindex
                              rowindextext
                              rowspan
                              selected
                              setsize
                              sort
                              valuemax
                              valuemin
                              valuenow
                              valuetext
                            END
    1              0.000002 let s:aria_deprecated =<< trim END
                              dropeffect
                              grabbed
                            END
                            
    1              0.000012 call extend(s:aria, s:aria_deprecated)
    1              0.000101 exe 'syn match htmlArg contained "\%#=1\<aria-\%(' .. s:aria->join('\|') .. '\)\>"'
    1              0.000010 unlet s:aria s:aria_deprecated
                            " }}}
                            
                            " Netscape extensions
    1              0.000016 syn keyword htmlTagName contained frame noframes frameset nobr blink
    1              0.000004 syn keyword htmlTagName contained layer ilayer nolayer spacer
    1              0.000005 syn keyword htmlArg	contained frameborder noresize pagex pagey above below
    1              0.000005 syn keyword htmlArg	contained left top visibility clip id noshade
    1              0.000005 syn match   htmlArg	contained "\<z-index\>"
                            
                            " Microsoft extensions
    1              0.000002 syn keyword htmlTagName contained marquee
                            
                            " html 4.0 arg names
    1              0.000007 syn match   htmlArg contained "\<\%(accept-charset\|label\)\>"
    1              0.000006 syn keyword htmlArg contained abbr accept accesskey axis char charoff charset
    1              0.000006 syn keyword htmlArg contained cite classid codetype compact data datetime
    1              0.000006 syn keyword htmlArg contained declare defer dir disabled for frame
    1              0.000004 syn keyword htmlArg contained headers hreflang lang language longdesc
    1              0.000005 syn keyword htmlArg contained multiple nohref nowrap object profile readonly
    1              0.000005 syn keyword htmlArg contained rules scheme scope span standby style
    1              0.000004 syn keyword htmlArg contained summary tabindex valuetype version
                            
                            " html 5 arg names
    1              0.000004 syn keyword htmlArg contained allow autocapitalize as blocking decoding
    1              0.000004 syn keyword htmlArg contained enterkeyhint imagesizes imagesrcset inert
    1              0.000004 syn keyword htmlArg contained integrity is itemid itemprop itemref itemscope
    1              0.000004 syn keyword htmlArg contained itemtype loading nomodule ping playsinline
    1              0.000004 syn keyword htmlArg contained referrerpolicy slot allowfullscreen async
    1              0.000004 syn keyword htmlArg contained autocomplete autofocus autoplay challenge
    1              0.000005 syn keyword htmlArg contained contenteditable contextmenu controls crossorigin
    1              0.000005 syn keyword htmlArg contained default dirname download draggable dropzone form
    1              0.000004 syn keyword htmlArg contained formaction formenctype formmethod formnovalidate
    1              0.000005 syn keyword htmlArg contained formtarget hidden high icon inputmode keytype
    1              0.000006 syn keyword htmlArg contained kind list loop low max min minlength muted nonce
    1              0.000004 syn keyword htmlArg contained novalidate open optimum pattern placeholder
    1              0.000004 syn keyword htmlArg contained poster preload radiogroup required reversed
    1              0.000005 syn keyword htmlArg contained sandbox spellcheck sizes srcset srcdoc srclang
    1              0.000004 syn keyword htmlArg contained step title translate typemustmatch
    1              0.000010 syn match   htmlArg contained "\<data-\h\%(\w\|[-.]\)*\%(\_s*=\)\@="
                            
                            " special characters
    1              0.000027 syn match htmlSpecialChar "&#\=[0-9A-Za-z]\{1,32};"
                            
                            " Comments (the real ones or the old netscape ones)
    1              0.000006 if exists("html_wrong_comments")
                              syn region htmlComment	start=+<!--+	end=+--\s*>+	contains=@Spell
    1              0.000002 else
                              " The HTML 5.2 syntax 8.2.4.41: bogus comment is parser error; browser skips until next &gt
    1              0.000011   syn region htmlComment	start=+<!+	end=+>+		contains=htmlCommentError keepend
                              " Idem 8.2.4.42,51: Comment starts with <!-- and ends with -->
                              " Idem 8.2.4.43,44: Except <!--> and <!---> are parser errors
                              " Idem 8.2.4.52: dash-dash-bang (--!>) is error ignored by parser, also closes comment
    1              0.000016   syn region htmlComment matchgroup=htmlComment start=+<!--\%(-\?>\)\@!+	end=+--!\?>+	contains=htmlCommentNested,@htmlPreProc,@Spell keepend
                              " Idem 8.2.4.49: nested comment is parser error, except <!--> is all right
    1              0.000005   syn match htmlCommentNested contained "<!-->\@!"
    1              0.000027   syn match htmlCommentError  contained "[^><!]"
    1              0.000004 endif
    1              0.000010 syn region htmlComment	start=+<!DOCTYPE+	end=+>+ keepend
                            
                            " server-parsed commands
    1              0.000012 syn region htmlPreProc start=+<!--#+ end=+-->+ contains=htmlPreStmt,htmlPreError,htmlPreAttr
    1              0.000015 syn match htmlPreStmt contained "<!--#\%(config\|echo\|exec\|fsize\|flastmod\|include\|printenv\|set\|if\|elif\|else\|endif\|geoguide\)\>"
    1              0.000005 syn match htmlPreError contained "<!--#\S*"ms=s+4
    1              0.000010 syn match htmlPreAttr contained "\w\+=[^"]\S\+" contains=htmlPreProcAttrError,htmlPreProcAttrName
    1              0.000013 syn region htmlPreAttr contained start=+\w\+="+ skip=+\\\\\|\\"+ end=+"+ contains=htmlPreProcAttrName keepend
    1              0.000004 syn match htmlPreProcAttrError contained "\w\+="he=e-1
    1              0.000012 syn match htmlPreProcAttrName contained "\%(expr\|errmsg\|sizefmt\|timefmt\|var\|cgi\|cmd\|file\|virtual\|value\)="he=e-1
                            
    1              0.000005 if !exists("html_no_rendering")
                              " rendering
    1              0.000012   syn cluster htmlTop contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,javaScript,@htmlPreproc
                            
    1              0.000012   syn region htmlStrike start="<del\>" end="</del\_s*>"me=s-1 contains=@htmlTop
    1              0.000010   syn region htmlStrike start="<s\>" end="</s\_s*>"me=s-1 contains=@htmlTop
    1              0.000010   syn region htmlStrike start="<strike\>" end="</strike\_s*>"me=s-1 contains=@htmlTop
                            
    1              0.000012   syn region htmlBold start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
    1              0.000010   syn region htmlBold start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
    1              0.000010   syn region htmlBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
    1              0.000009   syn region htmlBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
    1              0.000012   syn region htmlBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
    1              0.000007   syn region htmlBoldUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
    1              0.000007   syn region htmlBoldUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlBoldItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
                            
    1              0.000010   syn region htmlUnderline start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBold,htmlUnderlineItalic
    1              0.000011   syn region htmlUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
    1              0.000008   syn region htmlUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
    1              0.000008   syn region htmlUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
    1              0.000009   syn region htmlUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
    1              0.000007   syn region htmlUnderlineItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlUnderlineItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
    1              0.000016   syn region htmlUnderlineBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlUnderlineBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
                            
    1              0.000012   syn region htmlItalic start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlItalicBold,htmlItalicUnderline
    1              0.000009   syn region htmlItalic start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
    1              0.000009   syn region htmlItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
    1              0.000009   syn region htmlItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
    1              0.000007   syn region htmlItalicBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop
    1              0.000009   syn region htmlItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlItalicUnderlineBold
    1              0.000007   syn region htmlItalicUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlItalicUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
                            
    1              0.000010   syn match htmlLeadingSpace "^\s\+" contained
    1              0.000017   syn region htmlLink start="<a\>\_[^>]*\<href\>" end="</a\_s*>"me=s-1 contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLeadingSpace,javaScript,@htmlPreproc
    1              0.000010   syn region htmlH1 start="<h1\>" end="</h1\_s*>"me=s-1 contains=@htmlTop
    1              0.000011   syn region htmlH2 start="<h2\>" end="</h2\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlH3 start="<h3\>" end="</h3\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlH4 start="<h4\>" end="</h4\_s*>"me=s-1 contains=@htmlTop
    1              0.000010   syn region htmlH5 start="<h5\>" end="</h5\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlH6 start="<h6\>" end="</h6\_s*>"me=s-1 contains=@htmlTop
    1              0.000023   syn region htmlHead start="<head\>" end="</head\_s*>"me=s-1 end="<body\>"me=s-1 end="<h[1-6]\>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,htmlTitle,javaScript,cssStyle,@htmlPreproc
    1              0.000014   syn region htmlTitle start="<title\>" end="</title\_s*>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,javaScript,@htmlPreproc
    1              0.000001 endif
                            
    1              0.000003 syn keyword htmlTagName		contained noscript
    1              0.000003 syn keyword htmlSpecialTagName	contained script style
    1              0.000007 if main_syntax != 'java' || exists("java_javascript")
                              " JAVA SCRIPT
    1   0.004700   0.000502   syn include @htmlJavaScript syntax/javascript.vim
    1              0.000008   unlet b:current_syntax
    1              0.000092   syn region  javaScript start=+<script\>\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlJavaScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
    1              0.000022   syn region  htmlScriptTag	contained start=+<script+ end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent
    1              0.000006   hi def link htmlScriptTag htmlTag
                            
                              " html events (i.e. arguments that include javascript commands)
    1              0.000010   if exists("html_extended_events")
                                syn region htmlEvent	contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ contains=htmlEventSQ
                                syn region htmlEvent	contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ contains=htmlEventDQ
    1              0.000002   else
    1              0.000009     syn region htmlEvent	contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ keepend contains=htmlEventSQ
    1              0.000010     syn region htmlEvent	contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ keepend contains=htmlEventDQ
    1              0.000002   endif
    1              0.000009   syn region htmlEventSQ	contained start=+'+ms=s+1 end=+'+me=s-1 contains=@htmlJavaScript
    1              0.000008   syn region htmlEventDQ	contained start=+"+ms=s+1 end=+"+me=s-1 contains=@htmlJavaScript
    1              0.000002   hi def link htmlEventSQ htmlEvent
    1              0.000002   hi def link htmlEventDQ htmlEvent
                            
                              " a javascript expression is used as an arg value
    1              0.000013   syn region  javaScriptExpression contained start=+&{+ keepend end=+};+ contains=@htmlJavaScript,@htmlPreproc
    1              0.000001 endif
                            
    1              0.000009 if main_syntax != 'java' || exists("java_vb")
                              " VB SCRIPT
    1   0.005056   0.000757   syn include @htmlVbScript syntax/vb.vim
    1              0.000015   unlet b:current_syntax
    1              0.000044   syn region  javaScript start=+<script \_[^>]*language *=\_[^>]*vbscript\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlVbScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
    1              0.000002 endif
                            
    1              0.000008 syn cluster htmlJavaScript	add=@htmlPreproc
                            
    1              0.000017 if main_syntax != 'java' || exists("java_css")
                              " embedded style sheets
    1              0.000006   syn keyword htmlArg		contained media
    1   0.036722   0.000621   syn include @htmlCss syntax/css.vim
    1              0.000004   unlet b:current_syntax
    1              0.000022   syn region cssStyle start=+<style+ keepend end=+</style>+ contains=@htmlCss,htmlTag,htmlEndTag,htmlCssStyleComment,@htmlPreproc
    1              0.000007   syn match htmlCssStyleComment contained "\%(<!--\|-->\)"
    1              0.004964   syn region htmlCssDefinition matchgroup=htmlArg start='style="' keepend matchgroup=htmlString end='"' contains=css.*Attr,css.*Prop,cssComment,cssLength,cssColor,cssURL,cssImportant,cssError,cssString,@htmlPreproc
    1              0.000031   hi def link htmlStyleArg htmlString
    1              0.000003 endif
                            
    1              0.000019 if main_syntax == "html"
                              " synchronizing (does not always work if a comment includes legal
                              " html tags, but doing it right would mean to always start
                              " at the first line, which is too slow)
                              syn sync match htmlHighlight groupthere NONE "<[/a-zA-Z]"
                              syn sync match htmlHighlight groupthere javaScript "<script"
                              syn sync match htmlHighlightSkip "^.*['\"].*$"
                              exe "syn sync minlines=" . get(g:, 'html_minlines', 250)
    1              0.000002 endif
                            
                            " Folding
                            " Originally by Ingo Karkat and Marcus Zanona
    1              0.000059 if get(g:, "html_syntax_folding", 0)
                              syn region htmlFold start="<\z(\<\%(area\|base\|br\|col\|command\|embed\|hr\|img\|input\|keygen\|link\|meta\|param\|source\|track\|wbr\>\)\@![a-z-]\+\>\)\%(\_s*\_[^/]\?>\|\_s\_[^>]*\_[^>/]>\)" end="</\z1\_s*>" fold transparent keepend extend containedin=htmlHead,htmlH\d
                              " fold comments (the real ones and the old Netscape ones)
                              if exists("html_wrong_comments")
                                syn region htmlComment start=+<!--+ end=+--\s*>\%(\n\s*<!--\)\@!+ contains=@Spell fold
                              endif
    1              0.000001 endif
                            
                            " The default highlighting.
    1              0.000004 hi def link htmlTag			Function
    1              0.000002 hi def link htmlEndTag			Identifier
    1              0.000002 hi def link htmlArg			Type
    1              0.000004 hi def link htmlTagName			htmlStatement
    1              0.000002 hi def link htmlSpecialTagName		Exception
    1              0.000002 hi def link htmlMathTagName		htmlTagName
    1              0.000002 hi def link htmlSvgTagName		htmlTagName
    1              0.000002 hi def link htmlValue			String
    1              0.000002 hi def link htmlSpecialChar		Special
                            
    1              0.000008 if !exists("html_no_rendering")
    1              0.000003   hi def link htmlH1			  Title
    1              0.000002   hi def link htmlH2			  htmlH1
    1              0.000002   hi def link htmlH3			  htmlH2
    1              0.000002   hi def link htmlH4			  htmlH3
    1              0.000002   hi def link htmlH5			  htmlH4
    1              0.000002   hi def link htmlH6			  htmlH5
    1              0.000002   hi def link htmlHead			  PreProc
    1              0.000002   hi def link htmlTitle			  Title
    1              0.000004   hi def link htmlBoldItalicUnderline	  htmlBoldUnderlineItalic
    1              0.000007   hi def link htmlUnderlineBold		  htmlBoldUnderline
    1              0.000003   hi def link htmlUnderlineItalicBold	  htmlBoldUnderlineItalic
    1              0.000002   hi def link htmlUnderlineBoldItalic	  htmlBoldUnderlineItalic
    1              0.000002   hi def link htmlItalicUnderline	  htmlUnderlineItalic
    1              0.000002   hi def link htmlItalicBold		  htmlBoldItalic
    1              0.000002   hi def link htmlItalicBoldUnderline	  htmlBoldUnderlineItalic
    1              0.000002   hi def link htmlItalicUnderlineBold	  htmlBoldUnderlineItalic
    1              0.000002   hi def link htmlLink			  Underlined
    1              0.000002   hi def link htmlLeadingSpace		  None
    1              0.000004   if !exists("html_my_rendering")
    1              0.000008     hi def htmlBold		   term=bold cterm=bold gui=bold
    1              0.000010     hi def htmlBoldUnderline	   term=bold,underline cterm=bold,underline gui=bold,underline
    1              0.000006     hi def htmlBoldItalic	   term=bold,italic cterm=bold,italic gui=bold,italic
    1              0.000008     hi def htmlBoldUnderlineItalic term=bold,italic,underline cterm=bold,italic,underline gui=bold,italic,underline
    1              0.000004     hi def htmlUnderline	   term=underline cterm=underline gui=underline
    1              0.000014     hi def htmlUnderlineItalic	   term=italic,underline cterm=italic,underline gui=italic,underline
    1              0.000004     hi def htmlItalic		   term=italic cterm=italic gui=italic
    1              0.000009     if v:version > 800 || v:version == 800 && has("patch1038")
    1              0.000004       hi def htmlStrike	term=strikethrough cterm=strikethrough gui=strikethrough
                                else
                                  hi def htmlStrike	term=underline cterm=underline gui=underline
    1              0.000001     endif
    1              0.000001   endif
    1              0.000001 endif
                            
    1              0.000002 hi def link htmlPreStmt		   PreProc
    1              0.000002 hi def link htmlPreError	   Error
    1              0.000002 hi def link htmlPreProc		   PreProc
    1              0.000002 hi def link htmlPreAttr		   String
    1              0.000002 hi def link htmlPreProcAttrName    PreProc
    1              0.000002 hi def link htmlPreProcAttrError   Error
    1              0.000003 hi def link htmlString		   String
    1              0.000003 hi def link htmlStatement	   Statement
    1              0.000003 hi def link htmlComment		   Comment
    1              0.000002 hi def link htmlCommentNested	   htmlError
    1              0.000002 hi def link htmlCommentError	   htmlError
    1              0.000002 hi def link htmlTagError	   htmlError
    1              0.000002 hi def link htmlEvent		   javaScript
    1              0.000002 hi def link htmlError		   Error
                            
    1              0.000002 hi def link javaScript		   Special
    1              0.000002 hi def link javaScriptExpression   javaScript
    1              0.000002 hi def link htmlCssStyleComment    Comment
    1              0.000002 hi def link htmlCssDefinition	   Special
                            
    1              0.000015 let b:current_syntax = "html"
                            
    1              0.000009 if main_syntax == 'html'
                              unlet main_syntax
    1              0.000002 endif
                            
    1   0.000162   0.000099 let &cpo = s:cpo_save
    1              0.000013 unlet s:cpo_save
                            
                            " vim: nowrap sw=2 sts=2 ts=8 noet fdm=marker:

SCRIPT  /usr/share/nvim/runtime/syntax/xml.vim
Sourced 1 time
Total time:   0.004918
 Self time:   0.002607

count  total (s)   self (s)
                            " Vim syntax file
                            " Language: XML
                            " Maintainer: Christian Brabandt <cb@256bit.org>
                            " Repository: https://github.com/chrisbra/vim-xml-ftplugin
                            " Previous Maintainer: Johannes Zellner <johannes@zellner.org>
                            " Author: Paul Siegmann <pauls@euronet.nl>
                            " Last Changed:	Nov 03, 2019
                            " Filenames:	*.xml
                            " Last Change:
                            " 20190923 - Fix xmlEndTag to match xmlTag (vim/vim#884)
                            " 20190924 - Fix xmlAttribute property (amadeus/vim-xml@d8ce1c946)
                            " 20191103 - Enable spell checking globally
                            " 20210428 - Improve syntax synchronizing
                            
                            " CONFIGURATION:
                            "   syntax folding can be turned on by
                            "
                            "      let g:xml_syntax_folding = 1
                            "
                            "   before the syntax file gets loaded (e.g. in ~/.vimrc).
                            "   This might slow down syntax highlighting significantly,
                            "   especially for large files.
                            "
                            " CREDITS:
                            "   The original version was derived by Paul Siegmann from
                            "   Claudio Fleiner's html.vim.
                            "
                            " REFERENCES:
                            "   [1] http://www.w3.org/TR/2000/REC-xml-20001006
                            "   [2] http://www.w3.org/XML/1998/06/xmlspec-report-19980910.htm
                            "
                            "   as <hirauchi@kiwi.ne.jp> pointed out according to reference [1]
                            "
                            "   2.3 Common Syntactic Constructs
                            "   [4]    NameChar    ::=    Letter | Digit | '.' | '-' | '_' | ':' | CombiningChar | Extender
                            "   [5]    Name        ::=    (Letter | '_' | ':') (NameChar)*
                            "
                            " NOTE:
                            "   1) empty tag delimiters "/>" inside attribute values (strings)
                            "      confuse syntax highlighting.
                            "   2) for large files, folding can be pretty slow, especially when
                            "      loading a file the first time and viewoptions contains 'folds'
                            "      so that folds of previous sessions are applied.
                            "      Don't use 'foldmethod=syntax' in this case.
                            
                            
                            " Quit when a syntax file was already loaded
    1              0.000010 if exists("b:current_syntax")
                                finish
    1              0.000001 endif
                            
    1              0.000006 let s:xml_cpo_save = &cpo
    1   0.000017   0.000011 set cpo&vim
                            
    1              0.000002 syn case match
                            
                            " Allow spell checking in tag values,
                            " there is no syntax region for that,
                            " so enable spell checking in top-level elements
                            " <tag>This text is spell checked</tag>
    1              0.000002 syn spell toplevel
                            
                            " mark illegal characters
    1              0.000016 syn match xmlError "[<&]"
                            
                            " strings (inside tags) aka VALUES
                            "
                            " EXAMPLE:
                            "
                            " <tag foo.attribute = "value">
                            "                      ^^^^^^^
    1              0.000019 syn region  xmlString contained start=+"+ end=+"+ contains=xmlEntity,@Spell display
    1              0.000009 syn region  xmlString contained start=+'+ end=+'+ contains=xmlEntity,@Spell display
                            
                            
                            " punctuation (within attributes) e.g. <tag xml:foo.attribute ...>
                            "                                              ^   ^
                            " syn match   xmlAttribPunct +[-:._]+ contained display
    1              0.000006 syn match   xmlAttribPunct +[:.]+ contained display
                            
                            " no highlighting for xmlEqual (xmlEqual has no highlighting group)
    1              0.000005 syn match   xmlEqual +=+ display
                            
                            
                            " attribute, everything before the '='
                            "
                            " PROVIDES: @xmlAttribHook
                            "
                            " EXAMPLE:
                            "
                            " <tag foo.attribute = "value">
                            "      ^^^^^^^^^^^^^
                            "
    1              0.000022 syn match   xmlAttrib
                                \ +[-'"<]\@1<!\<[a-zA-Z:_][-.0-9a-zA-Z:_]*\>\%(['"]\@!\|$\)+
                                \ contained
                                \ contains=xmlAttribPunct,@xmlAttribHook
                                \ display
                            
                            
                            " namespace spec
                            "
                            " PROVIDES: @xmlNamespaceHook
                            "
                            " EXAMPLE:
                            "
                            " <xsl:for-each select = "lola">
                            "  ^^^
                            "
    1              0.000005 if exists("g:xml_namespace_transparent")
                            syn match   xmlNamespace
                                \ +\(<\|</\)\@2<=[^ /!?<>"':]\+[:]\@=+
                                \ contained
                                \ contains=@xmlNamespaceHook
                                \ transparent
                                \ display
    1              0.000002 else
    1              0.000016 syn match   xmlNamespace
                                \ +\(<\|</\)\@2<=[^ /!?<>"':]\+[:]\@=+
                                \ contained
                                \ contains=@xmlNamespaceHook
                                \ display
    1              0.000001 endif
                            
                            
                            " tag name
                            "
                            " PROVIDES: @xmlTagHook
                            "
                            " EXAMPLE:
                            "
                            " <tag foo.attribute = "value">
                            "  ^^^
                            "
    1              0.000013 syn match   xmlTagName
                                \ +\%(<\|</\)\@2<=[^ /!?<>"']\++
                                \ contained
                                \ contains=xmlNamespace,xmlAttribPunct,@xmlTagHook
                                \ display
                            
                            
    1              0.000004 if exists('g:xml_syntax_folding')
                            
                                " start tag
                                " use matchgroup=xmlTag to skip over the leading '<'
                                "
                                " PROVIDES: @xmlStartTagHook
                                "
                                " EXAMPLE:
                                "
                                " <tag id="whoops">
                                " s^^^^^^^^^^^^^^^e
                                "
                                syn region   xmlTag
                            	\ matchgroup=xmlTag start=+<[^ /!?<>"']\@=+
                            	\ matchgroup=xmlTag end=+>+
                            	\ contained
                            	\ contains=xmlError,xmlTagName,xmlAttrib,xmlEqual,xmlString,@xmlStartTagHook
                            
                            
                                " highlight the end tag
                                "
                                " PROVIDES: @xmlTagHook
                                " (should we provide a separate @xmlEndTagHook ?)
                                "
                                " EXAMPLE:
                                "
                                " </tag>
                                " ^^^^^^
                                "
                                syn region   xmlEndTag
                            	\ matchgroup=xmlTag start=+</[^ /!?<>"']\@=+
                            	\ matchgroup=xmlTag end=+>+
                            	\ contained
                            	\ contains=xmlTagName,xmlNamespace,xmlAttribPunct,@xmlTagHook
                            
                                " tag elements with syntax-folding.
                                " NOTE: NO HIGHLIGHTING -- highlighting is done by contained elements
                                "
                                " PROVIDES: @xmlRegionHook
                                "
                                " EXAMPLE:
                                "
                                " <tag id="whoops">
                                "   <!-- comment -->
                                "   <another.tag></another.tag>
                                "   <empty.tag/>
                                "   some data
                                " </tag>
                                "
                                syn region   xmlRegion
                            	\ start=+<\z([^ /!?<>"']\+\)+
                            	\ skip=+<!--\_.\{-}-->+
                            	\ end=+</\z1\_\s\{-}>+
                            	\ end=+/>+
                            	\ fold
                            	\ contains=xmlTag,xmlEndTag,xmlCdata,xmlRegion,xmlComment,xmlEntity,xmlProcessing,@xmlRegionHook,@Spell
                            	\ keepend
                            	\ extend
                            
    1              0.000001 else
                            
                                " no syntax folding:
                                " - contained attribute removed
                                " - xmlRegion not defined
                                "
    1              0.000015     syn region   xmlTag
                            	\ matchgroup=xmlTag start=+<[^ /!?<>"']\@=+
                            	\ matchgroup=xmlTag end=+>+
                            	\ contains=xmlError,xmlTagName,xmlAttrib,xmlEqual,xmlString,@xmlStartTagHook
                            
    1              0.000013     syn region   xmlEndTag
                            	\ matchgroup=xmlTag start=+</[^ /!?<>"']\@=+
                            	\ matchgroup=xmlTag end=+>+
                            	\ contains=xmlTagName,xmlNamespace,xmlAttribPunct,@xmlTagHook
                            
    1              0.000001 endif
                            
                            
                            " &entities; compare with dtd
    1              0.000008 syn match   xmlEntity                 "&[^; \t]*;" contains=xmlEntityPunct
    1              0.000005 syn match   xmlEntityPunct  contained "[&.;]"
                            
    1              0.000004 if exists('g:xml_syntax_folding')
                            
                                " The real comments (this implements the comments as defined by xml,
                                " but not all xml pages actually conform to it. Errors are flagged.
                                syn region  xmlComment
                            	\ start=+<!+
                            	\ end=+>+
                            	\ contains=xmlCommentStart,xmlCommentError
                            	\ extend
                            	\ fold
                            
    1              0.000001 else
                            
                                " no syntax folding:
                                " - fold attribute removed
                                "
    1              0.000010     syn region  xmlComment
                            	\ start=+<!+
                            	\ end=+>+
                            	\ contains=xmlCommentStart,xmlCommentError
                            	\ extend
                            
    1              0.000001 endif
                            
    1              0.000006 syn match xmlCommentStart   contained "<!" nextgroup=xmlCommentPart
    1              0.000005 syn keyword xmlTodo         contained TODO FIXME XXX
    1              0.000004 syn match   xmlCommentError contained "[^><!]"
    1              0.000013 syn region  xmlCommentPart
                                \ start=+--+
                                \ end=+--+
                                \ contained
                                \ contains=xmlTodo,@xmlCommentHook,@Spell
                            
                            
                            " CData sections
                            "
                            " PROVIDES: @xmlCdataHook
                            "
    1              0.000018 syn region    xmlCdata
                                \ start=+<!\[CDATA\[+
                                \ end=+]]>+
                                \ contains=xmlCdataStart,xmlCdataEnd,@xmlCdataHook,@Spell
                                \ keepend
                                \ extend
                            
                            " using the following line instead leads to corrupt folding at CDATA regions
                            " syn match    xmlCdata      +<!\[CDATA\[\_.\{-}]]>+  contains=xmlCdataStart,xmlCdataEnd,@xmlCdataHook
    1              0.000006 syn match    xmlCdataStart +<!\[CDATA\[+  contained contains=xmlCdataCdata
    1              0.000004 syn keyword  xmlCdataCdata CDATA          contained
    1              0.000004 syn match    xmlCdataEnd   +]]>+          contained
                            
                            
                            " Processing instructions
                            " This allows "?>" inside strings -- good idea?
    1              0.000011 syn region  xmlProcessing matchgroup=xmlProcessingDelim start="<?" end="?>" contains=xmlAttrib,xmlEqual,xmlString
                            
                            
    1              0.000004 if exists('g:xml_syntax_folding')
                            
                                " DTD -- we use dtd.vim here
                                syn region  xmlDocType matchgroup=xmlDocTypeDecl
                            	\ start="<!DOCTYPE"he=s+2,rs=s+2 end=">"
                            	\ fold
                            	\ contains=xmlDocTypeKeyword,xmlInlineDTD,xmlString
    1              0.000001 else
                            
                                " no syntax folding:
                                " - fold attribute removed
                                "
    1              0.000012     syn region  xmlDocType matchgroup=xmlDocTypeDecl
                            	\ start="<!DOCTYPE"he=s+2,rs=s+2 end=">"
                            	\ contains=xmlDocTypeKeyword,xmlInlineDTD,xmlString
                            
    1              0.000001 endif
                            
    1              0.000004 syn keyword xmlDocTypeKeyword contained DOCTYPE PUBLIC SYSTEM
    1              0.000009 syn region  xmlInlineDTD contained matchgroup=xmlDocTypeDecl start="\[" end="]" contains=@xmlDTD
    1   0.002372   0.000071 syn include @xmlDTD <sfile>:p:h/dtd.vim
    1              0.000003 unlet b:current_syntax
                            
                            
                            " synchronizing
                            
    1              0.000011 syn sync match xmlSyncComment grouphere xmlComment +<!--+
    1              0.000006 syn sync match xmlSyncComment groupthere NONE +-->+
                            
                            " The following is slow on large documents (and the doctype is optional
                            " syn sync match xmlSyncDT grouphere  xmlDocType +\_.\(<!DOCTYPE\)\@=+
                            " syn sync match xmlSyncDT groupthere  NONE       +]>+
                            
    1              0.000008 if exists('g:xml_syntax_folding')
                                syn sync match xmlSync grouphere   xmlRegion  +\_.\(<[^ /!?<>"']\+\)\@=+
                                " syn sync match xmlSync grouphere  xmlRegion "<[^ /!?<>"']*>"
                                syn sync match xmlSync groupthere  xmlRegion  +</[^ /!?<>"']\+>+
    1              0.000001 endif
                            
    1              0.000003 syn sync minlines=100 maxlines=200
                            
                            
                            " The default highlighting.
    1              0.000002 hi def link xmlTodo		Todo
    1              0.000002 hi def link xmlTag		Function
    1              0.000002 hi def link xmlTagName		Function
    1              0.000002 hi def link xmlEndTag		Identifier
    1              0.000004 if !exists("g:xml_namespace_transparent")
    1              0.000003     hi def link xmlNamespace	Tag
    1              0.000001 endif
    1              0.000002 hi def link xmlEntity		Statement
    1              0.000002 hi def link xmlEntityPunct	Type
                            
    1              0.000002 hi def link xmlAttribPunct	Comment
    1              0.000002 hi def link xmlAttrib		Type
                            
    1              0.000002 hi def link xmlString		String
    1              0.000002 hi def link xmlComment		Comment
    1              0.000002 hi def link xmlCommentStart	xmlComment
    1              0.000002 hi def link xmlCommentPart	Comment
    1              0.000002 hi def link xmlCommentError	Error
    1              0.000002 hi def link xmlError		Error
                            
    1              0.000002 hi def link xmlProcessingDelim	Comment
    1              0.000002 hi def link xmlProcessing	Type
                            
    1              0.000002 hi def link xmlCdata		String
    1              0.000002 hi def link xmlCdataCdata	Statement
    1              0.000002 hi def link xmlCdataStart	Type
    1              0.000002 hi def link xmlCdataEnd		Type
                            
    1              0.000002 hi def link xmlDocTypeDecl	Function
    1              0.000002 hi def link xmlDocTypeKeyword	Statement
    1              0.000002 hi def link xmlInlineDTD	Function
                            
    1              0.000003 let b:current_syntax = "xml"
                            
    1   0.000013   0.000009 let &cpo = s:xml_cpo_save
    1              0.000002 unlet s:xml_cpo_save
                            
                            " vim: ts=4

SCRIPT  /usr/share/nvim/runtime/syntax/dtd.vim
Sourced 1 time
Total time:   0.002292
 Self time:   0.002280

count  total (s)   self (s)
                            " Vim syntax file
                            " Language: DTD (Document Type Definition for XML)
                            " Maintainer: Christian Brabandt <cb@256bit.org>
                            " Repository: https://github.com/chrisbra/vim-xml-ftplugin
                            " Previous Maintainer: Johannes Zellner <johannes@zellner.org>
                            " Author: Daniel Amyot <damyot@site.uottawa.ca>
                            " Last Changed:	Sept 24, 2019
                            " Filenames: *.dtd
                            "
                            " REFERENCES:
                            "   http://www.w3.org/TR/html40/
                            "   http://www.w3.org/TR/NOTE-html-970421
                            "
                            " TODO:
                            "   - improve synchronizing.
                            
    1              0.000025 if exists("b:current_syntax")
                                finish
    1              0.000001 endif
    1              0.000006 let s:dtd_cpo_save = &cpo
    1   0.000018   0.000011 set cpo&vim
                            
    1              0.000005 if !exists("dtd_ignore_case")
                                " I prefer having the case takes into consideration.
    1              0.000002     syn case match
                            else
                                syn case ignore
    1              0.000001 endif
                            
                            
                            " the following line makes the opening <! and
                            " closing > highlighted using 'dtdFunction'.
                            "
                            " PROVIDES: @dtdTagHook
                            "
    1              0.000037 syn region dtdTag matchgroup=dtdFunction
                                \ start=+<!+ end=+>+ matchgroup=NONE
                                \ contains=dtdTag,dtdTagName,dtdError,dtdComment,dtdString,dtdAttrType,dtdAttrDef,dtdEnum,dtdParamEntityInst,dtdParamEntityDecl,dtdCard,@dtdTagHook
                            
    1              0.000004 if !exists("dtd_no_tag_errors")
                                " mark everything as an error which starts with a <!
                                " and is not overridden later. If this is annoying,
                                " it can be switched off by setting the variable
                                " dtd_no_tag_errors.
    1              0.000007     syn region dtdError contained start=+<!+lc=2 end=+>+
    1              0.000001 endif
                            
                            " if this is a html like comment highlight also
                            " the opening <! and the closing > as Comment.
    1              0.000013 syn region dtdComment		start=+<![ \t]*--+ end=+-->+ contains=dtdTodo,@Spell
                            
                            
                            " proper DTD comment
    1              0.000007 syn region dtdComment contained start=+--+ end=+--+ contains=dtdTodo,@Spell
                            
                            
                            " Start tags (keywords). This is contained in dtdFunction.
                            " Note that everything not contained here will be marked
                            " as error.
    1              0.000014 syn match dtdTagName contained +<!\(ATTLIST\|DOCTYPE\|ELEMENT\|ENTITY\|NOTATION\|SHORTREF\|USEMAP\|\[\)+lc=2,hs=s+2
                            
                            
                            " wildcards and operators
    1              0.000004 syn match  dtdCard contained "|"
    1              0.000003 syn match  dtdCard contained ","
                            " evenutally overridden by dtdEntity
    1              0.000004 syn match  dtdCard contained "&"
    1              0.000004 syn match  dtdCard contained "?"
    1              0.000005 syn match  dtdCard contained "\*"
    1              0.000003 syn match  dtdCard contained "+"
                            
                            " ...and finally, special cases.
    1              0.000005 syn match  dtdCard      "ANY"
    1              0.000005 syn match  dtdCard      "EMPTY"
                            
    1              0.000004 if !exists("dtd_no_param_entities")
                            
                                " highlight parameter entity declarations
                                " and instances. Note that the closing `;'
                                " is optional.
                            
                                " instances
    1              0.000022     syn region dtdParamEntityInst oneline matchgroup=dtdParamEntityPunct
                            	\ start="%[-_a-zA-Z0-9.]\+"he=s+1,rs=s+1
                            	\ skip=+[-_a-zA-Z0-9.]+
                            	\ end=";\|\>"
                            	\ matchgroup=NONE contains=dtdParamEntityPunct
    1              0.000004     syn match  dtdParamEntityPunct contained "\."
                            
                                " declarations
                                " syn region dtdParamEntityDecl oneline matchgroup=dtdParamEntityDPunct start=+<!ENTITY % +lc=8 skip=+[-_a-zA-Z0-9.]+ matchgroup=NONE end="\>" contains=dtdParamEntityDPunct
    1              0.000014     syn match dtdParamEntityDecl +<!ENTITY % [-_a-zA-Z0-9.]*+lc=8 contains=dtdParamEntityDPunct
    1              0.000005     syn match  dtdParamEntityDPunct contained "%\|\."
                            
    1              0.000001 endif
                            
                            " &entities; compare with xml
    1              0.000009 syn match   dtdEntity		      "&[^; \t]*;" contains=dtdEntityPunct
    1              0.000004 syn match   dtdEntityPunct  contained "[&.;]"
                            
                            " Strings are between quotes
    1              0.000016 syn region dtdString    start=+"+ skip=+\\\\\|\\"+  end=+"+ contains=dtdAttrDef,dtdAttrType,dtdParamEntityInst,dtdEntity,dtdCard
    1              0.000011 syn region dtdString    start=+'+ skip=+\\\\\|\\'+  end=+'+ contains=dtdAttrDef,dtdAttrType,dtdParamEntityInst,dtdEntity,dtdCard
                            
                            " Enumeration of elements or data between parenthesis
                            "
                            " PROVIDES: @dtdEnumHook
                            "
    1              0.000011 syn region dtdEnum matchgroup=dtdType start="(" end=")" matchgroup=NONE contains=dtdEnum,dtdParamEntityInst,dtdCard,@dtdEnumHook
                            
                            "Attribute types
    1              0.000006 syn keyword dtdAttrType NMTOKEN  ENTITIES  NMTOKENS  ID  CDATA
    1              0.000004 syn keyword dtdAttrType IDREF  IDREFS
                            " ENTITY has to treated special for not overriding <!ENTITY
    1              0.000006 syn match   dtdAttrType +[^!]\<ENTITY+
                            
                            "Attribute Definitions
    1              0.000006 syn match  dtdAttrDef   "#REQUIRED"
    1              0.000007 syn match  dtdAttrDef   "#IMPLIED"
    1              0.000005 syn match  dtdAttrDef   "#FIXED"
                            
    1              0.000001 syn case match
                            " define some common keywords to mark TODO
                            " and important sections inside comments.
    1              0.000004 syn keyword dtdTodo contained TODO FIXME XXX
                            
    1              0.000003 syn sync lines=250
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
                            " The default highlighting.
    1              0.000016 hi def link dtdFunction		Function
    1              0.000003 hi def link dtdTag		Normal
    1              0.000002 hi def link dtdType		Type
    1              0.000002 hi def link dtdAttrType		dtdType
    1              0.000002 hi def link dtdAttrDef		dtdType
    1              0.000003 hi def link dtdConstant		Constant
    1              0.000002 hi def link dtdString		dtdConstant
    1              0.000002 hi def link dtdEnum		dtdConstant
    1              0.000002 hi def link dtdCard		dtdFunction
                            
    1              0.000002 hi def link dtdEntity		Statement
    1              0.000002 hi def link dtdEntityPunct	dtdType
    1              0.000002 hi def link dtdParamEntityInst	dtdConstant
    1              0.000002 hi def link dtdParamEntityPunct	dtdType
    1              0.000002 hi def link dtdParamEntityDecl	dtdType
    1              0.000002 hi def link dtdParamEntityDPunct dtdComment
                            
    1              0.000002 hi def link dtdComment		Comment
    1              0.000002 hi def link dtdTagName		Statement
    1              0.000002 hi def link dtdError		Error
    1              0.000002 hi def link dtdTodo		Todo
                            
                            
    1   0.000018   0.000013 let &cpo = s:dtd_cpo_save
    1              0.000030 unlet s:dtd_cpo_save
                            
    1              0.000004 let b:current_syntax = "dtd"
                            
                            " vim: ts=8

SCRIPT  /usr/share/nvim/runtime/syntax/javascript.vim
Sourced 1 time
Total time:   0.004186
 Self time:   0.004091

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	JavaScript
                            " Maintainer:	Claudio Fleiner <claudio@fleiner.com>
                            " Updaters:	Scott Shattuck (ss) <ss@technicalpursuit.com>
                            " URL:		http://www.fleiner.com/vim/syntax/javascript.vim
                            " Changes:	(ss) added keywords, reserved words, and other identifiers
                            "		(ss) repaired several quoting and grouping glitches
                            "		(ss) fixed regex parsing issue with multiple qualifiers [gi]
                            "		(ss) additional factoring of keywords, globals, and members
                            " Last Change:	2022 Jun 09
                            " 		2013 Jun 12: adjusted javaScriptRegexpString (Kevin Locke)
                            " 		2018 Apr 14: adjusted javaScriptRegexpString (LongJohnCoder)
                            " 		2024 Aug 14: fix a few stylistic issues (#15480)
                            
                            " tuning parameters:
                            " unlet javaScript_fold
                            
    1              0.000030 if !exists("main_syntax")
                              " quit when a syntax file was already loaded
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'javascript'
    1              0.000008 elseif exists("b:current_syntax") && b:current_syntax == "javascript"
                              finish
    1              0.000001 endif
                            
    1              0.000013 let s:cpo_save = &cpo
    1   0.000077   0.000032 set cpo&vim
                            
                            
    1              0.000019 syn keyword javaScriptCommentTodo      TODO FIXME XXX TBD contained
    1              0.000052 syn match   javaScriptLineComment      "\/\/.*" contains=@Spell,javaScriptCommentTodo
    1              0.000020 syn match   javaScriptCommentSkip      "^[ \t]*\*\($\|[ \t]\+\)"
    1              0.000034 syn region  javaScriptComment	       start="/\*"  end="\*/" contains=@Spell,javaScriptCommentTodo
    1              0.000009 syn match   javaScriptSpecial	       "\\\d\d\d\|\\."
    1              0.000017 syn region  javaScriptStringD	       start=+"+  skip=+\\\\\|\\"+  end=+"\|$+	contains=javaScriptSpecial,@htmlPreproc
    1              0.000013 syn region  javaScriptStringS	       start=+'+  skip=+\\\\\|\\'+  end=+'\|$+	contains=javaScriptSpecial,@htmlPreproc
    1              0.000038 syn region  javaScriptStringT	       start=+`+  skip=+\\\\\|\\`+  end=+`+	contains=javaScriptSpecial,javaScriptEmbed,@htmlPreproc
                            
    1              0.000011 syn region  javaScriptEmbed	       start=+${+  end=+}+	contains=@javaScriptEmbededExpr
                            
                            " number handling by Christopher Leonard chris.j.leonard@gmx.com
    1              0.000007 syn match   javaScriptSpecialCharacter "'\\.'"
    1              0.000013 syn match   javaScriptNumber           "\<0[bB][0-1]\+\(_[0-1]\+\)*\>"
    1              0.000009 syn match   javaScriptNumber           "\<0[oO][0-7]\+\(_[0-7]\+\)*\>"
    1              0.000008 syn match   javaScriptNumber           "\<0\([0-7]\+\(_[0-7]\+\)*\)\?\>"
    1              0.000008 syn match   javaScriptNumber           "\<0[xX][0-9a-fA-F]\+\(_[0-9a-fA-F]\+\)*\>"
    1              0.000010 syn match   javaScriptNumber           "\<\d\+\(_\d\+\)*[eE][+-]\?\d\+\>"
    1              0.000022 syn match   javaScriptNumber           "\<[1-9]\d*\(_\d\+\)*\(\.\(\d\+\(_\d\+\)*\([eE][+-]\?\d\+\)\?\)\?\)\?\>"
    1              0.000014 syn match   javaScriptNumber           "\<\(\d\+\(_\d\+\)*\)\?\.\d\+\(_\d\+\)*\([eE][+-]\?\d\+\)\?\>"
    1              0.000011 syn match   javaScriptNumber           "\<\d\+\(_\d\+\)*\.\(\d\+\(_\d\+\)*\([eE][+-]\?\d\+\)\?\)\?\>"
    1              0.000100 syn region  javaScriptRegexpString     start=+[,(=+]\s*/[^/*]+ms=e-1,me=e-1 skip=+\\\\\|\\/+ end=+/[gimuys]\{0,2\}\s*$+ end=+/[gimuys]\{0,2\}\s*[+;.,)\]}]+me=e-1 end=+/[gimuys]\{0,2\}\s\+\/+me=e-1 contains=@htmlPreproc,javaScriptComment oneline
                            
    1              0.000016 syn keyword javaScriptConditional	if else switch
    1              0.000009 syn keyword javaScriptRepeat		while for do in of
    1              0.000014 syn keyword javaScriptBranch		break continue
    1              0.000025 syn keyword javaScriptOperator		new delete instanceof typeof
    1              0.000019 syn keyword javaScriptType		Array Boolean Date Function Number Object String RegExp
    1              0.000010 syn keyword javaScriptStatement		return with await yield
    1              0.000023 syn keyword javaScriptBoolean		true false
    1              0.000005 syn keyword javaScriptNull		null undefined
    1              0.000012 syn keyword javaScriptIdentifier	arguments this
    1              0.000010 syn keyword javaScriptLabel		case default
    1              0.000006 syn keyword javaScriptException		try catch finally throw
    1              0.000016 syn keyword javaScriptMessage		alert confirm prompt status
    1              0.000019 syn keyword javaScriptGlobal		self window top parent
    1              0.000005 syn keyword javaScriptMember		document event location 
    1              0.000009 syn keyword javaScriptDeprecated	escape unescape
    1              0.000030 syn keyword javaScriptReserved		abstract boolean byte char class const debugger double enum export extends final float from goto implements import int interface let long native package private protected public short super synchronized throws transient var volatile async
    1              0.000007 syn keyword javaScriptModifier  static
                            
    1              0.000021 syn cluster  javaScriptEmbededExpr	contains=javaScriptBoolean,javaScriptNull,javaScriptIdentifier,javaScriptStringD,javaScriptStringS,javaScriptStringT
                            
    1              0.000038 if exists("javaScript_fold")
                                syn match	javaScriptFunction	"\<function\>"
                                syn region	javaScriptFunctionFold	start="\<function\>.*[^};]$" end="^\z1}.*$" transparent fold keepend
                            
                                syn sync match javaScriptSync	grouphere javaScriptFunctionFold "\<function\>"
                                syn sync match javaScriptSync	grouphere NONE "^}"
                            
                                setlocal foldmethod=syntax
                                setlocal foldtext=getline(v:foldstart)
    1              0.000002 else
    1              0.000012     syn keyword javaScriptFunction	function
    1              0.000011     syn match	javaScriptBraces	   "[{}\[\]]"
    1              0.000008     syn match	javaScriptParens	   "[()]"
    1              0.000002 endif
                            
    1              0.000005 if main_syntax == "javascript"
                              syn sync fromstart
                              syn sync maxlines=100
                            
                              syn sync ccomment javaScriptComment
    1              0.000001 endif
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
    1              0.000008 hi def link javaScriptComment		Comment
    1              0.000003 hi def link javaScriptLineComment		Comment
    1              0.000004 hi def link javaScriptCommentTodo		Todo
    1              0.000003 hi def link javaScriptSpecial		Special
    1              0.000004 hi def link javaScriptStringS		String
    1              0.000002 hi def link javaScriptStringD		String
    1              0.000003 hi def link javaScriptStringT		String
    1              0.000007 hi def link javaScriptCharacter		Character
    1              0.000003 hi def link javaScriptSpecialCharacter	javaScriptSpecial
    1              0.000002 hi def link javaScriptNumber		Number
    1              0.000002 hi def link javaScriptConditional		Conditional
    1              0.000002 hi def link javaScriptRepeat		Repeat
    1              0.000002 hi def link javaScriptBranch		Conditional
    1              0.000003 hi def link javaScriptOperator		Operator
    1              0.000002 hi def link javaScriptType			Type
    1              0.000002 hi def link javaScriptStatement		Statement
    1              0.000002 hi def link javaScriptFunction		Keyword
    1              0.000002 hi def link javaScriptBraces		Function
    1              0.000003 hi def link javaScriptError		Error
    1              0.000003 hi def link javaScrParenError		javaScriptError
    1              0.000002 hi def link javaScriptNull			Keyword
    1              0.000002 hi def link javaScriptBoolean		Boolean
    1              0.000002 hi def link javaScriptRegexpString		String
                            
    1              0.000002 hi def link javaScriptIdentifier		Identifier
    1              0.000002 hi def link javaScriptLabel		Label
    1              0.000002 hi def link javaScriptException		Exception
    1              0.000002 hi def link javaScriptMessage		Keyword
    1              0.000002 hi def link javaScriptGlobal		Keyword
    1              0.000002 hi def link javaScriptMember		Keyword
    1              0.000002 hi def link javaScriptDeprecated		Exception 
    1              0.000002 hi def link javaScriptReserved		Keyword
    1              0.000002 hi def link javaScriptModifier		StorageClass
    1              0.000003 hi def link javaScriptDebug		Debug
    1              0.000003 hi def link javaScriptConstant		Label
    1              0.000002 hi def link javaScriptEmbed		Special
                            
                            
                            
    1              0.000008 let b:current_syntax = "javascript"
    1              0.000003 if main_syntax == 'javascript'
                              unlet main_syntax
    1              0.000030 endif
    1   0.000080   0.000030 let &cpo = s:cpo_save
    1              0.000017 unlet s:cpo_save
                            
                            " vim: ts=8

SCRIPT  /usr/share/nvim/runtime/syntax/vb.vim
Sourced 1 time
Total time:   0.004275
 Self time:   0.004275

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Visual Basic
                            " Maintainer:   Doug Kearns <dougkearns@gmail.com>
                            " Former Maintainer:    Tim Chase <vb.vim@tim.thechases.com>
                            " Former Maintainer:    Robert M. Cortopassi <cortopar@mindspring.com>
                            "       (tried multiple times to contact, but email bounced)
                            " Last Change:
                            "   2021 Nov 26  Incorporated additions from Doug Kearns
                            "   2005 May 25  Synched with work by Thomas Barthel
                            "   2004 May 30  Added a few keywords
                            
                            " This was thrown together after seeing numerous requests on the
                            " VIM and VIM-DEV mailing lists.  It is by no means complete.
                            " Send comments, suggestions and requests to the maintainer.
                            
                            " quit when a syntax file was already loaded
    1              0.000036 if exists("b:current_syntax")
                                    finish
    1              0.000001 endif
                            
                            " VB is case insensitive
    1              0.000004 syn case ignore
                            
    1              0.000027 syn keyword vbConditional If Then ElseIf Else Select Case
                            
    1              0.000014 syn keyword vbOperator AddressOf And ByRef ByVal Eqv Imp In
    1              0.000007 syn keyword vbOperator Is Like Mod Not Or To Xor
                            
    1              0.000022 syn match vbOperator "[()+.,\-/*=&]"
    1              0.000008 syn match vbOperator "[<>]=\="
    1              0.000006 syn match vbOperator "<>"
    1              0.000007 syn match vbOperator "\s\+_$"
                            
    1              0.000007 syn keyword vbBoolean  True False
    1              0.000005 syn keyword vbConst Null Nothing
                            
    1              0.000008 syn keyword vbRepeat Do For ForEach Loop Next
    1              0.000006 syn keyword vbRepeat Step To Until Wend While
                            
    1              0.000007 syn keyword vbEvents AccessKeyPress Activate ActiveRowChanged
    1              0.000005 syn keyword vbEvents AfterAddFile AfterChangeFileName AfterCloseFile
    1              0.000004 syn keyword vbEvents AfterColEdit AfterColUpdate AfterDelete
    1              0.000006 syn keyword vbEvents AfterInsert AfterLabelEdit AfterRemoveFile
    1              0.000004 syn keyword vbEvents AfterUpdate AfterWriteFile AmbientChanged
    1              0.000004 syn keyword vbEvents ApplyChanges Associate AsyncProgress
    1              0.000004 syn keyword vbEvents AsyncReadComplete AsyncReadProgress AxisActivated
    1              0.000003 syn keyword vbEvents AxisLabelActivated AxisLabelSelected
    1              0.000004 syn keyword vbEvents AxisLabelUpdated AxisSelected AxisTitleActivated
    1              0.000004 syn keyword vbEvents AxisTitleSelected AxisTitleUpdated AxisUpdated
    1              0.000004 syn keyword vbEvents BeforeClick BeforeColEdit BeforeColUpdate
    1              0.000004 syn keyword vbEvents BeforeConnect BeforeDelete BeforeInsert
    1              0.000004 syn keyword vbEvents BeforeLabelEdit BeforeLoadFile BeforeUpdate
    1              0.000003 syn keyword vbEvents BeginRequest BeginTrans ButtonClick
    1              0.000004 syn keyword vbEvents ButtonCompleted ButtonDropDown ButtonGotFocus
    1              0.000005 syn keyword vbEvents ButtonLostFocus CallbackKeyDown Change Changed
    1              0.000005 syn keyword vbEvents ChartActivated ChartSelected ChartUpdated Click
    1              0.000007 syn keyword vbEvents Close CloseQuery CloseUp ColEdit ColResize
    1              0.000005 syn keyword vbEvents Collapse ColumnClick CommitTrans Compare
    1              0.000005 syn keyword vbEvents ConfigChageCancelled ConfigChanged
    1              0.000005 syn keyword vbEvents ConfigChangedCancelled Connect ConnectionRequest
    1              0.000004 syn keyword vbEvents CurrentRecordChanged DECommandAdded
    1              0.000004 syn keyword vbEvents DECommandPropertyChanged DECommandRemoved
    1              0.000004 syn keyword vbEvents DEConnectionAdded DEConnectionPropertyChanged
    1              0.000004 syn keyword vbEvents DEConnectionRemoved DataArrival DataChanged
    1              0.000004 syn keyword vbEvents DataUpdated DateClicked DblClick Deactivate
    1              0.000004 syn keyword vbEvents DevModeChange DeviceArrival DeviceOtherEvent
    1              0.000004 syn keyword vbEvents DeviceQueryRemove DeviceQueryRemoveFailed
    1              0.000003 syn keyword vbEvents DeviceRemoveComplete DeviceRemovePending
    1              0.000004 syn keyword vbEvents Disconnect DisplayChanged Dissociate
    1              0.000004 syn keyword vbEvents DoGetNewFileName Done DonePainting DownClick
    1              0.000005 syn keyword vbEvents DragDrop DragOver DropDown EditProperty EditQuery
    1              0.000005 syn keyword vbEvents EndRequest EnterCell EnterFocus ExitFocus Expand
    1              0.000005 syn keyword vbEvents FontChanged FootnoteActivated FootnoteSelected
    1              0.000005 syn keyword vbEvents FootnoteUpdated Format FormatSize GotFocus
    1              0.000004 syn keyword vbEvents HeadClick HeightChanged Hide InfoMessage
    1              0.000004 syn keyword vbEvents IniProperties InitProperties Initialize
    1              0.000004 syn keyword vbEvents ItemActivated ItemAdded ItemCheck ItemClick
    1              0.000004 syn keyword vbEvents ItemReloaded ItemRemoved ItemRenamed
    1              0.000005 syn keyword vbEvents ItemSeletected KeyDown KeyPress KeyUp LeaveCell
    1              0.000004 syn keyword vbEvents LegendActivated LegendSelected LegendUpdated
    1              0.000004 syn keyword vbEvents LinkClose LinkError LinkExecute LinkNotify
    1              0.000004 syn keyword vbEvents LinkOpen Load LostFocus MouseDown MouseMove
    1              0.000101 syn keyword vbEvents MouseUp NodeCheck NodeClick OLECompleteDrag
    1              0.000005 syn keyword vbEvents OLEDragDrop OLEDragOver OLEGiveFeedback OLESetData
    1              0.000005 syn keyword vbEvents OLEStartDrag ObjectEvent ObjectMove OnAddNew
    1              0.000005 syn keyword vbEvents OnComm Paint PanelClick PanelDblClick PathChange
    1              0.000004 syn keyword vbEvents PatternChange PlotActivated PlotSelected
    1              0.000004 syn keyword vbEvents PlotUpdated PointActivated PointLabelActivated
    1              0.000004 syn keyword vbEvents PointLabelSelected PointLabelUpdated PointSelected
    1              0.000004 syn keyword vbEvents PointUpdated PowerQuerySuspend PowerResume
    1              0.000004 syn keyword vbEvents PowerStatusChanged PowerSuspend ProcessTag
    1              0.000004 syn keyword vbEvents ProcessingTimeout QueryChangeConfig QueryClose
    1              0.000005 syn keyword vbEvents QueryComplete QueryCompleted QueryTimeout
    1              0.000004 syn keyword vbEvents QueryUnload ReadProperties RepeatedControlLoaded
    1              0.000003 syn keyword vbEvents RepeatedControlUnloaded Reposition
    1              0.000004 syn keyword vbEvents RequestChangeFileName RequestWriteFile Resize
    1              0.000004 syn keyword vbEvents ResultsChanged RetainedProject RollbackTrans
    1              0.000004 syn keyword vbEvents RowColChange RowCurrencyChange RowResize
    1              0.000005 syn keyword vbEvents RowStatusChanged Scroll SelChange SelectionChanged
    1              0.000004 syn keyword vbEvents SendComplete SendProgress SeriesActivated
    1              0.000006 syn keyword vbEvents SeriesSelected SeriesUpdated SettingChanged Show
    1              0.000004 syn keyword vbEvents SplitChange Start StateChanged StatusUpdate
    1              0.000005 syn keyword vbEvents SysColorsChanged Terminate TimeChanged Timer
    1              0.000004 syn keyword vbEvents TitleActivated TitleSelected TitleUpdated
    1              0.000003 syn keyword vbEvents UnboundAddData UnboundDeleteRow
    1              0.000004 syn keyword vbEvents UnboundGetRelativeBookmark UnboundReadData
    1              0.000005 syn keyword vbEvents UnboundWriteData Unformat Unload UpClick Updated
    1              0.000004 syn keyword vbEvents UserEvent Validate ValidationError
    1              0.000004 syn keyword vbEvents VisibleRecordChanged WillAssociate WillChangeData
    1              0.000019 syn keyword vbEvents WillDissociate WillExecute WillUpdateRows
    1              0.000003 syn keyword vbEvents WriteProperties
                            
                            
    1              0.000030 syn keyword vbFunction Abs Array Asc AscB AscW Atn Avg BOF CBool CByte
    1              0.000007 syn keyword vbFunction CCur CDate CDbl CInt CLng CSng CStr CVDate CVErr
    1              0.000007 syn keyword vbFunction CVar CallByName Cdec Choose Chr ChrB ChrW Command
    1              0.000007 syn keyword vbFunction Cos Count CreateObject CurDir DDB Date DateAdd
    1              0.000006 syn keyword vbFunction DateDiff DatePart DateSerial DateValue Day Dir
    1              0.000006 syn keyword vbFunction DoEvents EOF Environ Error Exp FV FileAttr
    1              0.000005 syn keyword vbFunction FileDateTime FileLen FilterFix Fix Format
    1              0.000004 syn keyword vbFunction FormatCurrency FormatDateTime FormatNumber
    1              0.000072 syn keyword vbFunction FormatPercent FreeFile GetAllStrings GetAttr
    1              0.000009 syn keyword vbFunction GetAutoServerSettings GetObject GetSetting Hex
    1              0.000008 syn keyword vbFunction Hour IIf IMEStatus IPmt InStr Input InputB
    1              0.000006 syn keyword vbFunction InputBox InstrB Int IsArray IsDate IsEmpty IsError
    1              0.000005 syn keyword vbFunction IsMissing IsNull IsNumeric IsObject Join LBound
    1              0.000007 syn keyword vbFunction LCase LOF LTrim Left LeftB Len LenB LoadPicture
    1              0.000004 syn keyword vbFunction LoadResData LoadResPicture LoadResString Loc Log
    1              0.000005 syn keyword vbFunction MIRR Max Mid MidB Min Minute Month MonthName
    1              0.000006 syn keyword vbFunction MsgBox NPV NPer Now Oct PPmt PV Partition Pmt
    1              0.000005 syn keyword vbFunction QBColor RGB RTrim Rate Replace Right RightB Rnd
    1              0.000006 syn keyword vbFunction Round SLN SYD Second Seek Sgn Shell Sin Space Spc
    1              0.000005 syn keyword vbFunction Split Sqr StDev StDevP Str StrComp StrConv
    1              0.000011 syn keyword vbFunction StrReverse String Sum Switch Tab Tan Time
    1              0.000005 syn keyword vbFunction TimeSerial TimeValue Timer Trim TypeName UBound
    1              0.000011 syn keyword vbFunction UCase Val Var VarP VarType Weekday WeekdayName
    1              0.000002 syn keyword vbFunction Year
                            
    1              0.000006 syn keyword vbMethods AboutBox Accept Activate Add AddCustom AddFile
    1              0.000004 syn keyword vbMethods AddFromFile AddFromGuid AddFromString
    1              0.000005 syn keyword vbMethods AddFromTemplate AddItem AddNew AddToAddInToolbar
    1              0.000004 syn keyword vbMethods AddToolboxProgID Append AppendAppendChunk
    1              0.000005 syn keyword vbMethods AppendChunk Arrange Assert AsyncRead BatchUpdate
    1              0.000004 syn keyword vbMethods BeginQueryEdit BeginTrans Bind BuildPath
    1              0.000005 syn keyword vbMethods CanPropertyChange Cancel CancelAsyncRead
    1              0.000005 syn keyword vbMethods CancelBatch CancelUpdate CaptureImage CellText
    1              0.000005 syn keyword vbMethods CellValue Circle Clear ClearFields ClearSel
    1              0.000009 syn keyword vbMethods ClearSelCols ClearStructure Clone Close Cls
    1              0.000005 syn keyword vbMethods ColContaining CollapseAll ColumnSize CommitTrans
    1              0.000005 syn keyword vbMethods CompactDatabase Compose Connect Copy CopyFile
    1              0.000005 syn keyword vbMethods CopyFolder CopyQueryDef Count CreateDatabase
    1              0.000021 syn keyword vbMethods CreateDragImage CreateEmbed CreateField
    1              0.000005 syn keyword vbMethods CreateFolder CreateGroup CreateIndex CreateLink
    1              0.000004 syn keyword vbMethods CreatePreparedStatement CreatePropery CreateQuery
    1              0.000004 syn keyword vbMethods CreateQueryDef CreateRelation CreateTableDef
    1              0.000004 syn keyword vbMethods CreateTextFile CreateToolWindow CreateUser
    1              0.000004 syn keyword vbMethods CreateWorkspace Customize Cut Delete
    1              0.000004 syn keyword vbMethods DeleteColumnLabels DeleteColumns DeleteFile
    1              0.000004 syn keyword vbMethods DeleteFolder DeleteLines DeleteRowLabels
    1              0.000005 syn keyword vbMethods DeleteRows DeselectAll DesignerWindow DoVerb Drag
    1              0.000006 syn keyword vbMethods Draw DriveExists Edit EditCopy EditPaste EndDoc
    1              0.000005 syn keyword vbMethods EnsureVisible EstablishConnection Execute Exists
    1              0.000005 syn keyword vbMethods Expand Export ExportReport ExtractIcon Fetch
    1              0.000005 syn keyword vbMethods FetchVerbs FileExists Files FillCache Find
    1              0.000005 syn keyword vbMethods FindFirst FindItem FindLast FindNext FindPrevious
    1              0.000004 syn keyword vbMethods FolderExists Forward GetAbsolutePathName
    1              0.000005 syn keyword vbMethods GetBaseName GetBookmark GetChunk GetClipString
    1              0.000005 syn keyword vbMethods GetData GetDrive GetDriveName GetFile GetFileName
    1              0.000004 syn keyword vbMethods GetFirstVisible GetFolder GetFormat GetHeader
    1              0.000004 syn keyword vbMethods GetLineFromChar GetNumTicks GetParentFolderName
    1              0.000004 syn keyword vbMethods GetRows GetSelectedPart GetSelection
    1              0.000004 syn keyword vbMethods GetSpecialFolder GetTempName GetText
    1              0.000005 syn keyword vbMethods GetVisibleCount GoBack GoForward Hide HitTest
    1              0.000005 syn keyword vbMethods HoldFields Idle Import InitializeLabels Insert
    1              0.000004 syn keyword vbMethods InsertColumnLabels InsertColumns InsertFile
    1              0.000004 syn keyword vbMethods InsertLines InsertObjDlg InsertRowLabels
    1              0.000006 syn keyword vbMethods InsertRows Item Keys KillDoc Layout Line Lines
    1              0.000005 syn keyword vbMethods LinkExecute LinkPoke LinkRequest LinkSend Listen
    1              0.000005 syn keyword vbMethods LoadFile LoadResData LoadResPicture LoadResString
    1              0.000004 syn keyword vbMethods LogEvent MakeCompileFile MakeCompiledFile
    1              0.000004 syn keyword vbMethods MakeReplica MoreResults Move MoveData MoveFile
    1              0.000004 syn keyword vbMethods MoveFirst MoveFolder MoveLast MoveNext
    1              0.000005 syn keyword vbMethods MovePrevious NavigateTo NewPage NewPassword
    1              0.000005 syn keyword vbMethods NextRecordset OLEDrag OnAddinsUpdate OnConnection
    1              0.000005 syn keyword vbMethods OnDisconnection OnStartupComplete Open
    1              0.000004 syn keyword vbMethods OpenAsTextStream OpenConnection OpenDatabase
    1              0.000005 syn keyword vbMethods OpenQueryDef OpenRecordset OpenResultset OpenURL
    1              0.000005 syn keyword vbMethods Overlay PSet PaintPicture PastSpecialDlg Paste
    1              0.000004 syn keyword vbMethods PeekData Play Point PopulatePartial PopupMenu
    1              0.000005 syn keyword vbMethods Print PrintForm PrintReport PropertyChanged Quit
    1              0.000004 syn keyword vbMethods Raise RandomDataFill RandomFillColumns
    1              0.000004 syn keyword vbMethods RandomFillRows ReFill Read ReadAll ReadFromFile
    1              0.000004 syn keyword vbMethods ReadLine ReadProperty Rebind Refresh RefreshLink
    1              0.000004 syn keyword vbMethods RegisterDatabase ReleaseInstance Reload Remove
    1              0.000005 syn keyword vbMethods RemoveAddInFromToolbar RemoveAll RemoveItem Render
    1              0.000005 syn keyword vbMethods RepairDatabase ReplaceLine Reply ReplyAll Requery
    1              0.000003 syn keyword vbMethods ResetCustom ResetCustomLabel ResolveName
    1              0.000004 syn keyword vbMethods RestoreToolbar Resync Rollback RollbackTrans
    1              0.000004 syn keyword vbMethods RowBookmark RowContaining RowTop Save SaveAs
    1              0.000004 syn keyword vbMethods SaveFile SaveToFile SaveToOle1File SaveToolbar
    1              0.000006 syn keyword vbMethods Scale ScaleX ScaleY Scroll SelPrint SelectAll
    1              0.000005 syn keyword vbMethods SelectPart Send SendData Set SetAutoServerSettings
    1              0.000005 syn keyword vbMethods SetData SetFocus SetOption SetSelection SetSize
    1              0.000005 syn keyword vbMethods SetText SetViewport Show ShowColor ShowFont
    1              0.000004 syn keyword vbMethods ShowHelp ShowOpen ShowPrinter ShowSave
    1              0.000006 syn keyword vbMethods ShowWhatsThis SignOff SignOn Size Skip SkipLine
    1              0.000005 syn keyword vbMethods Span Split SplitContaining StartLabelEdit
    1              0.000005 syn keyword vbMethods StartLogging Stop Synchronize Tag TextHeight
    1              0.000007 syn keyword vbMethods TextWidth ToDefaults Trace TwipsToChartPart
    1              0.000004 syn keyword vbMethods TypeByChartType URLFor Update UpdateControls
    1              0.000005 syn keyword vbMethods UpdateRecord UpdateRow Upto ValidateControls Value
    1              0.000004 syn keyword vbMethods WhatsThisMode Write WriteBlankLines WriteLine
    1              0.000004 syn keyword vbMethods WriteProperty WriteTemplate ZOrder
    1              0.000004 syn keyword vbMethods rdoCreateEnvironment rdoRegisterDataSource
                            
    1              0.000007 syn keyword vbStatement Alias AppActivate As Base Beep Begin Call ChDir
    1              0.000007 syn keyword vbStatement ChDrive Close Const Date Declare DefBool DefByte
    1              0.000006 syn keyword vbStatement DefCur DefDate DefDbl DefDec DefInt DefLng DefObj
    1              0.000006 syn keyword vbStatement DefSng DefStr DefVar Deftype DeleteSetting Dim Do
    1              0.000007 syn keyword vbStatement Each ElseIf End Enum Erase Error Event Exit
    1              0.000006 syn keyword vbStatement Explicit FileCopy For ForEach Function Get GoSub
    1              0.000006 syn keyword vbStatement GoTo Gosub Implements Kill LSet Let Lib LineInput
    1              0.000007 syn keyword vbStatement Load Lock Loop Mid MkDir Name Next On OnError Open
    1              0.000006 syn keyword vbStatement Option Preserve Private Property Public Put RSet
    1              0.000005 syn keyword vbStatement RaiseEvent Randomize ReDim Redim Reset Resume
    1              0.000005 syn keyword vbStatement Return RmDir SavePicture SaveSetting Seek SendKeys
    1              0.000006 syn keyword vbStatement Sendkeys Set SetAttr Static Step Stop Sub Time
    1              0.000005 syn keyword vbStatement Type Unload Unlock Until Wend While Width With
    1              0.000002 syn keyword vbStatement Write
                            
    1              0.000009 syn keyword vbKeyword As Binary ByRef ByVal Date Empty Error Friend Get
    1              0.000007 syn keyword vbKeyword Input Is Len Lock Me Mid New Nothing Null On
    1              0.000005 syn keyword vbKeyword Option Optional ParamArray Print Private Property
    1              0.000004 syn keyword vbKeyword Public PublicNotCreateable OnNewProcessSingleUse
    1              0.000005 syn keyword vbKeyword InSameProcessMultiUse GlobalMultiUse Resume Seek
    1              0.000005 syn keyword vbKeyword Set Static Step String Time WithEvents
                            
    1              0.000004 syn keyword vbTodo contained    TODO
                            
                            "Datatypes
    1              0.000007 syn keyword vbTypes Boolean Byte Currency Date Decimal Double Empty
    1              0.000006 syn keyword vbTypes Integer Long Object Single String Variant
                            
                            "VB defined values
    1              0.000009 syn keyword vbDefine dbBigInt dbBinary dbBoolean dbByte dbChar
    1              0.000007 syn keyword vbDefine dbCurrency dbDate dbDecimal dbDouble dbFloat
    1              0.000005 syn keyword vbDefine dbGUID dbInteger dbLong dbLongBinary dbMemo
    1              0.000005 syn keyword vbDefine dbNumeric dbSingle dbText dbTime dbTimeStamp
    1              0.000003 syn keyword vbDefine dbVarBinary
                            
                            "VB defined values
    1              0.000005 syn keyword vbDefine vb3DDKShadow vb3DFace vb3DHighlight vb3DLight
    1              0.000004 syn keyword vbDefine vb3DShadow vbAbort vbAbortRetryIgnore
    1              0.000004 syn keyword vbDefine vbActiveBorder vbActiveTitleBar vbAlias
    1              0.000004 syn keyword vbDefine vbApplicationModal vbApplicationWorkspace
    1              0.000004 syn keyword vbDefine vbAppTaskManager vbAppWindows vbArchive vbArray
    1              0.000005 syn keyword vbDefine vbBack vbBinaryCompare vbBlack vbBlue vbBoolean
    1              0.000005 syn keyword vbDefine vbButtonFace vbButtonShadow vbButtonText vbByte
    1              0.000005 syn keyword vbDefine vbCalGreg vbCalHijri vbCancel vbCr vbCritical
    1              0.000004 syn keyword vbDefine vbCrLf vbCurrency vbCyan vbDatabaseCompare
    1              0.000004 syn keyword vbDefine vbDataObject vbDate vbDecimal vbDefaultButton1
    1              0.000004 syn keyword vbDefine vbDefaultButton2 vbDefaultButton3 vbDefaultButton4
    1              0.000004 syn keyword vbDefine vbDesktop vbDirectory vbDouble vbEmpty vbError
    1              0.000004 syn keyword vbDefine vbExclamation vbFirstFourDays vbFirstFullWeek
    1              0.000004 syn keyword vbDefine vbFirstJan1 vbFormCode vbFormControlMenu
    1              0.000004 syn keyword vbDefine vbFormFeed vbFormMDIForm vbFriday vbFromUnicode
    1              0.000005 syn keyword vbDefine vbGrayText vbGreen vbHidden vbHide vbHighlight
    1              0.000005 syn keyword vbDefine vbHighlightText vbHiragana vbIgnore vbIMEAlphaDbl
    1              0.000004 syn keyword vbDefine vbIMEAlphaSng vbIMEDisable vbIMEHiragana
    1              0.000004 syn keyword vbDefine vbIMEKatakanaDbl vbIMEKatakanaSng vbIMEModeAlpha
    1              0.000004 syn keyword vbDefine vbIMEModeAlphaFull vbIMEModeDisable
    1              0.000003 syn keyword vbDefine vbIMEModeHangul vbIMEModeHangulFull
    1              0.000004 syn keyword vbDefine vbIMEModeHiragana vbIMEModeKatakana
    1              0.000004 syn keyword vbDefine vbIMEModeKatakanaHalf vbIMEModeNoControl
    1              0.000005 syn keyword vbDefine vbIMEModeOff vbIMEModeOn vbIMENoOp vbIMEOff
    1              0.000004 syn keyword vbDefine vbIMEOn vbInactiveBorder vbInactiveCaptionText
    1              0.000004 syn keyword vbDefine vbInactiveTitleBar vbInfoBackground vbInformation
    1              0.000005 syn keyword vbDefine vbInfoText vbInteger vbKatakana vbKey0 vbKey1
    1              0.000007 syn keyword vbDefine vbKey2 vbKey3 vbKey4 vbKey5 vbKey6 vbKey7 vbKey8
    1              0.000005 syn keyword vbDefine vbKey9 vbKeyA vbKeyAdd vbKeyB vbKeyBack vbKeyC
    1              0.000004 syn keyword vbDefine vbKeyCancel vbKeyCapital vbKeyClear vbKeyControl
    1              0.000005 syn keyword vbDefine vbKeyD vbKeyDecimal vbKeyDelete vbKeyDivide
    1              0.000005 syn keyword vbDefine vbKeyDown vbKeyE vbKeyEnd vbKeyEscape vbKeyExecute
    1              0.000005 syn keyword vbDefine vbKeyF vbKeyF1 vbKeyF10 vbKeyF11 vbKeyF12 vbKeyF13
    1              0.000005 syn keyword vbDefine vbKeyF14 vbKeyF15 vbKeyF16 vbKeyF2 vbKeyF3 vbKeyF4
    1              0.000004 syn keyword vbDefine vbKeyF5 vbKeyF6 vbKeyF7 vbKeyF8 vbKeyF9 vbKeyG
    1              0.000005 syn keyword vbDefine vbKeyH vbKeyHelp vbKeyHome vbKeyI vbKeyInsert
    1              0.000005 syn keyword vbDefine vbKeyJ vbKeyK vbKeyL vbKeyLButton vbKeyLeft vbKeyM
    1              0.000005 syn keyword vbDefine vbKeyMButton vbKeyMenu vbKeyMultiply vbKeyN
    1              0.000004 syn keyword vbDefine vbKeyNumlock vbKeyNumpad0 vbKeyNumpad1
    1              0.000004 syn keyword vbDefine vbKeyNumpad2 vbKeyNumpad3 vbKeyNumpad4
    1              0.000004 syn keyword vbDefine vbKeyNumpad5 vbKeyNumpad6 vbKeyNumpad7
    1              0.000004 syn keyword vbDefine vbKeyNumpad8 vbKeyNumpad9 vbKeyO vbKeyP
    1              0.000005 syn keyword vbDefine vbKeyPageDown vbKeyPageUp vbKeyPause vbKeyPrint
    1              0.000004 syn keyword vbDefine vbKeyQ vbKeyR vbKeyRButton vbKeyReturn vbKeyRight
    1              0.000004 syn keyword vbDefine vbKeyS vbKeySelect vbKeySeparator vbKeyShift
    1              0.000004 syn keyword vbDefine vbKeySnapshot vbKeySpace vbKeySubtract vbKeyT
    1              0.000005 syn keyword vbDefine vbKeyTab vbKeyU vbKeyUp vbKeyV vbKeyW vbKeyX
    1              0.000005 syn keyword vbDefine vbKeyY vbKeyZ vbLf vbLong vbLowerCase vbMagenta
    1              0.000004 syn keyword vbDefine vbMaximizedFocus vbMenuBar vbMenuText
    1              0.000005 syn keyword vbDefine vbMinimizedFocus vbMinimizedNoFocus vbMonday
    1              0.000004 syn keyword vbDefine vbMsgBox vbMsgBoxHelpButton vbMsgBoxRight
    1              0.000004 syn keyword vbDefine vbMsgBoxRtlReading vbMsgBoxSetForeground
    1              0.000005 syn keyword vbDefine vbMsgBoxText vbNarrow vbNewLine vbNo vbNormal
    1              0.000005 syn keyword vbDefine vbNormalFocus vbNormalNoFocus vbNull vbNullChar
    1              0.000004 syn keyword vbDefine vbNullString vbObject vbObjectError vbOK
    1              0.000004 syn keyword vbDefine vbOKCancel vbOKOnly vbProperCase vbQuestion
    1              0.000005 syn keyword vbDefine vbReadOnly vbRed vbRetry vbRetryCancel vbSaturday
    1              0.000004 syn keyword vbDefine vbScrollBars vbSingle vbString vbSunday vbSystem
    1              0.000004 syn keyword vbDefine vbSystemModal vbTab vbTextCompare vbThursday
    1              0.000005 syn keyword vbDefine vbTitleBarText vbTuesday vbUnicode vbUpperCase
    1              0.000004 syn keyword vbDefine vbUseSystem vbUseSystemDayOfWeek vbVariant
    1              0.000005 syn keyword vbDefine vbVerticalTab vbVolume vbWednesday vbWhite vbWide
    1              0.000004 syn keyword vbDefine vbWindowBackground vbWindowFrame vbWindowText
    1              0.000004 syn keyword vbDefine vbYellow vbYes vbYesNo vbYesNoCancel
                            
                            "Numbers
                            "integer number, or floating point number without a dot.
    1              0.000018 syn match vbNumber "\<\d\+\>"
                            "floating point number, with dot
    1              0.000008 syn match vbNumber "\<\d\+\.\d*\>"
                            "floating point number, starting with a dot
    1              0.000005 syn match vbNumber "\.\d\+\>"
                            "syn match  vbNumber            "{[[:xdigit:]-]\+}\|&[hH][[:xdigit:]]\+&"
                            "syn match  vbNumber            ":[[:xdigit:]]\+"
                            "syn match  vbNumber            "[-+]\=\<\d\+\>"
    1              0.000076 syn match  vbFloat              "[-+]\=\<\d\+[eE][\-+]\=\d\+"
    1              0.000016 syn match  vbFloat              "[-+]\=\<\d\+\.\d*\([eE][\-+]\=\d\+\)\="
    1              0.000014 syn match  vbFloat              "[-+]\=\<\.\d\+\([eE][\-+]\=\d\+\)\="
                            
                            " String and Character constants
    1              0.000030 syn region  vbString		start=+"+  end=+"\|$+
    1              0.000022 syn region  vbComment		start="\(^\|\s\)REM\s" end="$" contains=vbTodo
    1              0.000015 syn region  vbComment		start="\(^\|\s\)\'"   end="$" contains=vbTodo
    1              0.000008 syn match   vbLineLabel		"^\h\w\+:"
    1              0.000015 syn match   vbLineNumber	"^\d\+\(:\|\s\|$\)"
    1              0.000012 syn match   vbTypeSpecifier  "\<\a\w*[@\$%&!#]"ms=s+1
    1              0.000011 syn match   vbTypeSpecifier  "#[a-zA-Z0-9]"me=e-1
                            " Conditional Compilation
    1              0.000007 syn match  vbPreProc "^#const\>"
    1              0.000014 syn region vbPreProc matchgroup=PreProc start="^#if\>"     end="\<then\>" transparent contains=TOP
    1              0.000010 syn region vbPreProc matchgroup=PreProc start="^#elseif\>" end="\<then\>" transparent contains=TOP
    1              0.000006 syn match  vbPreProc "^#else\>"
    1              0.000007 syn match  vbPreProc "^#end\s*if\>"
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
    1              0.000026 hi def link vbBoolean           Boolean
    1              0.000005 hi def link vbLineNumber        Comment
    1              0.000002 hi def link vbLineLabel         Comment
    1              0.000002 hi def link vbComment           Comment
    1              0.000005 hi def link vbConditional       Conditional
    1              0.000003 hi def link vbConst             Constant
    1              0.000006 hi def link vbDefine            Constant
    1              0.000004 hi def link vbError             Error
    1              0.000003 hi def link vbFunction          Identifier
    1              0.000003 hi def link vbIdentifier        Identifier
    1              0.000003 hi def link vbNumber            Number
    1              0.000002 hi def link vbFloat             Float
    1              0.000002 hi def link vbMethods           PreProc
    1              0.000004 hi def link vbOperator          Operator
    1              0.000002 hi def link vbRepeat            Repeat
    1              0.000002 hi def link vbString            String
    1              0.000003 hi def link vbStatement         Statement
    1              0.000002 hi def link vbKeyword           Statement
    1              0.000002 hi def link vbEvents            Special
    1              0.000003 hi def link vbTodo              Todo
    1              0.000002 hi def link vbTypes             Type
    1              0.000002 hi def link vbTypeSpecifier     Type
    1              0.000002 hi def link vbPreProc           PreProc
                            
    1              0.000024 let b:current_syntax = "vb"
                            
                            " vim: ts=8

SCRIPT  /usr/share/nvim/runtime/syntax/css.vim
Sourced 1 time
Total time:   0.036078
 Self time:   0.036057

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Cascading Style Sheets
                            " Previous Contributor List:
                            "               Jules Wang      <w.jq0722@gmail.com>
                            "               Claudio Fleiner <claudio@fleiner.com>
                            "               Yeti            (Add full CSS2, HTML4 support)
                            "               Nikolai Weibull (Add CSS2 support)
                            " URL:          https://github.com/vim-language-dept/css-syntax.vim
                            " Maintainer:   Jay Sitter <jay@jaysitter.com>
                            " Last Change:  2024 Mar 2
                            
                            " quit when a syntax file was already loaded
    1              0.000015 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'css'
    1              0.000007 elseif exists("b:current_syntax") && b:current_syntax == "css"
                              finish
    1              0.000001 endif
                            
    1              0.000008 let s:cpo_save = &cpo
    1   0.000031   0.000020 set cpo&vim
                            
    1              0.000003 syn case ignore
                            " Add dash to allowed keyword characters.
    1              0.000012 syn iskeyword @,48-57,_,192-255,-
                            
                            " HTML4 tags
    1              0.000011 syn keyword cssTagName abbr address area a b base
    1              0.000006 syn keyword cssTagName bdo blockquote body br button
    1              0.000007 syn keyword cssTagName caption cite code col colgroup dd del
    1              0.000006 syn keyword cssTagName dfn div dl dt em fieldset form
    1              0.000006 syn keyword cssTagName h1 h2 h3 h4 h5 h6 head hr html img i
    1              0.000006 syn keyword cssTagName iframe input ins isindex kbd label legend li
    1              0.000005 syn keyword cssTagName link map menu meta noscript ol optgroup
    1              0.000007 syn keyword cssTagName option p param picture pre q s samp script small
    1              0.000005 syn keyword cssTagName span strong sub sup tbody td
    1              0.000006 syn keyword cssTagName textarea tfoot th thead title tr ul u var
    1              0.000003 syn keyword cssTagName object svg
    1              0.000013 syn match   cssTagName /\<select\>\|\<style\>\|\<table\>/
                            
                            " 34 HTML5 tags
    1              0.000007 syn keyword cssTagName article aside audio bdi canvas command data
    1              0.000006 syn keyword cssTagName datalist details dialog embed figcaption figure footer
    1              0.000006 syn keyword cssTagName header hgroup keygen main mark menuitem meter nav
    1              0.000005 syn keyword cssTagName output progress rt rp ruby section
    1              0.000005 syn keyword cssTagName source summary time track video wbr
                            
                            " Tags not supported in HTML5
                            " acronym applet basefont big center dir
                            " font frame frameset noframes strike tt
                            
    1              0.000005 syn match cssTagName "\*"
                            
                            " selectors
    1              0.000007 syn match cssSelectorOp "[,>+~]"
    1              0.000008 syn match cssSelectorOp2 "[~|^$*]\?=" contained
    1              0.000018 syn region cssAttributeSelector matchgroup=cssSelectorOp start="\[" end="]" contains=cssUnicodeEscape,cssSelectorOp2,cssStringQ,cssStringQQ
                            
                            " .class and #id
    1              0.000011 syn match cssClassName "\.-\=[A-Za-z_][A-Za-z0-9_-]*" contains=cssClassNameDot
    1              0.000004 syn match cssClassNameDot contained '\.'
                            
    1              0.000002 try
    1              0.000013 syn match cssIdentifier "#[A-Za-z√Ä-√ø_@][A-Za-z√Ä-√ø0-9_@-]*"
                            catch /^.*/
                            syn match cssIdentifier "#[A-Za-z_@][A-Za-z0-9_@-]*"
    1              0.000002 endtry
                            
                            " digits
    1              0.000017 syn match cssValueInteger contained "[-+]\=\d\+" contains=cssUnitDecorators
    1              0.000009 syn match cssValueNumber contained "[-+]\=\d\+\(\.\d*\)\=" contains=cssUnitDecorators
    1              0.000308 syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=\(mm\|cm\|in\|pt\|pc\|em\|ex\|px\|rem\|dpi\|dppx\|dpcm\|fr\|vw\|vh\|vmin\|vmax\|ch\)\>" contains=cssUnitDecorators
    1              0.000010 syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=%" contains=cssUnitDecorators
    1              0.000014 syn match cssValueAngle contained "[-+]\=\d\+\(\.\d*\)\=\(deg\|grad\|rad\)\>" contains=cssUnitDecorators
    1              0.000029 syn match cssValueTime contained "+\=\d\+\(\.\d*\)\=\(ms\|s\)\>" contains=cssUnitDecorators
    1              0.000009 syn match cssValueFrequency contained "+\=\d\+\(\.\d*\)\=\(Hz\|kHz\)\>" contains=cssUnitDecorators
                            
                            " The 16 basic color names
    1              0.000012 syn keyword cssColor contained aqua black blue fuchsia gray green lime maroon navy olive purple red silver teal yellow
                            
                            " 130 more color names
    1              0.000004 syn keyword cssColor contained aliceblue antiquewhite aquamarine azure
    1              0.000005 syn keyword cssColor contained beige bisque blanchedalmond blueviolet brown burlywood
    1              0.000008 syn keyword cssColor contained cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan
    1              0.000010 syn match cssColor contained /\<dark\(blue\|cyan\|goldenrod\|gray\|green\|grey\|khaki\)\>/
    1              0.000014 syn match cssColor contained /\<dark\(magenta\|olivegreen\|orange\|orchid\|red\|salmon\|seagreen\)\>/
    1              0.000007 syn match cssColor contained /\<darkslate\(blue\|gray\|grey\)\>/
    1              0.000006 syn match cssColor contained /\<dark\(turquoise\|violet\)\>/
    1              0.000043 syn keyword cssColor contained deeppink deepskyblue dimgray dimgrey dodgerblue firebrick
    1              0.000005 syn keyword cssColor contained floralwhite forestgreen gainsboro ghostwhite gold
    1              0.000005 syn keyword cssColor contained goldenrod greenyellow grey honeydew hotpink
    1              0.000006 syn keyword cssColor contained indianred indigo ivory khaki lavender lavenderblush lawngreen
    1              0.000004 syn keyword cssColor contained lemonchiffon limegreen linen magenta
    1              0.000014 syn match cssColor contained /\<light\(blue\|coral\|cyan\|goldenrodyellow\|gray\|green\)\>/
    1              0.000009 syn match cssColor contained /\<light\(grey\|pink\|salmon\|seagreen\|skyblue\|yellow\)\>/
    1              0.000011 syn match cssColor contained /\<light\(slategray\|slategrey\|steelblue\)\>/
    1              0.000009 syn match cssColor contained /\<medium\(aquamarine\|blue\|orchid\|purple\|seagreen\)\>/
    1              0.000017 syn match cssColor contained /\<medium\(slateblue\|springgreen\|turquoise\|violetred\)\>/
    1              0.000006 syn keyword cssColor contained midnightblue mintcream mistyrose moccasin navajowhite
    1              0.000005 syn keyword cssColor contained oldlace olivedrab orange orangered orchid
    1              0.000008 syn match cssColor contained /\<pale\(goldenrod\|green\|turquoise\|violetred\)\>/
    1              0.000005 syn keyword cssColor contained papayawhip peachpuff peru pink plum powderblue
    1              0.000005 syn keyword cssColor contained rosybrown royalblue rebeccapurple saddlebrown salmon
    1              0.000005 syn keyword cssColor contained sandybrown seagreen seashell sienna skyblue slateblue
    1              0.000005 syn keyword cssColor contained slategray slategrey snow springgreen steelblue tan
    1              0.000014 syn keyword cssColor contained thistle tomato turquoise violet wheat
    1              0.000003 syn keyword cssColor contained whitesmoke yellowgreen
                            
                            " FIXME: These are actually case-insensitive too, but (a) specs recommend using
                            " mixed-case (b) it's hard to highlight the word `Background' correctly in
                            " all situations
    1              0.000003 syn case match
    1              0.000013 syn keyword cssColor contained ActiveBorder ActiveCaption AppWorkspace ButtonFace ButtonHighlight ButtonShadow ButtonText CaptionText GrayText Highlight HighlightText InactiveBorder InactiveCaption InactiveCaptionText InfoBackground InfoText Menu MenuText Scrollbar ThreeDDarkShadow ThreeDFace ThreeDHighlight ThreeDLightShadow ThreeDShadow Window WindowFrame WindowText Background
    1              0.000001 syn case ignore
                            
    1              0.000009 syn match cssImportant contained "!\s*important\>"
    1              0.000011 syn match cssCustomProp contained "\<--[a-zA-Z0-9-_]*\>"
                            
    1              0.000005 syn match cssColor contained "\<transparent\>"
    1              0.000005 syn match cssColor contained "\<currentColor\>"
    1              0.000004 syn match cssColor contained "\<white\>"
    1              0.000007 syn match cssColor contained "#\x\{3,4\}\>" contains=cssUnitDecorators
    1              0.000005 syn match cssColor contained "#\x\{6\}\>" contains=cssUnitDecorators
    1              0.000005 syn match cssColor contained "#\x\{8\}\>" contains=cssUnitDecorators
                            
    1              0.000020 syn region cssURL contained matchgroup=cssFunctionName start="\<\(uri\|url\|local\|format\)\s*(" end=")" contains=cssStringQ,cssStringQQ oneline
    1              0.002350 syn region cssMathGroup contained matchgroup=cssMathParens start="(" end=")" containedin=cssFunction,cssMathGroup contains=cssCustomProp,cssValue.*,cssFunction,cssColor,cssStringQ,cssStringQQ oneline
    1              0.002010 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(var\|calc\)\s*(" end=")" contains=cssCustomProp,cssValue.*,cssFunction,cssURL,cssColor,cssStringQ,cssStringQQ oneline
    1              0.000069 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgb\|clip\|attr\|counter\|rect\|cubic-bezier\|steps\)\s*(" end=")" oneline  contains=cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma
    1              0.000017 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgba\|hsl\|hsla\|color-stop\|from\|to\)\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma,cssFunction
    1              0.000019 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(linear-\|radial-\|conic-\)\=\gradient\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunction,cssGradientAttr,cssFunctionComma
    1              0.000034 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(matrix\(3d\)\=\|scale\(3d\|X\|Y\|Z\)\=\|translate\(3d\|X\|Y\|Z\)\=\|skew\(X\|Y\)\=\|rotate\(3d\|X\|Y\|Z\)\=\|perspective\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
    1              0.000023 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(blur\|brightness\|contrast\|drop-shadow\|grayscale\|hue-rotate\|invert\|opacity\|saturate\|sepia\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
    1              0.000010 syn keyword cssGradientAttr contained top bottom left right cover center middle ellipse at
    1              0.000004 syn match cssFunctionComma contained ","
                            
                            " Common Prop and Attr
    1              0.000007 syn keyword cssCommonAttr contained auto none inherit all default normal
    1              0.000005 syn keyword cssCommonAttr contained top bottom center stretch hidden visible
    1              0.000007 syn match cssCommonAttr contained "\<\(max-\|min-\|fit-\)content\>"
                            "------------------------------------------------
                            " CSS Animations
                            " http://www.w3.org/TR/css3-animations/
    1              0.000020 syn match cssAnimationProp contained "\<animation\(-\(delay\|direction\|duration\|fill-mode\|name\|play-state\|timing-function\|iteration-count\)\)\=\>"
                            
                            " animation-direction attributes
    1              0.000004 syn keyword cssAnimationAttr contained alternate reverse
    1              0.000008 syn match cssAnimationAttr contained "\<alternate-reverse\>"
                            
                            " animation-fill-mode attributes
    1              0.000004 syn keyword cssAnimationAttr contained forwards backwards both
                            
                            " animation-play-state attributes
    1              0.000003 syn keyword cssAnimationAttr contained running paused
                            
                            " animation-iteration-count attributes
    1              0.000003 syn keyword cssAnimationAttr contained infinite
                            "------------------------------------------------
                            "  CSS Backgrounds and Borders Module Level 3
                            "  http://www.w3.org/TR/css3-background/
    1              0.000046 syn match cssBackgroundProp contained "\<background\(-\(attachment\|clip\|color\|image\|origin\|position\|repeat\|size\)\)\=\>"
                            " background-attachment attributes
    1              0.000006 syn keyword cssBackgroundAttr contained scroll fixed local
                            
                            " background-position attributes
    1              0.000005 syn keyword cssBackgroundAttr contained left center right top bottom
                            
                            " background-repeat attributes
    1              0.000005 syn match cssBackgroundAttr contained "\<no-repeat\>"
    1              0.000010 syn match cssBackgroundAttr contained "\<repeat\(-[xy]\)\=\>"
                            
                            " background-size attributes
    1              0.000004 syn keyword cssBackgroundAttr contained cover contain
                            
    1              0.000011 syn match cssBorderProp contained "\<border\(-\(top\|right\|bottom\|left\)\)\=\(-\(width\|color\|style\)\)\=\>"
    1              0.000009 syn match cssBorderProp contained "\<border\(-\(top\|bottom\)-\(left\|right\)\)\=-radius\>"
    1              0.000018 syn match cssBorderProp contained "\<border-\(inline\|block\)\(-\(start\|end\)\)\=\(-\(style\|width\|color\)\)\=\>"
    1              0.000031 syn match cssBorderProp contained "\<border-\(start\|end\)-\(start\|end\)-radius\>"
    1              0.000009 syn match cssBorderProp contained "\<border-image\(-\(outset\|repeat\|slice\|source\|width\)\)\=\>"
    1              0.000006 syn match cssBorderProp contained "\<box-decoration-break\>"
    1              0.000004 syn match cssBorderProp contained "\<box-shadow\>"
                            
                            " border-image attributes
    1              0.000005 syn keyword cssBorderAttr contained stretch round fill
                            
                            " border-style attributes
    1              0.000007 syn keyword cssBorderAttr contained dotted dashed solid double groove ridge inset outset
                            
                            " border-width attributes
    1              0.000004 syn keyword cssBorderAttr contained thin thick medium
                            
                            " box-decoration-break attributes
    1              0.000003 syn keyword cssBorderAttr contained clone slice
                            "------------------------------------------------
                            
    1              0.000008 syn match cssBoxProp contained "\<padding\(-\(top\|right\|bottom\|left\)\)\=\>"
    1              0.000007 syn match cssBoxProp contained "\<margin\(-\(top\|right\|bottom\|left\)\)\=\>"
    1              0.000012 syn match cssBoxProp contained "\<\(margin\|padding\)\(-\(inline\|block\)\(-\(start\|end\)\)\)\=\>"
    1              0.000016 syn match cssBoxProp contained "\<overflow\(-\(x\|y\|style\)\)\=\>"
    1              0.000053 syn match cssBoxProp contained "\<rotation\(-point\)\=\>"
    1              0.000005 syn keyword cssBoxAttr contained visible hidden scroll auto
    1              0.000006 syn match cssBoxAttr contained "\<no-\(display\|content\)\>"
                            
    1              0.000003 syn keyword cssCascadeProp contained all
    1              0.000005 syn keyword cssCascadeAttr contained initial unset revert
                            
    1              0.000003 syn keyword cssColorProp contained opacity
    1              0.000005 syn match cssColorProp contained "\<color-profile\>"
    1              0.000006 syn match cssColorProp contained "\<rendering-intent\>"
                            
                            
    1              0.000007 syn match cssDimensionProp contained "\<\(min\|max\)-\(width\|height\)\>"
    1              0.000003 syn keyword cssDimensionProp contained height
    1              0.000002 syn keyword cssDimensionProp contained width
                            
                            " CSS Flexible Box Layout Module Level 1
                            " http://www.w3.org/TR/css3-flexbox/
                            " CSS Box Alignment Module Level 3
                            " http://www.w3.org/TR/css-align-3/
    1              0.000010 syn match cssFlexibleBoxProp contained "\<flex\(-\(direction\|wrap\|flow\|grow\|shrink\|basis\)\)\=\>"
    1              0.000009 syn match cssFlexibleBoxProp contained "\<\(align\|justify\)\(-\(items\|self\|content\)\)\=\>"
    1              0.000003 syn keyword cssFlexibleBoxProp contained order
                            
    1              0.000008 syn match cssFlexibleBoxAttr contained "\<\(row\|column\|wrap\)\(-reverse\)\=\>"
    1              0.000006 syn keyword cssFlexibleBoxAttr contained nowrap stretch baseline center
    1              0.000006 syn match cssFlexibleBoxAttr contained "\<flex\(-\(start\|end\)\)\=\>"
    1              0.000007 syn match cssFlexibleBoxAttr contained "\<space\(-\(between\|around\|evenly\)\)\=\>"
                            
                            " CSS Fonts Module Level 3
                            " http://www.w3.org/TR/css-fonts-3/
    1              0.000023 syn match cssFontProp contained "\<font\(-\(display\|family\|feature-settings\|kerning\|language-override\|size\(-adjust\)\=\|stretch\|style\|synthesis\|variant\(-\(alternates\|caps\|east-asian\|ligatures\|numeric\|position\)\)\=\|weight\)\)\=\>"
                            
                            " font attributes
    1              0.000004 syn keyword cssFontAttr contained icon menu caption
    1              0.000005 syn match cssFontAttr contained "\<message-box\>"
    1              0.000005 syn match cssFontAttr contained "\<status-bar\>"
    1              0.000003 syn keyword cssFontAttr contained larger smaller
    1              0.000007 syn match cssFontAttr contained "\<\(x\{1,2\}-\)\=\(large\|small\)\>"
    1              0.000006 syn match cssFontAttr contained "\<small-\(caps\|caption\)\>"
                            " font-family attributes
    1              0.000006 syn keyword cssFontAttr contained sans-serif serif cursive fantasy monospace
                            " font-feature-settings attributes
    1              0.000003 syn keyword cssFontAttr contained on off
                            " font-stretch attributes
    1              0.000009 syn match cssFontAttr contained "\<\(\(ultra\|extra\|semi\)-\)\=\(condensed\|expanded\)\>"
                            " font-style attributes
    1              0.000003 syn keyword cssFontAttr contained italic oblique
                            " font-synthesis attributes
    1              0.000003 syn keyword cssFontAttr contained weight style
                            " font-weight attributes
    1              0.000003 syn keyword cssFontAttr contained bold bolder lighter
                            " font-display attributes
    1              0.000005 syn keyword cssFontAttr contained auto block swap fallback optional
                            " TODO: font-variant-* attributes
                            "------------------------------------------------
                            
                            " Webkit specific property/attributes
    1              0.000005 syn match cssFontProp contained "\<font-smooth\>"
    1              0.000007 syn match cssFontAttr contained "\<\(subpixel-\)\=\antialiased\>"
                            
                            
                            " CSS Multi-column Layout Module
                            " http://www.w3.org/TR/css3-multicol/
    1              0.000007 syn match cssMultiColumnProp contained "\<break-\(after\|before\|inside\)\>"
    1              0.000012 syn match cssMultiColumnProp contained "\<column-\(count\|fill\|gap\|rule\(-\(color\|style\|width\)\)\=\|span\|width\)\>"
    1              0.000003 syn keyword cssMultiColumnProp contained columns
    1              0.000004 syn keyword cssMultiColumnAttr contained balance medium
    1              0.000005 syn keyword cssMultiColumnAttr contained always left right page column
    1              0.000006 syn match cssMultiColumnAttr contained "\<avoid\(-\(page\|column\)\)\=\>"
                            
                            " http://www.w3.org/TR/css3-break/#page-break
    1              0.000008 syn match cssMultiColumnProp contained "\<page\(-break-\(before\|after\|inside\)\)\=\>"
                            
                            " http://www.w3.org/TR/SVG11/interact.html
    1              0.000006 syn match cssInteractProp contained "\<pointer-events\>"
    1              0.000008 syn match cssInteractAttr contained "\<\(visible\)\=\(Painted\|Fill\|Stroke\)\=\>"
                            
                            " TODO find following items in w3c docs.
    1              0.000005 syn keyword cssGeneratedContentProp contained quotes crop
    1              0.000007 syn match cssGeneratedContentProp contained "\<counter-\(reset\|increment\)\>"
    1              0.000005 syn match cssGeneratedContentProp contained "\<move-to\>"
    1              0.000009 syn match cssGeneratedContentProp contained "\<page-policy\>"
    1              0.000011 syn match cssGeneratedContentAttr contained "\<\(no-\)\=\(open\|close\)-quote\>"
                            
                            " https://www.w3.org/TR/css-grid-1/
    1              0.000006 syn match cssGridProp contained "\<grid\>"
    1              0.000008 syn match cssGridProp contained "\<grid-template\(-\(columns\|rows\|areas\)\)\=\>"
    1              0.000009 syn match cssGridProp contained "\<\(grid-\)\=\(column\|row\)\(-\(start\|end\|gap\)\)\=\>"
    1              0.000006 syn match cssGridProp contained "\<grid-\(area\|gap\)\>"
    1              0.000004 syn match cssGridProp contained "\<gap\>"
    1              0.000007 syn match cssGridProp contained "\<grid-auto-\(flow\|rows\|columns\)\>"
                            
    1              0.000008 syn match cssHyerlinkProp contained "\<target\(-\(name\|new\|position\)\)\=\>"
                            
    1              0.000011 syn match cssListProp contained "\<list-style\(-\(type\|position\|image\)\)\=\>"
    1              0.000008 syn match cssListAttr contained "\<\(lower\|upper\)-\(roman\|alpha\|greek\|latin\)\>"
    1              0.000007 syn match cssListAttr contained "\<\(hiragana\|katakana\)\(-iroha\)\=\>"
    1              0.000011 syn match cssListAttr contained "\<\(decimal\(-leading-zero\)\=\|cjk-ideographic\)\>"
    1              0.000007 syn keyword cssListAttr contained disc circle square hebrew armenian georgian
    1              0.000003 syn keyword cssListAttr contained inside outside
                            
                            " object-fit https://www.w3.org/TR/css-images-3/#the-object-fit
    1              0.000007 syn match cssObjectProp contained "\<object-\(fit\|position\)\>"
    1              0.000006 syn keyword cssObjectAttr contained fill contain cover scale-down
                            
    1              0.000006 syn keyword cssPositioningProp contained bottom clear clip display float left
    1              0.000005 syn keyword cssPositioningProp contained position right top visibility
    1              0.000004 syn match cssPositioningProp contained "\<z-index\>"
    1              0.000005 syn keyword cssPositioningAttr contained block compact grid
    1              0.000016 syn match cssPositioningAttr contained "\<table\(-\(row-group\|\(header\|footer\)-group\|row\|column\(-group\)\=\|cell\|caption\)\)\=\>"
    1              0.000005 syn keyword cssPositioningAttr contained left right both
    1              0.000028 syn match cssPositioningAttr contained "\<list-item\>"
    1              0.000010 syn match cssPositioningAttr contained "\<inline\(-\(block\|box\|table\|grid\|flex\)\)\=\>"
    1              0.000005 syn match cssPositioningAttr contained "\<flow\(-root\)\=\>"
    1              0.000006 syn keyword cssPositioningAttr contained static relative absolute fixed subgrid sticky
                            
    1              0.000006 syn keyword cssPrintAttr contained landscape portrait crop cross always
                            
    1              0.000019 syn match cssTableProp contained "\<\(caption-side\|table-layout\|border-collapse\|border-spacing\|empty-cells\)\>"
    1              0.000010 syn keyword cssTableAttr contained fixed collapse separate show hide once always
                            
                            
    1              0.000007 syn keyword cssTextProp contained color direction hyphens
    1              0.000027 syn match cssTextProp "\<\(\(word\|letter\)-spacing\|text\(-\(decoration\|transform\|align\|index\|shadow\)\)\=\|vertical-align\|unicode-bidi\|line-height\)\>"
    1              0.000015 syn match cssTextProp contained "\<text-\(justify\|outline\|warp\|align-last\|size-adjust\|rendering\|stroke\|indent\)\>"
    1              0.000012 syn match cssTextProp contained "\<\(word\|line\)-break\|\(overflow\|word\)-wrap\>"
    1              0.000032 syn match cssTextProp contained "\<white-space\>"
    1              0.000014 syn match cssTextProp contained "\<hanging-punctuation\>"
    1              0.000004 syn match cssTextProp contained "\<tab-size\>"
    1              0.000005 syn match cssTextProp contained "\<punctuation-trim\>"
    1              0.000007 syn match cssTextAttr contained "\<line-through\>"
    1              0.000009 syn match cssTextAttr contained "\<\(text-\)\=\(top\|bottom\)\>"
    1              0.000006 syn keyword cssTextAttr contained ltr rtl embed nowrap
    1              0.000025 syn keyword cssTextAttr contained underline overline blink sub super middle
    1              0.000006 syn keyword cssTextAttr contained capitalize uppercase lowercase
    1              0.000006 syn keyword cssTextAttr contained justify baseline sub super
    1              0.000007 syn keyword cssTextAttr contained optimizeLegibility optimizeSpeed geometricPrecision
    1              0.000010 syn match cssTextAttr contained "\<pre\(-\(line\|wrap\)\)\=\>"
    1              0.000008 syn match cssTextAttr contained "\<\(allow\|force\)-end\>"
    1              0.000006 syn keyword cssTextAttr contained start end adjacent
    1              0.000010 syn match cssTextAttr contained "\<inter-\(word\|ideographic\|cluster\)\>"
    1              0.000009 syn keyword cssTextAttr contained distribute kashida first last
    1              0.000008 syn keyword cssTextAttr contained clip ellipsis unrestricted suppress
    1              0.000010 syn match cssTextAttr contained "\<break-all\>"
    1              0.000016 syn match cssTextAttr contained "\<break-word\>"
    1              0.000004 syn keyword cssTextAttr contained manual
    1              0.000010 syn match cssTextAttr contained "\<bidi-override\>"
                            
    1              0.000018 syn match cssTransformProp contained "\<transform\(-\(origin\|style\)\)\=\>"
    1              0.000008 syn match cssTransformProp contained "\<perspective\(-origin\)\=\>"
    1              0.000006 syn match cssTransformProp contained "\<backface-visibility\>"
                            
                            " CSS Transitions
                            " http://www.w3.org/TR/css3-transitions/
    1              0.000017 syn match cssTransitionProp contained "\<transition\(-\(delay\|duration\|property\|timing-function\)\)\=\>"
                            
                            " transition-time-function attributes
    1              0.000011 syn match cssTransitionAttr contained "\<linear\(-gradient\)\@!\>"
    1              0.000007 syn match cssTransitionAttr contained "\<ease\(-\(in-out\|out\|in\)\)\=\>"
    1              0.000008 syn match cssTransitionAttr contained "\<step\(-start\|-end\)\=\>"
                            "------------------------------------------------
                            " CSS Basic User Interface Module Level 3 (CSS3 UI)
                            " http://www.w3.org/TR/css3-ui/
    1              0.000007 syn match cssUIProp contained "\<box-sizing\>"
    1              0.000015 syn match cssUIAttr contained "\<\(content\|padding\|border\)\(-box\)\=\>"
                            
    1              0.000003 syn keyword cssUIProp contained cursor
    1              0.000011 syn match cssUIAttr contained "\<\(\([ns]\=[ew]\=\)\|col\|row\|nesw\|nwse\)-resize\>"
    1              0.000017 syn keyword cssUIAttr contained crosshair help move pointer alias copy
    1              0.000007 syn keyword cssUIAttr contained progress wait text cell move
    1              0.000014 syn match cssUIAttr contained "\<context-menu\>"
    1              0.000009 syn match cssUIAttr contained "\<no-drop\>"
    1              0.000006 syn match cssUIAttr contained "\<not-allowed\>"
    1              0.000006 syn match cssUIAttr contained "\<all-scroll\>"
    1              0.000007 syn match cssUIAttr contained "\<\(vertical-\)\=text\>"
    1              0.000010 syn match cssUIAttr contained "\<zoom\(-in\|-out\)\=\>"
                            
    1              0.000004 syn match cssUIProp contained "\<ime-mode\>"
    1              0.000004 syn keyword cssUIAttr contained active inactive disabled
                            
    1              0.000026 syn match cssUIProp contained "\<nav-\(down\|index\|left\|right\|up\)\=\>"
    1              0.000007 syn match cssUIProp contained "\<outline\(-\(width\|style\|color\|offset\)\)\=\>"
    1              0.000002 syn keyword cssUIAttr contained invert
                            
    1              0.000004 syn keyword cssUIProp contained icon resize
    1              0.000004 syn keyword cssUIAttr contained both horizontal vertical
                            
    1              0.000004 syn match cssUIProp contained "\<text-overflow\>"
    1              0.000003 syn keyword cssUIAttr contained clip ellipsis
                            
    1              0.000006 syn match cssUIProp contained "\<image-rendering\>"
    1              0.000004 syn keyword cssUIAttr contained pixellated
    1              0.000009 syn match cssUIAttr contained "\<crisp-edges\>"
                            
                            "------------------------------------------------
                            " Webkit/iOS specific attributes
    1              0.000005 syn match cssUIAttr contained '\<preserve-3d\>'
                            " IE specific attributes
    1              0.000010 syn match cssIEUIAttr contained '\<bicubic\>'
                            
                            " Webkit/iOS specific properties
    1              0.000019 syn match cssUIProp contained '\<\(tap-highlight-color\|user-select\|touch-callout\)\>'
                            " IE specific properties
    1              0.000013 syn match cssIEUIProp contained '\<\(interpolation-mode\|zoom\|filter\)\>'
                            
                            " Webkit/Firebox specific properties/attributes
    1              0.000003 syn keyword cssUIProp contained appearance
    1              0.000006 syn keyword cssUIAttr contained window button field icon document menu
                            
                            
    1              0.000011 syn match cssAuralProp contained "\<\(pause\|cue\)\(-\(before\|after\)\)\=\>"
    1              0.000028 syn match cssAuralProp contained "\<\(play-during\|speech-rate\|voice-family\|pitch\(-range\)\=\|speak\(-\(punctuation\|numeral\|header\)\)\=\)\>"
    1              0.000008 syn keyword cssAuralProp contained volume during azimuth elevation stress richness
    1              0.000015 syn match cssAuralAttr contained "\<\(x-\)\=\(soft\|loud\)\>"
    1              0.000005 syn keyword cssAuralAttr contained silent
    1              0.000006 syn match cssAuralAttr contained "\<spell-out\>"
    1              0.000005 syn keyword cssAuralAttr contained non mix
    1              0.000008 syn match cssAuralAttr contained "\<\(left\|right\)-side\>"
    1              0.000016 syn match cssAuralAttr contained "\<\(far\|center\)-\(left\|center\|right\)\>"
    1              0.000007 syn keyword cssAuralAttr contained leftwards rightwards behind
    1              0.000007 syn keyword cssAuralAttr contained below level above lower higher
    1              0.000010 syn match cssAuralAttr contained "\<\(x-\)\=\(slow\|fast\|low\|high\)\>"
    1              0.000004 syn keyword cssAuralAttr contained faster slower
    1              0.000009 syn keyword cssAuralAttr contained male female child code digits continuous
                            
                            " mobile text
    1              0.000009 syn match cssMobileTextProp contained "\<text-size-adjust\>"
                            
    1              0.000010 syn keyword cssMediaProp contained width height orientation scan
    1              0.000009 syn keyword cssMediaProp contained any-hover any-pointer color-gamut grid hover
    1              0.000009 syn keyword cssMediaProp contained overflow-block overflow-inline pointer update
    1              0.000020 syn match cssMediaProp contained /\<\(\(max\|min\)-\)\=\(\(device\)-\)\=aspect-ratio\>/
    1              0.000018 syn match cssMediaProp contained /\<\(\(max\|min\)-\)\=device-pixel-ratio\>/
    1              0.000011 syn match cssMediaProp contained /\<\(\(max\|min\)-\)\=device-\(height\|width\)\>/
    1              0.000020 syn match cssMediaProp contained /\<\(\(max\|min\)-\)\=\(height\|width\|resolution\|monochrome\|color\(-index\)\=\)\>/
    1              0.000013 syn keyword cssMediaAttr contained portrait landscape progressive interlace
    1              0.000015 syn keyword cssMediaAttr contained coarse fast fine hover infinite p3 paged
    1              0.000006 syn keyword cssMediaAttr contained rec2020 scroll slow srgb
    1              0.000020 syn match cssKeyFrameProp contained /\(\d\+\(\.\d\+\)\?%\|\(\<from\|to\>\)\)/ nextgroup=cssDefinition
    1              0.000021 syn match cssPageMarginProp /@\(\(top\|left\|right\|bottom\)-\(left\|center\|right\|middle\|bottom\)\)\(-corner\)\=/ contained nextgroup=cssDefinition
    1              0.000005 syn keyword cssPageProp contained content size
    1              0.000003 syn keyword cssPageProp contained orphans widows
    1              0.000004 syn keyword cssFontDescriptorProp contained src
    1              0.000009 syn match cssFontDescriptorProp contained "\<unicode-range\>"
                            " unicode-range attributes
    1              0.000009 syn match cssFontDescriptorAttr contained "U+[0-9A-Fa-f?]\+"
    1              0.000006 syn match cssFontDescriptorAttr contained "U+\x\+-\x\+"
                            
    1              0.000006 syn match cssBraces contained "[{}]"
    1              0.000014 syn match cssError contained "{@<>"
    1              0.005931 syn region cssDefinition transparent matchgroup=cssBraces start='{' end='}' contains=cssTagName,cssAttributeSelector,cssClassName,cssIdentifier,cssAtRule,cssAttrRegion,css.*Prop,cssComment,cssValue.*,cssColor,cssURL,cssImportant,cssCustomProp,cssError,cssStringQ,cssStringQQ,cssFunction,cssUnicodeEscape,cssVendor,cssDefinition,cssHacks,cssNoise fold
    1              0.000022 syn match cssBraceError "}"
    1              0.000006 syn match cssAttrComma ","
                            
                            " Pseudo class
                            " https://www.w3.org/TR/selectors-4/
    1              0.000015 syn match cssPseudoClass ":[A-Za-z0-9_-]*" contains=cssNoise,cssPseudoClassId,cssUnicodeEscape,cssVendor,cssPseudoClassFn
    1              0.000010 syn keyword cssPseudoClassId contained link visited active hover before after left right
    1              0.000009 syn keyword cssPseudoClassId contained root empty target enabled disabled checked invalid
    1              0.000008 syn match cssPseudoClassId contained "\<first-\(line\|letter\)\>"
    1              0.000009 syn match cssPseudoClassId contained "\<\(first\|last\|only\)-\(of-type\|child\)\>"
    1              0.000008 syn match cssPseudoClassId contained  "\<focus\(-within\|-visible\)\=\>"
    1              0.000020 syn region cssPseudoClassFn contained matchgroup=cssFunctionName start="\<\(not\|is\|lang\|\(nth\|nth-last\)-\(of-type\|child\)\)(" end=")" contains=cssStringQ,cssStringQQ,cssTagName,cssAttributeSelector,cssClassName,cssIdentifier
                            " ------------------------------------
                            " Vendor specific properties
    1              0.000005 syn match cssPseudoClassId contained  "\<selection\>"
    1              0.000020 syn match cssPseudoClassId contained  "\<\(input-\)\=placeholder\>"
                            
                            " Misc highlight groups
    1              0.000018 syntax match cssUnitDecorators /\(#\|-\|+\|%\|mm\|cm\|in\|pt\|pc\|em\|ex\|px\|ch\|rem\|vh\|vw\|vmin\|vmax\|dpi\|dppx\|dpcm\|Hz\|kHz\|s\|ms\|deg\|grad\|rad\)/ contained
    1              0.000005 syntax match cssNoise contained /\(:\|;\|\/\)/
                            
                            " Comment
    1              0.000015 syn region cssComment start="/\*" end="\*/" contains=@Spell fold
                            
    1              0.000009 syn match cssUnicodeEscape "\\\x\{1,6}\s\?"
    1              0.000005 syn match cssSpecialCharQQ +\\\\\|\\"+ contained
    1              0.000005 syn match cssSpecialCharQ +\\\\\|\\'+ contained
    1              0.000024 syn region cssStringQQ start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=cssUnicodeEscape,cssSpecialCharQQ
    1              0.000011 syn region cssStringQ start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=cssUnicodeEscape,cssSpecialCharQ
                            
                            " Vendor Prefix
    1              0.000007 syn match cssVendor contained "-\(webkit\|moz\|o\|ms\)-"
                            
                            " Various CSS Hack characters
                            " In earlier versions of IE (6 and 7), one can prefix property names
                            " with a _ or * to isolate those definitions to particular versions of IE
                            " This is purely decorative and therefore we assign to the same highlight
                            " group to cssVendor, for more information:
                            " http://www.paulirish.com/2009/browser-specific-css-hacks/
    1              0.000005 syn match cssHacks contained /\(_\|*\)/
                            
                            " Attr Enhance
                            " Some keywords are both Prop and Attr, so we have to handle them
                            " cssPseudoClassId is hidden by cssAttrRegion, so we add it here. see #69
    1              0.006747 syn region cssAttrRegion start=/:/ end=/\ze\(;\|)\|}\|{\)/ contained contains=cssPseudoClassId,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
                            " Hack for transition
                            " 'transition' has Props after ':'.
    1              0.009625 syn region cssAttrRegion start=/transition\s*:/ end=/\ze\(;\|)\|}\)/ contained contains=css.*Prop,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
    1              0.000024 syn match cssAtKeyword /@\(font-face\|media\|keyframes\|import\|charset\|namespace\|page\|supports\)/
                            
    1              0.000008 syn keyword cssAtRuleLogical only not and contained
                            
                            " @media
                            " Reference: http://www.w3.org/TR/css3-mediaqueries/
    1              0.000024 syn region cssAtRule start=/@media\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssVendor,cssMediaType,cssComment,cssCustomProp,cssFunctionName nextgroup=cssDefinition
    1              0.000011 syn keyword cssMediaType contained screen print aural braille embossed handheld projection tty tv speech all contained
                            
                            " @page
                            " http://www.w3.org/TR/css3-page/
    1              0.000014 syn region cssAtRule start=/@page\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssPagePseudo,cssComment nextgroup=cssDefinition
    1              0.000007 syn match cssPagePseudo /:\(left\|right\|first\|blank\)/ contained skipwhite skipnl
                            " @keyframe
                            " http://www.w3.org/TR/css3-animations/#keyframes
    1              0.000015 syn region cssAtRule start=/@\(-[a-z]\+-\)\=keyframes\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssVendor,cssComment nextgroup=cssDefinition
                            
    1              0.000016 syn region cssAtRule start=/@import\>/    end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword,cssURL,cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssMediaType
    1              0.000011 syn region cssAtRule start=/@charset\>/   end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
    1              0.000026 syn region cssAtRule start=/@namespace\>/ end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
                            
                            " @supports
                            " https://www.w3.org/TR/css3-conditional/#at-supports
    1              0.004339 syn region cssAtRule start=/@supports\>/ end=/\ze{/ skipwhite skipnl contains=cssAtRuleLogical,cssAttrRegion,css.*Prop,cssValue.*,cssVendor,cssAtKeyword,cssComment nextgroup=cssDefinition
                            
                            
    1              0.000014 if main_syntax == "css"
                              syn sync minlines=10
    1              0.000003 endif
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
    1              0.000006 hi def link cssComment Comment
    1              0.000003 hi def link cssVendor Comment
    1              0.000002 hi def link cssHacks Comment
    1              0.000003 hi def link cssTagName Statement
    1              0.000011 hi def link cssDeprecated Error
    1              0.000028 hi def link cssSelectorOp Special
    1              0.000002 hi def link cssSelectorOp2 Special
    1              0.000001 hi def link cssAttrComma Special
                            
    1              0.000002 hi def link cssAnimationProp cssProp
    1              0.000002 hi def link cssBackgroundProp cssProp
    1              0.000026 hi def link cssBorderProp cssProp
    1              0.000002 hi def link cssBoxProp cssProp
    1              0.000002 hi def link cssCascadeProp cssProp
    1              0.000002 hi def link cssColorProp cssProp
    1              0.000003 hi def link cssContentForPagedMediaProp cssProp
    1              0.000002 hi def link cssDimensionProp cssProp
    1              0.000002 hi def link cssFlexibleBoxProp cssProp
    1              0.000002 hi def link cssFontProp cssProp
    1              0.000002 hi def link cssGeneratedContentProp cssProp
    1              0.000002 hi def link cssGridProp cssProp
    1              0.000002 hi def link cssHyerlinkProp cssProp
    1              0.000002 hi def link cssInteractProp cssProp
    1              0.000002 hi def link cssLineboxProp cssProp
    1              0.000002 hi def link cssListProp cssProp
    1              0.000002 hi def link cssMarqueeProp cssProp
    1              0.000002 hi def link cssMultiColumnProp cssProp
    1              0.000002 hi def link cssPagedMediaProp cssProp
    1              0.000002 hi def link cssPositioningProp cssProp
    1              0.000002 hi def link cssObjectProp cssProp
    1              0.000002 hi def link cssPrintProp cssProp
    1              0.000002 hi def link cssRubyProp cssProp
    1              0.000002 hi def link cssSpeechProp cssProp
    1              0.000002 hi def link cssTableProp cssProp
    1              0.000001 hi def link cssTextProp cssProp
    1              0.000002 hi def link cssTransformProp cssProp
    1              0.000002 hi def link cssTransitionProp cssProp
    1              0.000002 hi def link cssUIProp cssProp
    1              0.000001 hi def link cssIEUIProp cssProp
    1              0.000002 hi def link cssAuralProp cssProp
    1              0.000002 hi def link cssRenderProp cssProp
    1              0.000002 hi def link cssMobileTextProp cssProp
                            
    1              0.000002 hi def link cssAnimationAttr cssAttr
    1              0.000002 hi def link cssBackgroundAttr cssAttr
    1              0.000002 hi def link cssBorderAttr cssAttr
    1              0.000002 hi def link cssBoxAttr cssAttr
    1              0.000002 hi def link cssContentForPagedMediaAttr cssAttr
    1              0.000002 hi def link cssDimensionAttr cssAttr
    1              0.000002 hi def link cssFlexibleBoxAttr cssAttr
    1              0.000001 hi def link cssFontAttr cssAttr
    1              0.000003 hi def link cssGeneratedContentAttr cssAttr
    1              0.000002 hi def link cssGridAttr cssAttr
    1              0.000005 hi def link cssHyerlinkAttr cssAttr
    1              0.000002 hi def link cssInteractAttr cssAttr
    1              0.000012 hi def link cssLineboxAttr cssAttr
    1              0.000003 hi def link cssListAttr cssAttr
    1              0.000002 hi def link cssMarginAttr cssAttr
    1              0.000002 hi def link cssMarqueeAttr cssAttr
    1              0.000001 hi def link cssMultiColumnAttr cssAttr
    1              0.000002 hi def link cssPaddingAttr cssAttr
    1              0.000002 hi def link cssPagedMediaAttr cssAttr
    1              0.000002 hi def link cssPositioningAttr cssAttr
    1              0.000001 hi def link cssObjectAttr cssAttr
    1              0.000002 hi def link cssGradientAttr cssAttr
    1              0.000001 hi def link cssPrintAttr cssAttr
    1              0.000002 hi def link cssRubyAttr cssAttr
    1              0.000002 hi def link cssSpeechAttr cssAttr
    1              0.000002 hi def link cssTableAttr cssAttr
    1              0.000002 hi def link cssTextAttr cssAttr
    1              0.000002 hi def link cssTransformAttr cssAttr
    1              0.000002 hi def link cssTransitionAttr cssAttr
    1              0.000001 hi def link cssUIAttr cssAttr
    1              0.000001 hi def link cssIEUIAttr cssAttr
    1              0.000002 hi def link cssAuralAttr cssAttr
    1              0.000002 hi def link cssRenderAttr cssAttr
    1              0.000002 hi def link cssCascadeAttr cssAttr
    1              0.000002 hi def link cssCommonAttr cssAttr
                            
    1              0.000002 hi def link cssPseudoClassId PreProc
    1              0.000002 hi def link cssPseudoClassLang Constant
    1              0.000002 hi def link cssValueLength Number
    1              0.000002 hi def link cssValueInteger Number
    1              0.000002 hi def link cssValueNumber Number
    1              0.000002 hi def link cssValueAngle Number
    1              0.000001 hi def link cssValueTime Number
    1              0.000002 hi def link cssValueFrequency Number
    1              0.000002 hi def link cssFunction Constant
    1              0.000005 hi def link cssURL String
    1              0.000002 hi def link cssFunctionName Function
    1              0.000002 hi def link cssFunctionComma Function
    1              0.000002 hi def link cssColor Constant
    1              0.000010 hi def link cssIdentifier Function
    1              0.000002 hi def link cssAtRule Include
    1              0.000001 hi def link cssAtKeyword PreProc
    1              0.000002 hi def link cssImportant Special
    1              0.000002 hi def link cssCustomProp Special
    1              0.000002 hi def link cssBraces Function
    1              0.000003 hi def link cssBraceError Error
    1              0.000001 hi def link cssError Error
    1              0.000002 hi def link cssUnicodeEscape Special
    1              0.000002 hi def link cssStringQQ String
    1              0.000003 hi def link cssStringQ String
    1              0.000002 hi def link cssAttributeSelector String
    1              0.000002 hi def link cssMediaType Special
    1              0.000002 hi def link cssMediaComma Normal
    1              0.000002 hi def link cssAtRuleLogical Statement
    1              0.000001 hi def link cssMediaProp cssProp
    1              0.000002 hi def link cssMediaAttr cssAttr
    1              0.000001 hi def link cssPagePseudo PreProc
    1              0.000002 hi def link cssPageMarginProp cssAtKeyword
    1              0.000002 hi def link cssPageProp cssProp
    1              0.000002 hi def link cssKeyFrameProp Constant
    1              0.000002 hi def link cssFontDescriptor Special
    1              0.000002 hi def link cssFontDescriptorProp cssProp
    1              0.000002 hi def link cssFontDescriptorAttr cssAttr
    1              0.000002 hi def link cssUnicodeRange Constant
    1              0.000002 hi def link cssClassName Function
    1              0.000002 hi def link cssClassNameDot Function
    1              0.000002 hi def link cssProp StorageClass
    1              0.000001 hi def link cssAttr Constant
    1              0.000002 hi def link cssUnitDecorators Number
    1              0.000002 hi def link cssNoise Noise
                            
    1              0.000008 let b:current_syntax = "css"
                            
    1              0.000004 if main_syntax == 'css'
                              unlet main_syntax
    1              0.000001 endif
                            
    1   0.000031   0.000021 let &cpo = s:cpo_save
    1              0.000003 unlet s:cpo_save
                            
                            " vim: ts=8

SCRIPT  /usr/share/nvim/runtime/syntax/yaml.vim
Sourced 1 time
Total time:   0.002936
 Self time:   0.002563

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:         YAML (YAML Ain't Markup Language) 1.2
                            " Maintainer:       Nikolai Pavlov <zyx.vim@gmail.com>
                            " First author:     Nikolai Weibull <now@bitwi.se>
                            " Latest Revision:  2024-04-01
                            
    1              0.000026 if exists('b:current_syntax')
                                finish
    1              0.000002 endif
                            
    1              0.000013 let s:cpo_save = &cpo
    1   0.000042   0.000026 set cpo&vim
                            
                            " Choose the schema to use
                            " TODO: Validate schema
    1              0.000005 if !exists('b:yaml_schema')
    1              0.000004     if exists('g:yaml_schema')
                                    let b:yaml_schema = g:yaml_schema
    1              0.000001     else
    1              0.000003         let b:yaml_schema = 'core'
    1              0.000001     endif
    1              0.000001 endif
                            
    1              0.000004 let s:ns_char = '\%([\n\r\uFEFF \t]\@!\p\)'
    1              0.000003 let s:ns_word_char = '[[:alnum:]_\-]'
    1              0.000008 let s:ns_uri_char  = '\%(%\x\x\|'.s:ns_word_char.'\|[#/;?:@&=+$,.!~*''()[\]]\)'
    1              0.000005 let s:ns_tag_char  = '\%(%\x\x\|'.s:ns_word_char.'\|[#/;?:@&=+$.~*''()]\)'
    1              0.000003 let s:c_indicator      = '[\-?:,[\]{}#&*!|>''"%@`]'
    1              0.000003 let s:c_flow_indicator = '[,[\]{}]'
                            
    1              0.000048 let s:ns_anchor_char = substitute(s:ns_char, '\v\C[\zs', '\=s:c_flow_indicator[1:-2]', '')
    1              0.000014 let s:ns_char_without_c_indicator = substitute(s:ns_char, '\v\C[\zs', '\=s:c_indicator[1:-2]', '')
                            
    1              0.000004 let s:_collection = '[^\@!\(\%(\\\.\|\[^\\\]]\)\+\)]'
    1              0.000003 let s:_neg_collection = '[^\(\%(\\\.\|\[^\\\]]\)\+\)]'
    1              0.000018 function s:SimplifyToAssumeAllPrintable(p)
                                return substitute(a:p, '\V\C\\%('.s:_collection.'\\@!\\p\\)', '[^\1]', '')
                            endfunction
    1   0.000136   0.000034 let s:ns_char = s:SimplifyToAssumeAllPrintable(s:ns_char)
    1   0.000090   0.000025 let s:ns_anchor_char = s:SimplifyToAssumeAllPrintable(s:ns_anchor_char)
    1   0.000055   0.000020 let s:ns_char_without_c_indicator = s:SimplifyToAssumeAllPrintable(s:ns_char_without_c_indicator)
                            
    1              0.000006 function s:SimplifyAdjacentCollections(p)
                                return substitute(a:p, '\V\C'.s:_collection.'\\|'.s:_collection, '[\1\2]', 'g')
                            endfunction
    1   0.000073   0.000017 let s:ns_uri_char = s:SimplifyAdjacentCollections(s:ns_uri_char)
    1   0.000038   0.000014 let s:ns_tag_char = s:SimplifyAdjacentCollections(s:ns_tag_char)
                            
    1              0.000005 let s:c_verbatim_tag = '!<'.s:ns_uri_char.'\+>'
    1              0.000005 let s:c_named_tag_handle     = '!'.s:ns_word_char.'\+!'
    1              0.000003 let s:c_secondary_tag_handle = '!!'
    1              0.000004 let s:c_primary_tag_handle   = '!'
    1              0.000011 let s:c_tag_handle = '\%('.s:c_named_tag_handle.
                                        \         '\|'.s:c_secondary_tag_handle.
                                        \         '\|'.s:c_primary_tag_handle.'\)'
    1              0.000005 let s:c_ns_shorthand_tag = s:c_tag_handle . s:ns_tag_char.'\+'
    1              0.000003 let s:c_non_specific_tag = '!'
    1              0.000008 let s:c_ns_tag_property = s:c_verbatim_tag.
                                        \        '\|'.s:c_ns_shorthand_tag.
                                        \        '\|'.s:c_non_specific_tag
                            
    1              0.000004 let s:c_ns_anchor_name = s:ns_anchor_char.'\+'
    1              0.000004 let s:c_ns_anchor_property =  '&'.s:c_ns_anchor_name
    1              0.000004 let s:c_ns_alias_node      = '\*'.s:c_ns_anchor_name
    1              0.000007 let s:c_ns_properties      = '\%(\%('.s:c_ns_tag_property.'\|'.s:c_ns_anchor_property.'\)\s\+\)\+'
                            
    1              0.000004 let s:ns_directive_name = s:ns_char.'\+'
                            
    1              0.000004 let s:ns_local_tag_prefix  = '!'.s:ns_uri_char.'*'
    1              0.000005 let s:ns_global_tag_prefix = s:ns_tag_char.s:ns_uri_char.'*'
    1              0.000006 let s:ns_tag_prefix = s:ns_local_tag_prefix.
                                        \    '\|'.s:ns_global_tag_prefix
                            
    1              0.000003 let s:ns_plain_safe_out = s:ns_char
    1              0.000006 let s:ns_plain_safe_in  = '\%('.s:c_flow_indicator.'\@!'.s:ns_char.'\)'
                            
    1              0.000037 let s:ns_plain_safe_in = substitute(s:ns_plain_safe_in, '\V\C\\%('.s:_collection.'\\@!'.s:_neg_collection.'\\)', '[^\1\2]', '')
    1              0.000042 let s:ns_plain_safe_in_without_colhash = substitute(s:ns_plain_safe_in, '\V\C'.s:_neg_collection, '[^\1:#]', '')
    1              0.000016 let s:ns_plain_safe_out_without_colhash = substitute(s:ns_plain_safe_out, '\V\C'.s:_neg_collection, '[^\1:#]', '')
                            
    1              0.000006 let s:ns_plain_first_in  = '\%('.s:ns_char_without_c_indicator.'\|[?:\-]\%('.s:ns_plain_safe_in.'\)\@=\)'
    1              0.000006 let s:ns_plain_first_out = '\%('.s:ns_char_without_c_indicator.'\|[?:\-]\%('.s:ns_plain_safe_out.'\)\@=\)'
                            
    1              0.000007 let s:ns_plain_char_in  = '\%('.s:ns_char.'#\|:'.s:ns_plain_safe_in.'\|'.s:ns_plain_safe_in_without_colhash.'\)'
    1              0.000007 let s:ns_plain_char_out = '\%('.s:ns_char.'#\|:'.s:ns_plain_safe_out.'\|'.s:ns_plain_safe_out_without_colhash.'\)'
                            
    1              0.000006 let s:ns_plain_out = s:ns_plain_first_out . s:ns_plain_char_out.'*'
    1              0.000006 let s:ns_plain_in  = s:ns_plain_first_in  . s:ns_plain_char_in.'*'
                            
                            
    1              0.000019 syn keyword yamlTodo            contained TODO FIXME XXX NOTE
                            
    1              0.000024 syn region  yamlComment         display oneline start='\%\(^\|\s\)#' end='$'
                                        \                   contains=yamlTodo
                            
    1              0.000044 execute 'syn region yamlDirective oneline start='.string('^\ze%'.s:ns_directive_name.'\s\+').' '.
                                        \                            'end="$" '.
                                        \                            'contains=yamlTAGDirective,'.
                                        \                                     'yamlYAMLDirective,'.
                                        \                                     'yamlReservedDirective '.
                                        \                            'keepend'
                            
    1              0.000011 syn match yamlTAGDirective /%TAG\ze\s/ contained nextgroup=yamlTagHandle skipwhite
    1              0.000022 execute 'syn match yamlTagHandle' string(s:c_tag_handle)  'contained nextgroup=yamlTagPrefix skipwhite'
    1              0.000030 execute 'syn match yamlTagPrefix' string(s:ns_tag_prefix) 'contained nextgroup=yamlComment skipwhite'
                            
    1              0.000007 syn match yamlYAMLDirective /%YAML\ze\s/ contained nextgroup=yamlYAMLVersion skipwhite
    1              0.000007 syn match yamlYAMLVersion   /\d\+\.\d\+/ contained nextgroup=yamlComment skipwhite
                            
    1              0.000022 execute 'syn match yamlReservedDirective contained nextgroup=yamlComment '.
                                        \string('%\%(\%(TAG\|YAML\)\s\)\@!'.s:ns_directive_name)
                            
    1              0.000020 syn region yamlFlowString matchgroup=yamlFlowStringDelimiter start='"' skip='\\"' end='"'
                                        \ contains=yamlEscape contained nextgroup=yamlFlowMappingDelimiter,yamlComment skipwhite
    1              0.000022 syn region yamlFlowString matchgroup=yamlFlowStringDelimiter start="'" skip="''"  end="'"
                                        \ contains=yamlSingleEscape contained nextgroup=yamlFlowMappingDelimiter,yamlComment skipwhite
    1              0.000016 syn match  yamlEscape contained '\\\%([\\"abefnrtv\^0_ NLP\n]\|x\x\x\|u\x\{4}\|U\x\{8}\)'
    1              0.000004 syn match  yamlSingleEscape contained "''"
                            
    1              0.000008 syn cluster yamlConstant contains=yamlBool,yamlNull
                            
    1              0.000006 syn cluster yamlFlowNode contains=yamlFlowString,yamlFlowMapping,yamlFlowCollection
    1              0.000008 syn cluster yamlFlowNode      add=yamlFlowMappingKey,yamlFlowMappingKeyStart,yamlFlowMappingMerge
    1              0.000008 syn cluster yamlFlowNode      add=@yamlConstant,yamlPlainScalar,yamlFloat,yamlComment
    1              0.000008 syn cluster yamlFlowNode      add=yamlTimestamp,yamlInteger,yamlAlias,yamlFlowNodeProperties
    1              0.000013 syn region yamlFlowMapping    matchgroup=yamlFlowIndicator start='{\@<!{{\@!' end='}' contains=@yamlFlowNode
    1              0.000008 syn region yamlFlowCollection matchgroup=yamlFlowIndicator start='\[' end='\]' contains=@yamlFlowNode
                            
    1              0.000028 execute 'syn match yamlPlainScalar /'.s:ns_plain_out.'/'
    1              0.000053 execute 'syn match yamlPlainScalar contained /'.s:ns_plain_in.'/'
                            
    1              0.000063 execute 'syn match yamlFlowMappingKey /'.s:ns_plain_in.'\%(\s\+'.s:ns_plain_in.'\)*\ze\s*:\%(\s\|$\)/ contained '.
                                        \'nextgroup=yamlFlowMappingDelimiter skipwhite'
    1              0.000006 syn match yamlFlowMappingKeyStart      /?/ contained nextgroup=@yamlFlowNode skipwhite
    1              0.000009 syn match yamlFlowMappingMerge /<<\ze\s*:/ contained nextgroup=yamlFlowMappingDelimiter skipwhite
    1              0.000005 syn match yamlFlowMappingDelimiter     /:/ contained nextgroup=@yamlFlowNode skipwhite
    1              0.000069 execute 'syn match yamlFlowNodeProperties' string(s:c_ns_properties)
                                        \ 'contained contains=yamlNodeTag,yamlAnchor nextgroup=@yamlFlowNode skipwhite'
                            
    1              0.000044 execute 'syn match yamlBlockMappingKey /^\s*\zs'.s:ns_plain_out.'\%(\s\+'.s:ns_plain_out.'\)*\ze\s*:\%(\s\|$\)/ '.
                                        \'nextgroup=yamlBlockMappingDelimiter skipwhite'
    1              0.000034 execute 'syn match yamlBlockMappingKey        /'.s:ns_plain_out.'\%(\s\+'.s:ns_plain_out.'\)*\ze\s*:\%(\s\|$\)/ contained '.
                                        \'nextgroup=yamlBlockMappingDelimiter skipwhite'
    1              0.000019 syn match yamlBlockMappingKeyString /^\s*\zs\%("\%([^"]\|\\"\)*"\|'\%([^']\|''\)*'\)\ze\s*:\%(\s\|$\)/
                                        \ contains=yamlFlowString nextgroup=yamlBlockMappingDelimiter skipwhite
    1              0.000011 syn match yamlBlockMappingKeyString        /\%("\%([^"]\|\\"\)*"\|'\%([^']\|''\)*'\)\ze\s*:\%(\s\|$\)/ contained
                                        \ contains=yamlFlowString nextgroup=yamlBlockMappingDelimiter skipwhite
    1              0.000010 syn match yamlBlockMappingMerge   /^\s*\zs<<\ze\s*:\%(\s\|$\)/           nextgroup=yamlBlockMappingDelimiter skipwhite
    1              0.000006 syn match yamlBlockMappingMerge          /<<\ze\s*:\%(\s\|$\)/ contained nextgroup=yamlBlockMappingDelimiter skipwhite
                            
    1              0.000010 syn match yamlBlockMappingDelimiter    /^\s*\zs:\ze\%(\s\|$\)/           nextgroup=@yamlBlockNode skipwhite
    1              0.000011 syn match yamlBlockMappingDelimiter           /:\ze\%(\s\|$\)/ contained nextgroup=@yamlBlockNode skipwhite
    1              0.000008 syn match yamlBlockMappingKeyStart     /^\s*\zs?\ze\%(\s\|$\)/           nextgroup=@yamlBlockNode skipwhite
    1              0.000006 syn match yamlBlockMappingKeyStart            /?\ze\%(\s\|$\)/ contained nextgroup=@yamlBlockNode skipwhite
                            
    1              0.000007 syn match yamlBlockCollectionItemStart /^\s*\zs-\ze\%(\s\|$\)/           nextgroup=@yamlBlockNode skipwhite
    1              0.000006 syn match yamlBlockCollectionItemStart        /-\ze\%(\s\|$\)/ contained nextgroup=@yamlBlockNode skipwhite
                            
    1              0.000073 execute 'syn match yamlBlockNodeProperties' string(s:c_ns_properties)
                                        \ 'contained contains=yamlNodeTag,yamlAnchor nextgroup=@yamlFlowNode,yamlBlockScalarHeader skipwhite'
    1              0.000014 syn match yamlBlockScalarHeader '[|>]\%([1-9][+-]\|[+-]\?[1-9]\?\)\%(\s\+#.*\)\?$' contained
                                        \ contains=yamlComment nextgroup=yamlBlockString skipnl
    1              0.000014 syn region yamlBlockString start=/^\z(\s\+\)/ skip=/^$/ end=/^\%(\z1\)\@!/ contained
                            
    1              0.000011 syn cluster yamlBlockNode contains=@yamlFlowNode,yamlBlockMappingKey,yamlBlockMappingKeyString,
                                        \yamlBlockMappingMerge,yamlBlockMappingKeyStart,yamlBlockCollectionItemStart,
                                        \yamlBlockNodeProperties,yamlBlockScalarHeader
                            
    1              0.000006 syn cluster yamlScalarWithSpecials contains=yamlPlainScalar,yamlBlockMappingKey,yamlFlowMappingKey
                            
    1   0.000065   0.000023 let s:_bounder = s:SimplifyToAssumeAllPrintable('\%([[\]{}, \t]\@!\p\)')
    1              0.000008 if b:yaml_schema is# 'json'
                                syn keyword yamlNull null contained containedin=@yamlScalarWithSpecials
                                syn keyword yamlBool true false
                                exe 'syn match   yamlInteger /'.s:_bounder.'\@1<!\%(0\|-\=[1-9][0-9]*\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                                exe 'syn match   yamlFloat   /'.s:_bounder.'\@1<!\%(-\=[1-9][0-9]*\%(\.[0-9]*\)\=\(e[-+]\=[0-9]\+\)\=\|0\|-\=\.inf\|\.nan\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
    1              0.000003 elseif b:yaml_schema is# 'core'
    1              0.000011     syn keyword yamlNull null Null NULL contained containedin=@yamlScalarWithSpecials
    1              0.000011     syn keyword yamlBool true True TRUE false False FALSE contained containedin=@yamlScalarWithSpecials
    1              0.000019     exe 'syn match   yamlNull /'.s:_bounder.'\@1<!\~'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
    1              0.000046     exe 'syn match   yamlInteger /'.s:_bounder.'\@1<!\%([-+]\=\%(\%(0\%(b[0-1_]\+\|o\?[0-7_]\+\|x[0-9a-fA-F_]\+\)\=\|\%([1-9][0-9_]*\%(:[0-5]\=\d\)\+\)\)\|[1-9][0-9_]*\)\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
    1              0.000059     exe 'syn match   yamlFloat /'.s:_bounder.'\@1<!\%([-+]\=\%(\%(\d[0-9_]*\)\.[0-9_]*\%([eE][-+]\=\d\+\)\=\|\.[0-9_]\+\%([eE][-+]\=[0-9]\+\)\=\|\d[0-9_]*\%(:[0-5]\=\d\)\+\.[0-9_]*\|\.\%(inf\|Inf\|INF\)\)\|\%(\.\%(nan\|NaN\|NAN\)\)\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                            elseif b:yaml_schema is# 'pyyaml'
                                syn keyword yamlNull null Null NULL contained containedin=@yamlScalarWithSpecials
                                syn keyword yamlBool true True TRUE false False FALSE yes Yes YES no No NO on On ON off Off OFF contained containedin=@yamlScalarWithSpecials
                                exe 'syn match   yamlNull /'.s:_bounder.'\@1<!\~'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                                exe 'syn match  yamlFloat /'.s:_bounder.'\@1<!\%(\v[-+]?%(\d[0-9_]*)\.[0-9_]*%([eE][-+]\d+)?|\.[0-9_]+%([eE][-+]\d+)?|[-+]?\d[0-9_]*%(\:[0-5]?\d)+\.[0-9_]*|[-+]?\.%(inf|Inf|INF)|\.%(nan|NaN|NAN)\m\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                                exe 'syn match  yamlInteger /'.s:_bounder.'\@1<!\%(\v[-+]?0b[0-1_]+|[-+]?0[0-7_]+|[-+]?%(0|[1-9][0-9_]*)|[-+]?0x[0-9a-fA-F_]+|[-+]?[1-9][0-9_]*%(:[0-5]?\d)+\m\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                                exe 'syn match  yamlTimestamp /'.s:_bounder.'\@1<!\%(\v\d\d\d\d\-\d\d\-\d\d|\d\d\d\d \-\d\d? \-\d\d?%([Tt]|[ \t]+)\d\d?\:\d\d \:\d\d %(\.\d*)?%([ \t]*%(Z|[-+]\d\d?%(\:\d\d)?))?\m\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                            elseif b:yaml_schema is# 'failsafe'
                                " Nothing
    1              0.000002 endif
    1              0.000006 unlet s:_bounder
                            
                            
    1              0.000034 execute 'syn match yamlNodeTag '.string(s:c_ns_tag_property)
    1              0.000019 execute 'syn match yamlAnchor  '.string(s:c_ns_anchor_property)
    1              0.000014 execute 'syn match yamlAlias   '.string(s:c_ns_alias_node)
                            
    1              0.000014 syn match yamlDocumentStart '^---\ze\%(\s\|$\)'
    1              0.000009 syn match yamlDocumentEnd   '^\.\.\.\ze\%(\s\|$\)'
                            
    1              0.000006 hi def link yamlTodo                     Todo
    1              0.000003 hi def link yamlComment                  Comment
                            
    1              0.000002 hi def link yamlDocumentStart            PreProc
    1              0.000002 hi def link yamlDocumentEnd              PreProc
                            
    1              0.000003 hi def link yamlDirectiveName            Keyword
                            
    1              0.000002 hi def link yamlTAGDirective             yamlDirectiveName
    1              0.000002 hi def link yamlTagHandle                String
    1              0.000002 hi def link yamlTagPrefix                String
                            
    1              0.000002 hi def link yamlYAMLDirective            yamlDirectiveName
    1              0.000003 hi def link yamlReservedDirective        Error
    1              0.000002 hi def link yamlYAMLVersion              Number
                            
    1              0.000002 hi def link yamlString                   String
    1              0.000002 hi def link yamlFlowString               yamlString
    1              0.000003 hi def link yamlFlowStringDelimiter      yamlString
    1              0.000002 hi def link yamlEscape                   SpecialChar
    1              0.000002 hi def link yamlSingleEscape             SpecialChar
                            
    1              0.000003 hi def link yamlMappingKey               Identifier
    1              0.000003 hi def link yamlMappingKeyStart          Special
    1              0.000002 hi def link yamlMappingMerge             Special
    1              0.000002 hi def link yamlKeyValueDelimiter        Special
                            
    1              0.000002 hi def link yamlFlowIndicator            Special
    1              0.000002 hi def link yamlFlowMappingKey           yamlMappingKey
    1              0.000002 hi def link yamlFlowMappingKeyStart      yamlMappingKeyStart
    1              0.000002 hi def link yamlFlowMappingMerge         yamlMappingMerge
    1              0.000002 hi def link yamlFlowMappingDelimiter     yamlKeyValueDelimiter
                            
    1              0.000002 hi def link yamlBlockMappingKey          yamlMappingKey
    1              0.000003 hi def link yamlBlockMappingKeyStart     yamlMappingKeyStart
    1              0.000003 hi def link yamlBlockMappingMerge        yamlMappingMerge
    1              0.000003 hi def link yamlBlockMappingDelimiter    yamlKeyValueDelimiter
    1              0.000002 hi def link yamlBlockCollectionItemStart Label
    1              0.000002 hi def link yamlBlockScalarHeader        Special
                            " We do not link yamlBlockString to yamlString, because yamlPlainScalar is
                            " not highlighted as string neighter, and also due to historical reasons.
                            " hi def link yamlBlockString              yamlString
                            
    1              0.000003 hi def link yamlConstant                 Constant
                            
    1              0.000002 hi def link yamlNull                     yamlConstant
    1              0.000003 hi def link yamlBool                     yamlConstant
                            
    1              0.000002 hi def link yamlAnchor                   Type
    1              0.000002 hi def link yamlAlias                    Type
    1              0.000002 hi def link yamlNodeTag                  Type
                            
    1              0.000002 hi def link yamlInteger                  Number
    1              0.000002 hi def link yamlFloat                    Float
    1              0.000002 hi def link yamlTimestamp                Number
                            
    1              0.000005 let b:current_syntax = "yaml"
                            
    1              0.000087 unlet s:ns_char s:ns_word_char s:ns_uri_char s:ns_tag_char s:c_indicator s:c_flow_indicator
                                        \ s:ns_anchor_char s:ns_char_without_c_indicator s:_collection s:_neg_collection
                                        \ s:c_verbatim_tag s:c_named_tag_handle s:c_secondary_tag_handle s:c_primary_tag_handle
                                        \ s:c_tag_handle s:c_ns_shorthand_tag s:c_non_specific_tag s:c_ns_tag_property
                                        \ s:c_ns_anchor_name s:c_ns_anchor_property s:c_ns_alias_node s:c_ns_properties
                                        \ s:ns_directive_name s:ns_local_tag_prefix s:ns_global_tag_prefix s:ns_tag_prefix
                                        \ s:ns_plain_safe_out s:ns_plain_safe_in s:ns_plain_safe_in_without_colhash s:ns_plain_safe_out_without_colhash
                                        \ s:ns_plain_first_in s:ns_plain_first_out s:ns_plain_char_in s:ns_plain_char_out s:ns_plain_out s:ns_plain_in
    1              0.000012 delfunction s:SimplifyAdjacentCollections
    1              0.000005 delfunction s:SimplifyToAssumeAllPrintable
                            
    1   0.000093   0.000059 let &cpo = s:cpo_save
    1              0.000004 unlet s:cpo_save
                            
                            " vim: set et sw=4 sts=4 ts=8:

FUNCTION  <SNR>117_indent_tikz()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:293
Called 4 times
Total time:   0.001322
 Self time:   0.000207

count  total (s)   self (s)
    4              0.000051   if !has_key(b:vimtex.packages, 'tikz') | return 0 | endif
                            
    4   0.001182   0.000067   let l:synstack = vimtex#syntax#stack(a:lnum, 1)
    4              0.000081   if match(l:synstack, '^texTikzZone') < 0 | return 0 | endif
                            
                              let l:env_lnum = search('\\begin\s*{tikzpicture\*\?}', 'bn')
                              if l:env_lnum > 0 && l:env_lnum < a:lnum
                                let l:prev_starts = a:prev =~# s:tikz_commands
                                let l:prev_stops  = a:prev =~# ';\s*$'
                            
                                " Increase indent on tikz command start
                                if l:prev_starts && ! l:prev_stops
                                  return s:sw
                                endif
                            
                                " Decrease indent on tikz command end, i.e. on semicolon
                                if ! l:prev_starts && l:prev_stops
                                  let l:context = join(getline(l:env_lnum, a:lnum-1), '')
                                  return -s:sw*(l:context =~# s:tikz_commands)
                                endif
                              endif
                            
                              return 0

FUNCTION  vimtex#cmd#parser_separator_check()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/cmd.vim:313
Called 80 times
Total time:   0.001774
 Self time:   0.001774

count  total (s)   self (s)
   80              0.001596   return a:separator_string =~# '\v^%(\n\s*)?$'

FUNCTION  <SNR>91_text_between()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/cmd.vim:777
Called 160 times
Total time:   0.008470
 Self time:   0.008470

count  total (s)   self (s)
  160              0.001444   let [l1, c1] = [a:p1.lnum, a:p1.cnum - (a:0 > 0)]
  160              0.000860   let [l2, c2] = [a:p2.lnum, a:p2.cnum - (a:0 <= 0)]
                            
  160              0.001075   let lines = getline(l1, l2)
  160              0.000571   if !empty(lines)
  160              0.001283     let lines[0] = strpart(lines[0], c1)
  160              0.001340     let lines[-1] = strpart(lines[-1], 0, l1 == l2 ? c2 - c1 : c2)
  160              0.000200   endif
  160              0.001178   return join(lines, "\n")

FUNCTION  VimtexIndent()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:42
Called 4 times
Total time:   0.008196
 Self time:   0.000982

count  total (s)   self (s)
    4              0.000056   let s:sw = shiftwidth()
                            
    4   0.002707   0.000096   let [l:prev_lnum, l:prev_line] = s:get_prev_lnum(prevnonblank(a:lnum - 1))
    4              0.000029   if l:prev_lnum == 0 | return indent(a:lnum) | endif
    4              0.000019   let l:line = getline(a:lnum)
                            
                              " Check for verbatim modes
    4   0.001025   0.000044   if s:in_verbatim(a:lnum)
                                return empty(l:line) ? indent(l:prev_lnum) : indent(a:lnum)
    4              0.000005   endif
                            
                              " Use previous indentation for comments
    4              0.000034   if l:line =~# '^\s*%'
                                return indent(a:lnum)
    4              0.000003   endif
                            
                              " Remove comments before subsequent checks
    4   0.000089   0.000046   let l:line = s:clean_line(l:line)
                            
                              " Align on ampersands
    4   0.000500   0.000074   let l:ind = s:indent_amps.check(a:lnum, l:line, l:prev_lnum, l:prev_line)
    4              0.000031   if s:indent_amps.finished | return l:ind | endif
    4              0.000013   let l:prev_lnum = s:indent_amps.prev_lnum
    4              0.000012   let l:prev_line = s:indent_amps.prev_line
                            
                              " Indent environments, delimiters, and conditionals
    4   0.000251   0.000067   let l:ind += s:indent_envs(l:line, l:prev_line)
    4   0.000332   0.000066   let l:ind += s:indent_items(l:line, a:lnum, l:prev_line, l:prev_lnum)
    4   0.001207   0.000069   let l:ind += s:indent_delims(l:line, a:lnum, l:prev_line, l:prev_lnum)
    4   0.000310   0.000068   let l:ind += s:indent_conditionals(l:line, a:lnum, l:prev_line, l:prev_lnum)
                            
                              " Indent tikz commands
    4              0.000009   if g:vimtex_indent_tikz_commands
    4   0.001432   0.000110     let l:ind += s:indent_tikz(l:prev_lnum, l:prev_line)
    4              0.000004   endif
                            
    4              0.000015   return l:ind < 0 ? 0 : l:ind

FUNCTION  <SNR>94_get_corr_delimiter()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:1055
Called 122 times
Total time:   0.016808
 Self time:   0.016808

count  total (s)   self (s)
  122              0.000491   let l:type = a:0 > 0 ? a:1 : 'delim_all'
                            
 1464              0.002562   for l:pair in g:vimtex#delim#lists[l:type].name
 1464              0.003500     if a:delim ==# l:pair[0]
  120              0.000277       return l:pair[1]
 1344              0.003214     elseif a:delim ==# l:pair[1]
    2              0.000005       return l:pair[0]
 1342              0.000925     endif
 1342              0.001065   endfor

FUNCTION  <SNR>117_in_verbatim()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:105
Called 8 times
Total time:   0.003205
 Self time:   0.000390

count  total (s)   self (s)
    8   0.002976   0.000161   let l:synstack = vimtex#syntax#stack(a:lnum, col([a:lnum, '$']) - 2)
                            
    8              0.000212   return match(l:synstack, '\v^tex%(Lst|Verb|Markdown|Minted)Zone') >= 0 && match(l:synstack, '\v^tex%(Minted)?Env') < 0

FUNCTION  <SNR>91_get_cmd_name()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/cmd.vim:724
Called 40 times
Total time:   0.002581
 Self time:   0.002581

count  total (s)   self (s)
   40              0.001396   let [l:lnum, l:cnum] = searchpos( '\v\\%(\a+\*?|[,:;!])', a:next ? 'nW' : 'cbnW')
   40              0.000878   let l:match = matchstr(getline(l:lnum), '^\v\\%([,:;!]|\a*\*?)', l:cnum-1)
   40              0.000210   return [l:lnum, l:cnum, l:match]

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: /usr/share/nvim/runtime/ftplugin.vim:15
Called 2 times
Total time:   0.007581
 Self time:   0.007581

count  total (s)   self (s)
    2              0.000050     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    2              0.000005     endif
                            
    2              0.000032     let s = expand("<amatch>")
    2              0.000008     if s != ""
    2              0.000024       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    2              0.000002       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
    4              0.000040       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    2              0.007322         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
    4              0.000023       endfor
    2              0.000004     endif

FUNCTION  <SNR>117_indent_envs()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:195
Called 4 times
Total time:   0.000184
 Self time:   0.000184

count  total (s)   self (s)
    4              0.000010   let l:ind = 0
                            
    4              0.000091   let l:ind += s:sw*(    a:prev_line =~# s:envs_begin && a:prev_line !~# s:envs_end && a:prev_line !~# s:envs_ignored)
    4              0.000057   let l:ind -= s:sw*(    a:line !~# s:envs_begin && a:line =~# s:envs_end && a:line !~# s:envs_ignored)
                            
    4              0.000007   return l:ind

FUNCTION  <SNR>2_LoadIndent()
    Defined: /usr/share/nvim/runtime/indent.vim:14
Called 2 times
Total time:   0.002473
 Self time:   0.002473

count  total (s)   self (s)
    2              0.000019     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    2              0.000002     endif
    2              0.000021     let s = expand("<amatch>")
    2              0.000009     if s != ""
    2              0.000007       if exists("b:did_indent")
                            	unlet b:did_indent
    2              0.000002       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
    4              0.000049       for name in split(s, '\.')
                                    " XXX: "[.]" in the pattern makes it a wildcard on Windows
    2              0.002153         exe $'runtime! indent/{name}[.]{{vim,lua}}'
    4              0.000088       endfor
    2              0.000024     endif

FUNCTION  <SNR>106_parse_args()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/pos.vim:67
Called 1044 times
Total time:   0.044513
 Self time:   0.043003

count  total (s)   self (s)
                              "
                              " The arguments should be in one of the following forms (when unpacked):
                              "
                              "   [lnum, cnum]
                              "   [bufnum, lnum, cnum, ...]
                              "   {'lnum' : lnum, 'cnum' : cnum}
                              "
                            
 1044              0.005447   if len(a:args) > 1
   40              0.000275     return s:parse_args([a:args])
 1004              0.003518   elseif len(a:args) == 1
 1004              0.005846     if type(a:args[0]) == v:t_dict
  249              0.002102       return [get(a:args[0], 'lnum'), get(a:args[0], 'cnum')]
  755              0.000875     else
  755              0.002698       if len(a:args[0]) == 2
   40              0.000097         return a:args[0]
  715              0.000770       else
  715              0.003299         return a:args[0][1:]
                                  endif
                                endif
                              else
                                return a:args
                              endif

FUNCTION  vimtex#delim#get_next()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:365
Called 120 times
Total time:   0.155009
 Self time:   0.003739

count  total (s)   self (s)
  120   0.154875   0.003605   return s:get_delim(extend({ 'direction' : 'next', 'type' : a:type, 'side' : a:side,}, get(a:, '1', {})))

FUNCTION  vimtex#delim#get_matching()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:410
Called 89 times
Total time:   0.197943
 Self time:   0.013463

count  total (s)   self (s)
   89              0.000887   if empty(a:delim) || !has_key(a:delim, 'lnum') | return {} | endif
                            
                              " Get the matching position
   89   0.001692   0.001132   let l:save_pos = vimtex#pos#get_cursor()
   89   0.005749   0.001138   call vimtex#pos#set_cursor(a:delim)
   89   0.044023   0.001553   let [l:match, l:lnum, l:cnum] = a:delim.get_matching()
   89   0.006673   0.001589   call vimtex#pos#set_cursor(l:save_pos)
                            
                              " Create the match result
   89              0.002598   let l:matching = deepcopy(a:delim)
   89              0.000374   let l:matching.lnum = l:lnum
   89              0.000206   let l:matching.cnum = l:cnum
   89              0.000256   let l:matching.match = l:match
   89              0.000274   let l:matching.corr  = a:delim.match
   89              0.000396   let l:matching.side = a:delim.is_open ? 'close' : 'open'
   89              0.000271   let l:matching.is_open = !a:delim.is_open
   89              0.000351   let l:matching.re.corr = a:delim.re.this
   89              0.000246   let l:matching.re.this = a:delim.re.corr
                            
   89              0.000321   if l:matching.type ==# 'delim'
   42              0.000138     let l:matching.corr_delim = a:delim.delim
   42              0.000107     let l:matching.corr_mod = a:delim.mod
   42              0.000107     let l:matching.delim = a:delim.corr_delim
   42              0.000101     let l:matching.mod = a:delim.corr_mod
   47              0.000367   elseif l:matching.type ==# 'env' && has_key(l:matching, 'name')
   40              0.000079     if l:matching.is_open
   19              0.041205       let l:matching.env_cmd = vimtex#cmd#get_at(l:lnum, l:cnum)
   21              0.000023     else
   21              0.000413       unlet l:matching.env_cmd
   40              0.000045     endif
   40              0.000877     let l:matching.name = matchstr(l:match, '{\zs\k*\ze\*\?}')
   89              0.000086   endif
                            
   89              0.000202   return l:matching

FUNCTION  vimtex#pos#set_cursor()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/pos.vim:7
Called 924 times
Total time:   0.058216
 Self time:   0.017856

count  total (s)   self (s)
  924   0.056893   0.016534   call cursor(s:parse_args(a:000))

FUNCTION  vimtex#syntax#stack()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/syntax.vim:7
Called 280 times
Total time:   0.197481
 Self time:   0.197481

count  total (s)   self (s)
  280              0.003925   let l:pos = a:0 > 0 ? [a:1, a:2] : [line('.'), col('.')]
  280              0.001487   if mode() ==# 'i'
   84              0.000505     let l:pos[1] -= 1
  280              0.000316   endif
  280              0.005373   call map(l:pos, 'max([v:val, 1])')
                            
  280              0.183629   return map(synstack(l:pos[0], l:pos[1]), "synIDattr(v:val, 'name')")

FUNCTION  <SNR>32_Highlight_Matching_Pair()
    Defined: /usr/share/nvim/runtime/plugin/matchparen.vim:45
Called 465 times
Total time:   0.165859
 Self time:   0.149605

count  total (s)   self (s)
  465              0.008644   if !exists("w:matchparen_ids")
                                let w:matchparen_ids = []
  465              0.001167   endif
                              " Remove any previous match.
  465   0.023201   0.007765   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  465              0.005598   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
  465              0.000436   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  465              0.003738   let c_lnum = line('.')
  465              0.002433   let c_col = col('.')
  465              0.001023   let before = 0
                            
  465              0.003238   let text = getline(c_lnum)
  465              0.006491   let c_before = text->strpart(0, c_col - 1)->slice(-1)
  465              0.003605   let c = text->strpart(c_col - 1)->slice(0, 1)
  465              0.016731   let plist = split(&matchpairs, '.\zs[:,]')
  465              0.003703   let i = index(plist, c)
  465              0.001181   if i < 0
                                " not found, in Insert mode try character before the cursor
  459              0.003002     if c_col > 1 && (mode() == 'i' || mode() == 'R')
  146              0.000794       let before = strlen(c_before)
  146              0.000358       let c = c_before
  146              0.000640       let i = index(plist, c)
  459              0.000572     endif
  459              0.000818     if i < 0
                                  " not found, nothing to do
  459              0.001098       return
                                endif
    6              0.000020   endif
                            
                              " Figure out the arguments for searchpairpos().
    6              0.000016   if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
    6              0.000008   else
    6              0.000016     let s_flags = 'nbW'
    6              0.000020     let c2 = c
    6              0.000061     let c = plist[i - 1]
    6              0.000006   endif
    6              0.000022   if c == '['
                                let c = '\['
                                let c2 = '\]'
    6              0.000005   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
    6              0.000011   if before > 0
                                let save_cursor = getcurpos()
                                call cursor(c_lnum, c_col - before)
                                defer setpos('.', save_cursor)
    6              0.000005   endif
                            
    6              0.000088   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
    6              0.000038   elseif exists("b:ts_highlight") && &syntax != 'on'
                                let s_skip = "match(v:lua.vim.treesitter.get_captures_at_cursor(), '" .. 'string\|character\|singlequote\|escape\|symbol\|comment' .. "') != -1"
    6              0.000006   else
                                " do not attempt to match when the syntax item where the cursor is
                                " indicates there does not exist a matching parenthesis, e.g. for shells
                                " case statement: "case $var in foobar)"
                                "
                                " add the check behind a filetype check, so it only needs to be
                                " evaluated for certain filetypes
    6              0.000100     if ['sh']->index(&filetype) >= 0 && synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "shSnglCase"}) >= 0
                                  return
    6              0.000006     endif
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
    6              0.000048     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
    6              0.000011     try
    6   0.055908   0.055518       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
    6              0.000010     endtry
    6              0.000005   endif
                            
                              " Limit the search to lines visible in the window.
    6              0.000050   let stoplinebottom = line('w$')
    6              0.000021   let stoplinetop = line('w0')
    6              0.000014   if i % 2 == 0
                                let stopline = stoplinebottom
    6              0.000006   else
    6              0.000016     let stopline = stoplinetop
    6              0.000005   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
    6              0.000052   if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
    6              0.000005   else
    6              0.000051     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
    6              0.000004   endif
    6              0.000009   try
    6   0.004379   0.003952     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
    6              0.000011   endtry
                            
                              " If a match is found setup match highlighting.
    6              0.000035   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom
    6              0.000027     if !g:matchparen_disable_cursor_hl
    6              0.000164       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
                                else
                                  call add(w:matchparen_ids, matchaddpos('MatchParen', [[m_lnum, m_col]], 10))
    6              0.000007     endif
    6              0.000017     let w:paren_hl_on = 1
    6              0.000005   endif

FUNCTION  <SNR>91_get_cmd_part()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/cmd.vim:733
Called 120 times
Total time:   0.237704
 Self time:   0.014952

count  total (s)   self (s)
  120   0.002272   0.001436   let l:save_pos = vimtex#pos#get_cursor()
  120   0.006992   0.001436   call vimtex#pos#set_cursor(a:start_pos)
  120   0.157051   0.002042   let l:open = vimtex#delim#get_next('delim_tex', 'open')
  120   0.009707   0.002397   call vimtex#pos#set_cursor(l:save_pos)
                            
                              " Ensure that the next delimiter is found and is of the right type
  120              0.001417   if empty(l:open) || l:open.match !=# a:part | return {} | endif
                            
                              " Ensure that the delimiter is the next non-whitespace character according to
                              " a configurable rule
   80   0.009860   0.003257   if ! call(g:vimtex_parser_cmd_separator_check, [ s:text_between(a:start_pos, l:open)])
   40              0.000093     return {}
   40              0.000047   endif
                            
   40   0.046287   0.000820   let l:close = vimtex#delim#get_matching(l:open)
   40              0.000143   if empty(l:close)
                                return {}
   40              0.000033   endif
                            
   40   0.002840   0.000869   return { 'open' : l:open, 'close' : l:close, 'text' : s:text_between(l:open, l:close),}

FUNCTION  <SNR>94_get_re_for_delim()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:1036
Called 244 times
Total time:   0.034570
 Self time:   0.030184

count  total (s)   self (s)
  244              0.001129   let l:type = a:0 > 0 ? a:1 : 'delim_all'
                            
                              " First check for unmatched math delimiter
  244              0.000635   if a:delim ==# '.'
                                return g:vimtex#delim#re.delim_math[a:side ? 'open' : 'close']
  244              0.000249   endif
                            
                              " Next check normal delimiters
  244   0.028157   0.023770   let l:index = index(map(   copy(g:vimtex#delim#lists[l:type].name),   {_, x -> x[a:side]}), a:delim)
  244              0.002225   return l:index >= 0 ? g:vimtex#delim#lists[l:type].re[l:index][a:side] : ''

FUNCTION  <SNR>94_get_timeout()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:1029
Called 82 times
Total time:   0.001253
 Self time:   0.001253

count  total (s)   self (s)
   82              0.001118   return (empty(v:insertmode) ? mode() : v:insertmode) ==# 'i' ? g:vimtex_delim_insert_timeout : g:vimtex_delim_timeout

FUNCTION  <SNR>32_Remove_Matches()
    Defined: /usr/share/nvim/runtime/plugin/matchparen.vim:203
Called 465 times
Total time:   0.015436
 Self time:   0.015436

count  total (s)   self (s)
  465              0.003808   if exists('w:paren_hl_on') && w:paren_hl_on
   12              0.000056     while !empty(w:matchparen_ids)
    6              0.000081       silent! call remove(w:matchparen_ids, 0)->matchdelete()
   12              0.000024     endwhile
    6              0.000027     let w:paren_hl_on = 0
  465              0.000443   endif

FUNCTION  vimtex#syntax#in()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/syntax.vim:18
Called 268 times
Total time:   0.207515
 Self time:   0.013965

count  total (s)   self (s)
  268   0.207056   0.013505   return match(call('vimtex#syntax#stack', a:000), '^' . a:name) >= 0

FUNCTION  <SNR>117_indent_delims()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:248
Called 4 times
Total time:   0.001138
 Self time:   0.000209

count  total (s)   self (s)
    4              0.000017   if s:re_delim_trivial | return 0 | endif
                            
    4              0.000009   if s:re_opt.close_indented
                                return s:sw*(vimtex#util#count(a:prev_line, s:re_open) - vimtex#util#count(a:prev_line, s:re_close))
    4              0.000005   else
    4   0.001072   0.000144     return s:sw*(vimtex#util#count_open(a:prev_line, s:re_open, s:re_close)      - vimtex#util#count_close(a:line, s:re_open, s:re_close))
                              endif

FUNCTION  vimtex#util#count_close()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/util.vim:48
Called 4 times
Total time:   0.000349
 Self time:   0.000349

count  total (s)   self (s)
                              " Counts the number of unopened closing patterns in the given line.
    4              0.000322   let l:i = match(a:line, a:re_close)
    4              0.000014   if l:i < 0 | return 0 | endif
                            
                              let l:sum = 0
                              while l:i >= 0
                                let l:sum += 1
                                let l:imax_first = l:i
                                let l:i += len(matchstr(a:line, a:re_close, l:i))
                                let l:i = match(a:line, a:re_close, l:i)
                              endwhile
                            
                              let l:i = match(a:line, a:re_open)
                              while l:i >= 0 && l:i < l:imax_first
                                let l:sum -= 1
                                let l:i += len(matchstr(a:line, a:re_open, l:i))
                                let l:i = match(a:line, a:re_open, l:i)
                              endwhile
                            
                              return max([l:sum, 0])

FUNCTION  <SNR>117_get_prev_lnum()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:84
Called 4 times
Total time:   0.002610
 Self time:   0.000298

count  total (s)   self (s)
    4              0.000014   let l:lnum = a:lnum
    4              0.000022   let l:line = getline(l:lnum)
                            
    4   0.002362   0.000138   while l:lnum > 0 && (l:line =~# '^\s*%' || s:in_verbatim(l:lnum))
                                let l:lnum = prevnonblank(l:lnum - 1)
                                let l:line = getline(l:lnum)
    4              0.000010   endwhile
                            
    4   0.000158   0.000069   return [ l:lnum, l:lnum > 0 ? s:clean_line(l:line) : '',]

FUNCTION  vimtex#pos#val()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/pos.vim:24
Called 80 times
Total time:   0.004673
 Self time:   0.002029

count  total (s)   self (s)
   80   0.003889   0.001246   let [l:lnum, l:cnum; l:rest] = s:parse_args(a:000)
                            
   80              0.000630   return 100000*l:lnum + min([l:cnum, 90000])

FUNCTION  <SNR>46_SynSet()
    Defined: /usr/share/nvim/runtime/syntax/synload.vim:27
Called 2 times
Total time:   0.005176
 Self time:   0.005176

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    2              0.000014   syn clear
    2              0.000010   if exists("b:current_syntax")
                                unlet b:current_syntax
    2              0.000002   endif
                            
    2              0.000016   0verbose let s = expand("<amatch>")
    2              0.000009   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    2              0.000005   elseif s == "OFF"
                                let s = ""
    2              0.000002   endif
                            
    2              0.000003   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
    4              0.000027     for name in split(s, '\.')
    2              0.000008       if !empty(name)
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    2              0.004986         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
    2              0.000006       endif
    4              0.000007     endfor
    2              0.000002   endif

FUNCTION  <SNR>117_indent_conditionals()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:275
Called 4 times
Total time:   0.000243
 Self time:   0.000243

count  total (s)   self (s)
    4              0.000030   if empty(s:conditionals) | return 0 | endif
                            
    4              0.000110   let l:ind = s:sw*(    (a:prev_line =~# s:conditionals.open     || a:prev_line =~# s:conditionals.else) && a:prev_line !~# s:conditionals.close)
    4              0.000080   let l:ind -= s:sw*(    a:line !~# s:conditionals.open && (a:line =~# s:conditionals.close     || a:line =~# s:conditionals.else))
                            
    4              0.000008   return l:ind

FUNCTION  vimtex#util#count_open()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/util.vim:24
Called 4 times
Total time:   0.000580
 Self time:   0.000580

count  total (s)   self (s)
                              " Counts the number of unclosed opening patterns in the given line.
    4              0.000530   let l:i = match(a:line, a:re_open)
    4              0.000033   if l:i < 0 | return 0 | endif
                            
                              let l:sum = 0
                              let l:imin_last = l:i
                              while l:i >= 0
                                let l:sum += 1
                                let l:i += len(matchstr(a:line, a:re_open, l:i))
                                let l:i = match(a:line, a:re_open, l:i)
                              endwhile
                            
                              let l:i = match(a:line, a:re_close, l:imin_last)
                              while l:i >= 0
                                let l:sum -= 1
                                let l:i += len(matchstr(a:line, a:re_close, l:i))
                                let l:i = match(a:line, a:re_close, l:i)
                              endwhile
                            
                              return max([l:sum, 0])

FUNCTION  <SNR>91_get_cmd_overlay()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/cmd.vim:763
Called 40 times
Total time:   0.001286
 Self time:   0.001286

count  total (s)   self (s)
   40              0.000716   let l:match = matchstr(getline(a:lnum), '^\s*<[^>]*>', a:cnum)
                            
   40              0.000487   return empty(l:match) ? {} : {    'open' : {'lnum' : a:lnum, 'cnum' : a:cnum + 1},    'close' : {'lnum' : a:lnum, 'cnum' : a:cnum + strlen(l:match)},    'text' : l:match   }

FUNCTION  <SNR>94_get_delim()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:576
Called 386 times
Total time:   0.610568
 Self time:   0.285435

count  total (s)   self (s)
                              " Arguments:
                              "   opts = {
                              "     'direction'   :  next
                              "                      prev
                              "                      current
                              "     'type'        :  env_tex
                              "                      env_math
                              "                      env_all
                              "                      delim_tex
                              "                      delim_math
                              "                      delim_math_modq (possibly modified math delimiter)
                              "                      delim_math_mod  (modified math delimiter)
                              "                      delim_all
                              "                      all
                              "     'side'        :  open
                              "                      close
                              "                      both
                              "     'syn_exclude' :  Don't match in given syntax
                              "  }
                              "
                              " Returns:
                              "   delim = {
                              "     type    : env | delim
                              "     side    : open | close
                              "     name    : name of environment [only for type env]
                              "     lnum    : number
                              "     cnum    : number
                              "     match   : unparsed matched delimiter
                              "     corr    : corresponding delimiter
                              "     re : {
                              "       open  : regexp for the opening part
                              "       close : regexp for the closing part
                              "     }
                              "     remove  : method to remove the delimiter
                              "   }
                              "
  386   0.008648   0.005343   let l:save_pos = vimtex#pos#get_cursor()
  386              0.004369   let l:re = g:vimtex#delim#re[a:opts.type][a:opts.side]
  386              0.001237   while 1
  386              0.159036     let [l:lnum, l:cnum] = a:opts.direction ==# 'next' ? searchpos(l:re, 'cnW', line('.') + g:vimtex_delim_stopline) : a:opts.direction ==# 'prev'   ? searchpos(l:re, 'bcnW', max([line('.') - g:vimtex_delim_stopline, 1]))   : searchpos(l:re, 'bcnW', line('.'))
  386              0.004252     if l:lnum == 0 | break | endif
                            
  219              0.002190     if has_key(a:opts, 'syn_exclude') && vimtex#syntax#in(a:opts.syn_exclude, l:lnum, l:cnum)
                                  call vimtex#pos#set_cursor(vimtex#pos#prev(l:lnum, l:cnum))
                                  continue
  219              0.000177     endif
                            
  219              0.000396     break
  386              0.001167   endwhile
  386   0.037024   0.008245   call vimtex#pos#set_cursor(l:save_pos)
                            
  386              0.032619   let l:match = matchstr(getline(l:lnum), '^' . l:re, l:cnum-1)
                            
  386              0.005896   if a:opts.direction ==# 'current' && l:cnum + strlen(l:match) + (mode() ==# 'i' ? 1 : 0) <= col('.')
  217              0.000760     let l:match = ''
  217              0.000582     let l:lnum = 0
  217              0.000383     let l:cnum = 0
  386              0.000456   endif
                            
 1972              0.006721   for l:parser in s:parsers
 1755   0.060301   0.019526     if l:parser.detect(l:match)
  169   0.110717   0.020843       return l:parser.parse({ 'lnum' : l:lnum, 'cnum' : l:cnum, 'match' : l:match, 'remove' : function('s:delim_remove'),}, a:opts)
 1586              0.001585     endif
 1803              0.002673   endfor
                            
  217              0.000544   return {}

FUNCTION  TexNewMathZone()
    Defined: /usr/share/nvim/runtime/syntax/tex.vim:457
Called 4 times
Total time:   0.000758
 Self time:   0.000758

count  total (s)   self (s)
    4              0.000018    let grpname  = "texMathZone".a:sfx
    4              0.000013    let syncname = "texSyncMathZone".a:sfx
    4              0.000008    if s:tex_fold_enabled
                                let foldcmd= " fold"
    4              0.000004    else
    4              0.000007     let foldcmd= ""
    4              0.000019    endif
    4              0.000035    exe "syn cluster texMathZones add=".grpname
    4              0.000023    if s:tex_fast =~# 'M'
    4              0.000121     exe 'syn region '.grpname.' start='."'".'\\begin\s*{\s*'.a:mathzone.'\s*}'."'".' end='."'".'\\end\s*{\s*'.a:mathzone.'\s*}'."'".' keepend contains=@texMathZoneGroup'.foldcmd
    4              0.000074     exe 'syn sync match '.syncname.' grouphere '.grpname.' "\\begin\s*{\s*'.a:mathzone.'\*\s*}"'
    4              0.000061     exe 'syn sync match '.syncname.' grouphere '.grpname.' "\\begin\s*{\s*'.a:mathzone.'\*\s*}"'
    4              0.000004    endif
    4              0.000025    exe 'hi def link '.grpname.' texMath'
    4              0.000006    if a:starform
    4              0.000014     let grpname  = "texMathZone".a:sfx.'S'
    4              0.000013     let syncname = "texSyncMathZone".a:sfx.'S'
    4              0.000027     exe "syn cluster texMathZones add=".grpname
    4              0.000018     if s:tex_fast =~# 'M'
    4              0.000099      exe 'syn region '.grpname.' start='."'".'\\begin\s*{\s*'.a:mathzone.'\*\s*}'."'".' end='."'".'\\end\s*{\s*'.a:mathzone.'\*\s*}'."'".' keepend contains=@texMathZoneGroup'.foldcmd
    4              0.000060      exe 'syn sync match '.syncname.' grouphere '.grpname.' "\\begin\s*{\s*'.a:mathzone.'\*\s*}"'
    4              0.000058      exe 'syn sync match '.syncname.' grouphere '.grpname.' "\\begin\s*{\s*'.a:mathzone.'\*\s*}"'
    4              0.000004     endif
    4              0.000021     exe 'hi def link '.grpname.' texMath'
    4              0.000003    endif

FUNCTION  203()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:688
Called 386 times
Total time:   0.005232
 Self time:   0.005232

count  total (s)   self (s)
  386              0.004683   return a:match =~# '^\\\%(begin\|end\)\>'

FUNCTION  204()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:693
Called 40 times
Total time:   0.152735
 Self time:   0.006991

count  total (s)   self (s)
   40              0.000861   let result = extend(deepcopy(self), a:ctx, 'keep')
   40              0.000256   unlet result.detect
   40              0.000081   unlet result.parse
                            
   40              0.001092   let result.name = matchstr(a:ctx.match, '{\zs[^}*]*\ze\*\?}')
   40              0.000469   let result.starred = match(a:ctx.match, '\*}$') > 0
   40              0.000425   let result.side = a:ctx.match =~# '\\begin' ? 'open' : 'close'
   40              0.000179   let result.is_open = result.side ==# 'open'
                            
   40              0.000185   let result.gms_flags = result.is_open ? 'nW' : 'bnW'
   40              0.000644   let result.gms_stopline = result.is_open ? line('.') + g:vimtex_delim_stopline : max([1, line('.') - g:vimtex_delim_stopline])
                            
   40              0.000099   if result.is_open
   21   0.146226   0.000482     let result.env_cmd = vimtex#cmd#get_at(a:ctx.lnum, a:ctx.cnum)
   40              0.000042   endif
                            
   40              0.001042   let result.corr = result.is_open ? substitute(a:ctx.match, 'begin', 'end', '') : substitute(a:ctx.match, 'end', 'begin', '')
                            
   40              0.000327   let result.re.this = result.is_open ? result.re.open  : result.re.close
   40              0.000211   let result.re.corr = result.is_open ? result.re.close : result.re.open
                            
   40              0.000090   return result

FUNCTION  205()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:723
Called 40 times
Total time:   0.006108
 Self time:   0.005433

count  total (s)   self (s)
   40              0.000146   try
   40   0.003937   0.003262     let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, '', 0, s:get_timeout())
                              catch /E118/
                                let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, '', self.gms_stopline)
   40              0.000141   endtry
                            
   40              0.001022   let match = matchstr(getline(lnum), '^' . self.re.corr, cnum-1)
   40              0.000186   return [match, lnum, cnum]

FUNCTION  206()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:741
Called 346 times
Total time:   0.004886
 Self time:   0.003812

count  total (s)   self (s)
  346   0.004499   0.003424   return a:x =~# '^\$\$\?' && !vimtex#syntax#in('texComment')

FUNCTION  207()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:746
Called 1 time
Total time:   0.001642
 Self time:   0.000197

count  total (s)   self (s)
                              "
                              " TeX shorthand are these
                              "
                              "   $ ... $   (inline math)
                              "   $$ ... $$ (displayed equations)
                              "
                              " The notation does not provide the delimiter side directly, which provides
                              " a slight problem. However, we can utilize the syntax information to parse
                              " the side.
                              "
    1              0.000026   let result = extend(deepcopy(self), a:ctx, 'keep')
    1              0.000008   unlet result.detect
    1              0.000002   unlet result.parse
                            
    1              0.000007   let result.corr = a:ctx.match
    1              0.000025   let result.re = { 'this'  : '\m' . escape(a:ctx.match, '$'), 'corr'  : '\m' . escape(a:ctx.match, '$'), 'open'  : '\m' . escape(a:ctx.match, '$'), 'close' : '\m' . escape(a:ctx.match, '$'),}
    1   0.001466   0.000022   let result.side = vimtex#syntax#in(   (a:ctx.match ==# '$' ? 'texMathZoneTI' : 'texMathZoneTD'),   a:ctx.lnum, a:ctx.cnum+1) ? 'open' : 'close'
    1              0.000007   let result.is_open = result.side ==# 'open'
    1              0.000004   let result.gms_flags = result.is_open ? 'nW' : 'bnW'
    1              0.000019   let result.gms_stopline = result.is_open ? line('.') + g:vimtex_delim_stopline : max([1, line('.') - g:vimtex_delim_stopline])
                            
    1              0.000008   if (a:opts.side !=# 'both') && (a:opts.side !=# result.side)
                                "
                                " The current match ($ or $$) is not the correct side, so we must
                                " continue the search recursively. We do this by changing the cursor
                                " position, since the function searchpos relies on the current cursor
                                " position.
                                "
                                let l:save_pos = vimtex#pos#get_cursor()
                            
                                " Move the cursor
                                call vimtex#pos#set_cursor(a:opts.direction ==# 'next' ? vimtex#pos#next(a:ctx.lnum, a:ctx.cnum) : vimtex#pos#prev(a:ctx.lnum, a:ctx.cnum))
                            
                                " Get new result
                                let result = s:get_delim(a:opts)
                            
                                " Restore the cursor
                                call vimtex#pos#set_cursor(l:save_pos)
    1              0.000001   endif
                            
    1              0.000004   return result

FUNCTION  208()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:803
Called 1 time
Total time:   0.000087
 Self time:   0.000087

count  total (s)   self (s)
    1              0.000048   let [lnum, cnum] = searchpos(self.re.corr, self.gms_flags, self.gms_stopline)
                            
    1              0.000033   let match = matchstr(getline(lnum), '^' . self.re.corr, cnum-1)
    1              0.000004   return [match, lnum, cnum]

FUNCTION  209()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:815
Called 345 times
Total time:   0.003014
 Self time:   0.003014

count  total (s)   self (s)
  345              0.002597   return a:match =~# '^\\\%((\|)\|\[\|\]\)'

FUNCTION  210()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:820
Called 6 times
Total time:   0.000929
 Self time:   0.000929

count  total (s)   self (s)
    6              0.000130   let result = extend(deepcopy(self), a:ctx, 'keep')
    6              0.000036   unlet result.detect
    6              0.000012   unlet result.parse
                            
    6              0.000086   let result.side = a:ctx.match =~# '\\(\|\\\[' ? 'open' : 'close'
    6              0.000029   let result.is_open = result.side ==# 'open'
    6              0.000024   let result.gms_flags = result.is_open ? 'nW' : 'bnW'
    6              0.000086   let result.gms_stopline = result.is_open ? line('.') + g:vimtex_delim_stopline : max([1, line('.') - g:vimtex_delim_stopline])
                            
    6              0.000234   let result.corr = result.is_open ? substitute(substitute(a:ctx.match, '\[', ']', ''), '(', ')', '') : substitute(substitute(a:ctx.match, '\]', '[', ''), ')', '(', '')
                            
    6              0.000149   let result.re = { 'open'  : g:vimtex#re#not_bslash   . (a:ctx.match =~# '\\(\|\\)' ? '\m\\(' : '\m\\\['), 'close' : g:vimtex#re#not_bslash   . (a:ctx.match =~# '\\(\|\\)' ? '\m\\)' : '\m\\\]'),}
                            
    6              0.000036   let result.re.this = result.is_open ? result.re.open  : result.re.close
    6              0.000028   let result.re.corr = result.is_open ? result.re.close : result.re.open
                            
    6              0.000026   return result

FUNCTION  211()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:850
Called 6 times
Total time:   0.000934
 Self time:   0.000934

count  total (s)   self (s)
    6              0.000746   let [lnum, cnum] = searchpos(self.re.corr, self.gms_flags, self.gms_stopline)
                            
    6              0.000152   let match = matchstr(getline(lnum), '^' . self.re.corr, cnum-1)
    6              0.000025   return [match, lnum, cnum]

FUNCTION  212()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:862
Called 339 times
Total time:   0.003345
 Self time:   0.003345

count  total (s)   self (s)
  339              0.003026   return a:match =~# '^\\\%(left\|right\)\s*\.'

FUNCTION  215()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:951
Called 339 times
Total time:   0.024298
 Self time:   0.024298

count  total (s)   self (s)
  339              0.023803   return a:match =~# '^' . g:vimtex#delim#re.delim_all.both

FUNCTION  216()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:956
Called 122 times
Total time:   0.084251
 Self time:   0.032873

count  total (s)   self (s)
  122              0.002235   let result = extend(deepcopy(self), a:ctx, 'keep')
  122              0.000477   unlet result.detect
  122              0.000218   unlet result.parse
                            
  122              0.005849   let result.side = a:ctx.match =~# g:vimtex#delim#re.delim_all.open ? 'open' : 'close'
  122              0.000565   let result.is_open = result.side ==# 'open'
  122              0.000457   let result.gms_flags = result.is_open ? 'nW' : 'bnW'
  122              0.001532   let result.gms_stopline = result.is_open ? line('.') + g:vimtex_delim_stopline : max([1, line('.') - g:vimtex_delim_stopline])
                            
                              " Find corresponding delimiter and the regexps
  122              0.003411   if a:ctx.match =~# '^' . g:vimtex#delim#re.mods.both
                                let m1 = matchstr(a:ctx.match, '^' . g:vimtex#delim#re.mods.both)
                                let d1 = substitute(strpart(a:ctx.match, len(m1)), '^\s*', '', '')
                                let s1 = !result.is_open
                                let re1 = s:get_re_for_delim(m1, s1, 'mods')  . '\s*' . s:get_re_for_delim(d1, s1, 'delim_math')
                            
                                let m2 = s:get_corr_delimiter(m1, 'mods')
                                let d2 = s:get_corr_delimiter(d1, 'delim_math')
                                let s2 = result.is_open
                                let re2 = s:get_re_for_delim(m2, s2, 'mods') . '\s*' . (m1 =~# '\\\%(left\|right\)'   ? '\%(' . s:get_re_for_delim(d2, s2, 'delim_math') . '\|\.\)'   : s:get_re_for_delim(d2, s2, 'delim_math'))
  122              0.000205   else
  122              0.000453     let d1 = a:ctx.match
  122              0.000271     let m1 = ''
  122   0.021143   0.002200     let re1 = s:get_re_for_delim(a:ctx.match, !result.is_open)
                            
  122   0.018877   0.002069     let d2 = s:get_corr_delimiter(a:ctx.match)
  122              0.000287     let m2 = ''
  122   0.017598   0.001972     let re2 = s:get_re_for_delim(d2, result.is_open)
  122              0.000145   endif
                            
  122              0.000498   let result.delim = d1
  122              0.000314   let result.mod = m1
  122              0.000599   let result.corr = m2 . d2
  122              0.000575   let result.corr_delim = d2
  122              0.000297   let result.corr_mod = m2
  122              0.001634   let result.re = { 'this'  : re1, 'corr'  : re2, 'open'  : result.is_open ? re1 : re2, 'close' : result.is_open ? re2 : re1,}
                            
  122              0.000282   return result

FUNCTION  217()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:1010
Called 42 times
Total time:   0.035340
 Self time:   0.034763

count  total (s)   self (s)
   42              0.000151   try
   42   0.032851   0.032274     let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, 'synIDattr(synID(line("."), col("."), 0), "name") =~? "comment"', 0, s:get_timeout())
                              catch /E118/
                                let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, 'synIDattr(synID(line("."), col("."), 0), "name") =~? "comment"', self.gms_stopline)
   42              0.000122   endtry
                            
   42              0.001087   let match = matchstr(getline(lnum), '^' . self.re.corr, cnum-1)
   42              0.000236   return [match, lnum, cnum]

FUNCTION  vimtex#pos#get_cursor()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/pos.vim:12
Called 675 times
Total time:   0.005400
 Self time:   0.005400

count  total (s)   self (s)
  675              0.004589   return getcurpos()

FUNCTION  231()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/matchparen.vim:74
Called 266 times
Total time:   0.876524
 Self time:   0.032704

count  total (s)   self (s)
  266   0.008931   0.002430   call self.clear()
                            
  266   0.218689   0.006175   if vimtex#syntax#in_comment() | return | endif
                            
                              " This is a hack to ensure that $ in visual block mode adhers to the rule
                              " specified in :help v_$
  266              0.002694   if mode() ==# "\<c-v>"
                                let l:pos = vimtex#pos#get_cursor()
                                if len(l:pos) == 5 && l:pos[-1] == 2147483647
                                  call feedkeys('$', 'in')
                                endif
  266              0.000225   endif
                            
  266   0.481101   0.008774   let l:current = vimtex#delim#get_current('all', 'both')
  266              0.002056   if empty(l:current) | return | endif
                            
   49   0.153608   0.001131   let l:corresponding = vimtex#delim#get_matching(l:current)
   49              0.000269   if empty(l:corresponding) | return | endif
   49              0.000269   if empty(l:corresponding.match) | return | endif
                            
   49              0.000429   let [l:open, l:close] = l:current.is_open ? [l:current, l:corresponding] : [l:corresponding, l:current]
                            
   49              0.001013   let w:vimtex_match_id1 = matchaddpos('MatchParen', [[l:open.lnum, l:open.cnum, strlen(l:open.match)]])
   49              0.000611   let w:vimtex_match_id2 = matchaddpos('MatchParen', [[l:close.lnum, l:close.cnum, strlen(l:close.match)]])

FUNCTION  230()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/matchparen.vim:66
Called 266 times
Total time:   0.006501
 Self time:   0.006501

count  total (s)   self (s)
  266              0.001835   if exists('w:vimtex_match_id1')
   50              0.000421     call matchdelete(w:vimtex_match_id1)
   50              0.000240     call matchdelete(w:vimtex_match_id2)
   50              0.000306     unlet! w:vimtex_match_id1
   50              0.000091     unlet! w:vimtex_match_id2
  266              0.000317   endif

FUNCTION  238()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:115
Called 4 times
Total time:   0.000426
 Self time:   0.000426

count  total (s)   self (s)
    4              0.000015   let self.finished = 0
    4              0.000010   let self.amp_ind = -1
    4              0.000008   let self.init_ind = -1
    4              0.000010   let self.prev_lnum = a:plnum
    4              0.000009   let self.prev_line = a:pline
    4              0.000026   let self.prev_ind = a:plnum > 0 ? indent(a:plnum) : 0
    4              0.000024   if !g:vimtex_indent_on_ampersands | return self.prev_ind | endif
                            
    4              0.000132   if a:cline =~# s:re_align || a:cline =~# s:re_amp || a:cline =~# '^\v\s*\\%(end|])'
                                call self.parse_context(a:lnum, a:cline)
    4              0.000004   endif
                            
    4              0.000035   if a:cline =~# s:re_align
                                let self.finished = 1
                                let l:ind_diff =   strdisplaywidth(strpart(a:cline, 0, match(a:cline, s:re_amp))) - strdisplaywidth(strpart(a:cline, 0, match(a:cline, '\S')))
                                return self.amp_ind - l:ind_diff
    4              0.000003   endif
                            
    4              0.000018   if self.amp_ind >= 0 && (a:cline =~# '^\v\s*\\%(end|])' || a:cline =~# s:re_amp)
                                let self.prev_lnum = self.init_lnum
                                let self.prev_line = self.init_line
                                return self.init_ind
    4              0.000003   endif
                            
    4              0.000007   return self.prev_ind

FUNCTION  VimtexIndentExpr()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:32
Called 4 times
Total time:   0.008330
 Self time:   0.000134

count  total (s)   self (s)
                              " This wrapper function is used because of rnoweb[0] that "misuses" the
                              " indentexpr and assumes it takes no arguments.
                              "
                              " [0]: /usr/share/nvim/runtime/indent/rnoweb.vim:21
                            
    4   0.008289   0.000093   return VimtexIndent(v:lnum)

FUNCTION  <SNR>117_clean_line()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:100
Called 8 times
Total time:   0.000132
 Self time:   0.000132

count  total (s)   self (s)
    8              0.000126   return substitute(a:line, '\s*\\\@<!%.*', '', '')

FUNCTION  vimtex#delim#get_current()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/delim.vim:401
Called 266 times
Total time:   0.472328
 Self time:   0.013030

count  total (s)   self (s)
  266   0.471789   0.012491   return s:get_delim(extend({ 'direction' : 'current', 'type' : a:type, 'side' : a:side,}, get(a:, '1', {})))

FUNCTION  <SNR>117_indent_items()
    Defined: ~/.local/share/nvim/lazy/vimtex/indent/tex.vim:215
Called 4 times
Total time:   0.000266
 Self time:   0.000266

count  total (s)   self (s)
    4              0.000017   if s:envs_lists_empty | return 0 | endif
                            
    4              0.000044   if a:prev_line =~# s:envs_item && (a:line !~# s:envs_enditem     || (a:line =~# s:envs_item && a:prev_line =~# s:envs_beglist))
                                return s:sw
    4              0.000048   elseif a:line =~# s:envs_endlist && a:prev_line !~# s:envs_begitem
                                return -s:sw
    4              0.000027   elseif a:line =~# s:envs_item && a:prev_line !~# s:envs_item
                                let l:prev_lnum = a:prev_lnum
                                let l:prev_line = a:prev_line
                                while l:prev_lnum >= 1
                                  if l:prev_line =~# s:envs_begitem
                                    return -s:sw*(l:prev_line =~# s:envs_item)
                                  endif
                                  let l:prev_lnum = prevnonblank(l:prev_lnum - 1)
                                  let l:prev_line = getline(l:prev_lnum)
                                endwhile
    4              0.000003   endif
                            
    4              0.000007   return 0

FUNCTION  vimtex#cmd#get_at()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/cmd.vim:614
Called 40 times
Total time:   0.273614
 Self time:   0.002868

count  total (s)   self (s)
   40   0.000880   0.000585   let l:pos_saved = vimtex#pos#get_cursor()
   40   0.003875   0.000766   call call('vimtex#pos#set_cursor', a:000)
   40   0.266243   0.000751   let l:cmd = vimtex#cmd#get_current()
   40   0.002343   0.000493   call vimtex#pos#set_cursor(l:pos_saved)
   40              0.000084   return l:cmd

FUNCTION  vimtex#syntax#in_comment()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/syntax.vim:23
Called 266 times
Total time:   0.212514
 Self time:   0.007518

count  total (s)   self (s)
  266   0.212171   0.007174   return call('vimtex#syntax#in', ['texComment'] + a:000)

FUNCTION  <SNR>91_get_cmd()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/cmd.vim:665
Called 40 times
Total time:   0.253849
 Self time:   0.010607

count  total (s)   self (s)
   40   0.003471   0.000889   let [lnum, cnum, match] = s:get_cmd_name(a:direction ==# 'next')
   40              0.000334   if lnum == 0 | return {} | endif
                            
   40              0.001037   let res = { 'name' : match, 'text' : '', 'pos_start' : { 'lnum' : lnum, 'cnum' : cnum }, 'pos_end' : { 'lnum' : lnum, 'cnum' : cnum + strlen(match) - 1 }, 'args' : [], 'opts' : [],}
                            
                              " Environments always start with environment name and allows option
                              " afterwords
   40              0.000160   if res.name ==# '\begin'
   40   0.119291   0.000874     let arg = s:get_cmd_part('{', res.pos_end)
   40              0.000235     if empty(arg) | return res | endif
                            
   40              0.000336     call add(res.args, arg)
   40              0.000142     let res.pos_end.lnum = arg.close.lnum
   40              0.000105     let res.pos_end.cnum = arg.close.cnum
   40              0.000034   endif
                            
                              " Get overlay specification
   40   0.001974   0.000688   let res.overlay = s:get_cmd_overlay(res.pos_end.lnum, res.pos_end.cnum)
   40              0.000130   if !empty(res.overlay)
                                let res.pos_end.lnum = res.overlay.close.lnum
                                let res.pos_end.cnum = res.overlay.close.cnum
   40              0.000034   endif
                            
                              " Get options and arguments
   40              0.000148   while v:true
   40   0.058738   0.000852     let opt = s:get_cmd_part('[', res.pos_end)
   40              0.000142     if !empty(opt)
                                  call add(res.opts, opt)
                                  let res.pos_end.lnum = opt.close.lnum
                                  let res.pos_end.cnum = opt.close.cnum
                                  continue
   40              0.000033     endif
                            
   40   0.062427   0.001026     let arg = s:get_cmd_part('{', res.pos_end)
   40              0.000218     if !empty(arg)
                                  call add(res.args, arg)
                                  let res.pos_end.lnum = arg.close.lnum
                                  let res.pos_end.cnum = arg.close.cnum
                                  continue
   40              0.000030     endif
                            
   40              0.000064     break
   40              0.000140   endwhile
                            
                              " Include entire cmd text
   40   0.002611   0.000941   let res.text = s:text_between(res.pos_start, res.pos_end, 1)
                            
   40              0.000082   return res

FUNCTION  vimtex#cmd#get_current()
    Defined: ~/.local/share/nvim/lazy/vimtex/autoload/vimtex/cmd.vim:589
Called 40 times
Total time:   0.265492
 Self time:   0.004650

count  total (s)   self (s)
   40   0.001064   0.000660   let l:save_pos = vimtex#pos#get_cursor()
   40   0.003280   0.000674   let l:pos_val_cursor = vimtex#pos#val(l:save_pos)
                            
   40              0.000097   let l:depth = 3
   40              0.000181   while l:depth > 0
   40              0.000246     let l:depth -= 1
   40   0.254736   0.000888     let l:cmd = s:get_cmd('prev')
   40              0.000223     if empty(l:cmd) | break | endif
                            
   40   0.002681   0.000614     let l:pos_val = vimtex#pos#val(l:cmd.pos_end)
   40              0.000121     if l:pos_val >= l:pos_val_cursor
   40   0.002408   0.000491       call vimtex#pos#set_cursor(l:save_pos)
   40              0.000152       return l:cmd
                                else
                                  call vimtex#pos#set_cursor(vimtex#pos#prev(l:cmd.pos_start))
                                endif
                              endwhile
                            
                              call vimtex#pos#set_cursor(l:save_pos)
                            
                              return {}

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
  266   0.876524   0.032704  231()
  386   0.610568   0.285435  <SNR>94_get_delim()
  266   0.472328   0.013030  vimtex#delim#get_current()
   40   0.273614   0.002868  vimtex#cmd#get_at()
   40   0.265492   0.004650  vimtex#cmd#get_current()
   40   0.253849   0.010607  <SNR>91_get_cmd()
  120   0.237704   0.014952  <SNR>91_get_cmd_part()
  266   0.212514   0.007518  vimtex#syntax#in_comment()
  268   0.207515   0.013965  vimtex#syntax#in()
   89   0.197943   0.013463  vimtex#delim#get_matching()
  280   0.197481             vimtex#syntax#stack()
  465   0.165859   0.149605  <SNR>32_Highlight_Matching_Pair()
  120   0.155009   0.003739  vimtex#delim#get_next()
   40   0.152735   0.006991  204()
  122   0.084251   0.032873  216()
  924   0.058216   0.017856  vimtex#pos#set_cursor()
 1044   0.044513   0.043003  <SNR>106_parse_args()
   42   0.035340   0.034763  217()
  244   0.034570   0.030184  <SNR>94_get_re_for_delim()
  339   0.024298             215()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  386   0.610568   0.285435  <SNR>94_get_delim()
  280              0.197481  vimtex#syntax#stack()
  465   0.165859   0.149605  <SNR>32_Highlight_Matching_Pair()
 1044   0.044513   0.043003  <SNR>106_parse_args()
   42   0.035340   0.034763  217()
  122   0.084251   0.032873  216()
  266   0.876524   0.032704  231()
  244   0.034570   0.030184  <SNR>94_get_re_for_delim()
  339              0.024298  215()
  924   0.058216   0.017856  vimtex#pos#set_cursor()
  122              0.016808  <SNR>94_get_corr_delimiter()
  465              0.015436  <SNR>32_Remove_Matches()
  120   0.237704   0.014952  <SNR>91_get_cmd_part()
  268   0.207515   0.013965  vimtex#syntax#in()
   89   0.197943   0.013463  vimtex#delim#get_matching()
  266   0.472328   0.013030  vimtex#delim#get_current()
   40   0.253849   0.010607  <SNR>91_get_cmd()
  160              0.008470  <SNR>91_text_between()
    2              0.007581  <SNR>1_LoadFTPlugin()
  266   0.212514   0.007518  vimtex#syntax#in_comment()

